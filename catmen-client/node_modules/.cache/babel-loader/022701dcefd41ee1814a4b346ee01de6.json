{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid-with-edit-drawer.tsx\";\nimport React from \"react\";\nimport { toolTipContent } from \"../../views/tool-tip-content/content-tool-tips\";\nimport { dataManagerMain } from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport { SingleMediaDetailsView } from \"../../views/media-library/media-details-view\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport { DataGrid } from \"../../view-components/data-grid/data-grid\";\nimport { TextInput } from \"../../view-components/text-input/text-input\";\nexport class DataGridWithEditDrawer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectedMediaIndex = 0;\n    this.dataGridRef = React.createRef();\n    this.editDrawerRef = React.createRef();\n    this.drawerFirstOpen = false;\n    this.columnDefs = void 0;\n    this.initialized = false;\n    this.selectionSet = [];\n    this.drawerInputsLength = 0;\n\n    this.manageMediaDetailsPage = mediaIndex => {\n      this.selectedMediaIndex = mediaIndex;\n      this.setState({\n        detailsOpen: !this.state.detailsOpen\n      });\n    };\n\n    this.updateValues = (row, cell, value, colName) => {\n      if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n        this.selectionSet = this.dataGridRef.current.selectionSet;\n      } //console.log(\"inside drawer\", value, \" col name:\", colName);\n      //the minus 2 is the offset for the extra columns checkbox and edit\n\n\n      for (let i = 0; i < this.selectionSet.length; i++) {\n        if (this.selectionSet[i].columnName === colName) {\n          let myRow = this.selectionSet[i].row - 2;\n          let myCell = this.selectionSet[i].cell - 2; //this.workingDataSet[ myRow-2][myCell-2].value = value;\n\n          const updateSet = {\n            row: myRow,\n            cell: myCell,\n            newData: value\n          };\n\n          if (this.props.targetDataSet === \"custom-data\") {\n            //if it's custom we need to pass along the grid data package\n            this.props.dataManager.setData(this.props.targetDataSet, updateSet, this.props.gridData);\n          } else {\n            this.props.dataManager.setData(this.props.targetDataSet, updateSet);\n          }\n        }\n      }\n\n      this.setState({\n        workingData: this.props.dataManager.getProductData()\n      });\n    };\n\n    this.inputFocusAction = (row, cell) => {\n      console.log(\"inputFocusAction\", \"row \", row, \"cell\", cell);\n\n      if (this.state.editDrawerOpen === true) {\n        this.setState({\n          focusedInput: {\n            row: row,\n            cell: cell,\n            editDrawerOpen: this.state.editDrawerOpen\n          }\n        });\n      }\n    };\n\n    this.manageSelectionSet = (selectionSet, checkBoxSelections, message, row, cell) => {\n      if (checkBoxSelections.length > 0 || this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") {\n        if (checkBoxSelections.length <= 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"default\"\n          });\n        } else if (checkBoxSelections.length > 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"multiple-selected\"\n          });\n        }\n\n        this.initialized = true;\n      } else {\n        this.setState({\n          footerOpen: false\n        });\n      } //this is a catch all for parent objects to do something when...\n      //... a selection has occurred\n\n\n      if (this.props.selectionActions != undefined) {\n        for (let i = 0; i < this.props.selectionActions.length; i++) {\n          this.props.selectionActions[i]();\n        }\n      } //manage focus events\n      //we'll use the row & cell data here to manage the focus widget\n\n\n      if (this.state.editDrawerOpen === true) {\n        this.setState({\n          focusedInput: {\n            row: row,\n            cell: cell,\n            editDrawerOpen: true\n          }\n        });\n      }\n    };\n\n    this.columnDefs = this.props.columnsData;\n    this.state = {\n      detailsOpen: false,\n      editDrawerOpen: false,\n      //TODO need to adjust data manager\n      columnsData: this.props.columnsData,\n      workingData: this.props.gridData,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      },\n      footerOpen: false,\n      footerMode: \"default\",\n      editDrawerMaximized: false\n    };\n  }\n\n  getMediaDetailsView() {\n    if (this.state.detailsOpen === true) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SingleMediaDetailsView, {\n        mediaData: dataManagerMain.getMediaObjectData()[this.selectedMediaIndex],\n        closeSingleMediaView: () => this.manageMediaDetailsPage(0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getColumnLabel(colName) {\n    //utility method for getting column data obj from\n    let columnLabel = \"\";\n\n    for (let i = 0; i < this.columnDefs.length; i++) {\n      if (this.columnDefs[i].columnName === colName) {\n        columnLabel = this.columnDefs[i].columnLabel;\n      }\n    }\n\n    return columnLabel;\n  }\n\n  openEditDrawer() {\n    this.drawerFirstOpen = true;\n    this.setState({\n      editDrawerOpen: true\n    });\n  } //DRAWER RELATED\n\n\n  maximizeEditDrawer() {\n    this.setState({\n      editDrawerMaximized: !this.state.editDrawerMaximized\n    });\n  }\n\n  closeEditDrawer() {\n    this.setState({\n      editDrawerOpen: false,\n      editDrawerMaximized: false,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      }\n    });\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.dataGridRef.current.clearSelection();\n    }\n\n    this.drawerFirstOpen = false;\n  }\n\n  shiftFocus(shiftIndex) {\n    let inputs = document.getElementsByClassName(\"InputBox\");\n    console.log(inputs);\n\n    if (inputs[0] != undefined) {\n      if (shiftIndex === inputs.length - 1) {\n        // @ts-ignore\n        inputs[0].focus(); // @ts-ignore\n\n        inputs[0].select();\n      }\n    }\n  }\n\n  getEditDrawer() {\n    if (this.state.editDrawerOpen === false) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.selectionSet = this.dataGridRef.current.selectionSet;\n    }\n\n    let inputs = [];\n    let selectedItems = []; //Create list of selection items that need inputs (i.e. one input per column)\n\n    i: for (let i = 0; i < this.selectionSet.length; i++) {\n      console.log(\"selection set:\", this.selectionSet[i]);\n\n      j: for (let j = 0; j < selectedItems.length; j++) {\n        if (this.selectionSet[i].columnName === selectedItems[j].columnName) {\n          continue i;\n        }\n      }\n\n      let row = this.selectionSet[i].row;\n      let cell = this.selectionSet[i].cell; //TODO this needs to be genericized\n      //let productDataItem = catmanData.productData[row-2][cell-2];\n\n      let productDataItem = this.props.gridData[row - 2][cell - 2];\n      selectedItems.push(productDataItem);\n    } //Store number of inputs for later use\n\n\n    this.drawerInputsLength = selectedItems.length; //CREATE INPUTS for DRAWER\n\n    let checkVal = \"\";\n\n    for (let i = 0; i < selectedItems.length; i++) {\n      for (let j = 0; j < selectedItems.length; j++) {\n        selectedItems[j].value;\n      }\n\n      let input = /*#__PURE__*/React.createElement(TextInput, {\n        row: this.selectionSet[i].row,\n        cell: this.selectionSet[i].cell,\n        columnName: this.selectionSet[i].columnName,\n        label: this.getColumnLabel(selectedItems[i].columnName),\n        currentValue: selectedItems[i].value,\n        onChangeAction: this.updateValues,\n        onFocusAction: this.inputFocusAction,\n        onBlurActions: [() => this.shiftFocus(i)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 17\n        }\n      });\n      inputs.push(input);\n    }\n\n    let maximize = valueCheck => {\n      if (valueCheck === true) {\n        return \"maximized\";\n      } else {\n        return \"catman-edit-default restored\";\n      }\n    };\n\n    let restoreAndMaximizeTooltip = valueCheck => {\n      if (valueCheck === false) {\n        return toolTipContent.maximizeDrawer();\n      } else {\n        return toolTipContent.restoreDrawer();\n      }\n    };\n\n    let restoreAndMaximizeBtnIcon = valueCheck => {\n      if (valueCheck === false) {\n        return \"icon-maximize\";\n      } else {\n        return \"icon-restore-btn\";\n      }\n    };\n\n    let drawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.state.editDrawerOpen === true) {\n      drawer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        ref: this.editDrawerRef,\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: `catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`,\n        animateIn: true,\n        heightIncludeUnits: \"\",\n        widthIncludeUnits: \"\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        toolBar: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tool-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.maximizeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: restoreAndMaximizeTooltip(this.state.editDrawerMaximized),\n        toolTipTimeOutInMS: 10000,\n        classes: \"tool-bar-btn icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: `${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`,\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.closeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: toolTipContent.closeDrawer(),\n        toolTipTimeOutInMS: 10000,\n        classes: \"icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: \"icon-close\",\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-edit-area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }\n      }, inputs)));\n    }\n\n    return drawer;\n  } //GRID MANAGEMENT\n\n\n  getGridArea() {\n    return /*#__PURE__*/React.createElement(DataGrid, {\n      ref: this.dataGridRef,\n      data: this.state.workingData,\n      manageParentViews: () => this.openEditDrawer(),\n      selectionCallback: this.manageSelectionSet,\n      columnsData: this.state.columnsData,\n      classes: this.conditionClasses(),\n      addAction: this.addAction,\n      focusedItem: this.state.focusedInput,\n      hasDetailsActionButton: this.props.gridHasDetailsButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 13\n      }\n    });\n  }\n\n  conditionClasses() {\n    if (this.state.editDrawerOpen === true) {\n      return \"drawer-open\";\n    }\n  }\n\n  addAction(addType) {\n    switch (addType) {\n      case \"add-attribute\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"add-products\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  switchToEditMode() {\n    if (this.dataGridRef.current !== null && this.dataGridRef.current !== undefined) {\n      this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n      this.openEditDrawer();\n      this.initialized = false;\n      this.setState({\n        footerOpen: false\n      });\n    }\n  } // Grid\n\n\n  clearSelection() {\n    if (this.dataGridRef.current !== null && this.dataGridRef.current !== undefined) {\n      this.dataGridRef.current.clearSelection();\n    }\n  }\n\n  getCheckedRows() {\n    if (this.dataGridRef.current != undefined) {\n      return this.dataGridRef.current._checkedRows;\n    }\n  }\n\n  switchToEditModeFromCheckBoxMode() {\n    if (this.dataGridRef.current !== null && this.dataGridRef.current !== undefined) {\n      this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n      this.openEditDrawer();\n      this.initialized = false;\n      this.setState({\n        footerOpen: false\n      });\n    }\n  } //Life Cycle\n\n\n  componentDidUpdate() {\n    let inputs = document.getElementsByClassName(\"InputBox\");\n\n    if (this.drawerFirstOpen === true) {\n      if (inputs[0] != undefined) {\n        inputs[0].focus();\n        inputs[0].select();\n        this.drawerFirstOpen = false;\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.getEditDrawer(), this.getGridArea(), this.getMediaDetailsView());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid-with-edit-drawer.tsx"],"names":["React","toolTipContent","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGrid","TextInput","DataGridWithEditDrawer","Component","constructor","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","drawerFirstOpen","columnDefs","initialized","selectionSet","drawerInputsLength","manageMediaDetailsPage","mediaIndex","setState","detailsOpen","state","updateValues","row","cell","value","colName","current","undefined","i","length","columnName","myRow","myCell","updateSet","newData","targetDataSet","dataManager","setData","gridData","workingData","getProductData","inputFocusAction","console","log","editDrawerOpen","focusedInput","manageSelectionSet","checkBoxSelections","message","footerOpen","footerMode","selectionActions","columnsData","editDrawerMaximized","getMediaDetailsView","getMediaObjectData","getColumnLabel","columnLabel","openEditDrawer","maximizeEditDrawer","closeEditDrawer","clearSelection","shiftFocus","shiftIndex","inputs","document","getElementsByClassName","focus","select","getEditDrawer","selectedItems","j","productDataItem","push","checkVal","input","maximize","valueCheck","restoreAndMaximizeTooltip","maximizeDrawer","restoreDrawer","restoreAndMaximizeBtnIcon","drawer","closeDrawer","getGridArea","conditionClasses","addAction","gridHasDetailsButton","addType","switchToEditMode","switchToEditModeFromCheckBoxMode","getCheckedRows","_checkedRows","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React, {ReactElement} from \"react\";\n\nimport {toolTipContent} from \"../../views/tool-tip-content/content-tool-tips\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"../../views/media-library/media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../_catman-data-types\";\nimport {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\nimport {iColumn} from \"../../_catman-data-types\";\nimport {focusInputType} from \"../../views/catalog-views/catalog-details/catalog-details-view\";\nimport {TextInput} from \"../../view-components/text-input/text-input\";\nimport {dataSetType} from \"../../data-components/data-manager/data-manager\";\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\n\ninterface iPROPS {\n    message?: string;\n    gridData : iDataGridItem[][];\n    columnsData : iColumn[];\n    dataManager : DataManager;\n    targetDataSet : dataSetType;\n    selectionActions? : Function[];\n    gridHasDetailsButton : boolean;\n}\n\ninterface iSTATE{\n    detailsOpen : boolean;\n    editDrawerOpen : boolean;\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n    focusedInput : focusInputType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    editDrawerMaximized : boolean;\n}\n\nexport class DataGridWithEditDrawer extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.columnDefs = this.props.columnsData;\n        this.state={\n            detailsOpen : false,\n            editDrawerOpen : false,\n            //TODO need to adjust data manager\n            columnsData : this.props.columnsData,\n            workingData : this.props.gridData,\n            focusedInput : { row:0, cell:0, editDrawerOpen : false},\n            footerOpen : false,\n            footerMode : \"default\",\n            editDrawerMaximized : false\n        }\n    }\n\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n    drawerFirstOpen : boolean = false;\n    //COLUMN DEFINITIONS:\n    columnDefs : iColumn[];\n\n    //just for the fist launch of checkbox editing\n    initialized : boolean = false;\n\n    selectionSet : selectionObject[] = [];\n    drawerInputsLength = 0;\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({detailsOpen : !this.state.detailsOpen})\n    };\n\n    getMediaDetailsView(){\n        if(this.state.detailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n    getColumnLabel(colName : string) : string{\n        //utility method for getting column data obj from\n        let columnLabel = \"\";\n        for(let i = 0; i < this.columnDefs.length; i++){\n            if(this.columnDefs[i].columnName === colName){\n                columnLabel = this.columnDefs[i].columnLabel;\n            }\n        }\n        return columnLabel;\n    }\n\n    updateValues=(row : number, cell:number, value:string, colName : string)=>{\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n\n        }\n        //console.log(\"inside drawer\", value, \" col name:\", colName);\n        //the minus 2 is the offset for the extra columns checkbox and edit\n        for(let i =0; i < this.selectionSet.length; i++){\n            if(this.selectionSet[i].columnName === colName){\n                let myRow = this.selectionSet[i].row-2;\n                let myCell = this.selectionSet[i].cell-2;\n\n                //this.workingDataSet[ myRow-2][myCell-2].value = value;\n                const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n                if(this.props.targetDataSet === \"custom-data\"){\n                    //if it's custom we need to pass along the grid data package\n                    this.props.dataManager.setData(this.props.targetDataSet, updateSet, this.props.gridData);\n                }else{\n                    this.props.dataManager.setData(this.props.targetDataSet, updateSet);\n                }\n            }\n        }\n        this.setState({workingData : this.props.dataManager.getProductData()});\n    };\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n\n    //DRAWER RELATED\n    maximizeEditDrawer(){\n        this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n    }\n\n    closeEditDrawer(){\n        this.setState({\n            editDrawerOpen : false,\n            editDrawerMaximized : false,\n            focusedInput : {row:0, cell:0, editDrawerOpen:false}\n        });\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n        this.drawerFirstOpen = false;\n    }\n\n    shiftFocus(shiftIndex: number){\n        let inputs: HTMLCollection = document.getElementsByClassName(\"InputBox\");\n        console.log(inputs);\n        if(inputs[0] != undefined){\n            if(shiftIndex === inputs.length-1){\n                // @ts-ignore\n                inputs[0].focus();\n                // @ts-ignore\n                inputs[0].select();\n            }\n        }\n    };\n\n    inputFocusAction=(row : number, cell:number)=>{\n        console.log(\"inputFocusAction\", \"row \",row, \"cell\", cell   );\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n        }\n    };\n\n    getEditDrawer():ReactElement{\n\n        if(this.state.editDrawerOpen === false){\n            return(<></>);\n        }\n\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n        }\n\n        let inputs : ReactElement[] = [];\n        let selectedItems : iDataGridItem[] = [];\n\n        //Create list of selection items that need inputs (i.e. one input per column)\n        i: for(let i=0; i < this.selectionSet.length; i++){\n            console.log( \"selection set:\", this.selectionSet[i] );\n            j: for(let j=0; j < selectedItems.length; j++){\n                if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n                    continue i;\n                }\n            }\n            let row = this.selectionSet[i].row;\n            let cell = this.selectionSet[i].cell;\n            //TODO this needs to be genericized\n            //let productDataItem = catmanData.productData[row-2][cell-2];\n            let productDataItem = this.props.gridData[row-2][cell-2];\n            selectedItems.push(productDataItem);\n        }\n\n        //Store number of inputs for later use\n        this.drawerInputsLength = selectedItems.length;\n\n        //CREATE INPUTS for DRAWER\n\n        let checkVal = \"\";\n        for( let i=0; i < selectedItems.length; i++){\n\n            for(let j=0; j < selectedItems.length; j++){\n                selectedItems[j].value\n            }\n            let input = (\n                <TextInput\n                    row={this.selectionSet[i].row}\n                    cell={this.selectionSet[i].cell}\n                    columnName={this.selectionSet[i].columnName}\n                    label={this.getColumnLabel( selectedItems[i].columnName )}\n                    currentValue={ selectedItems[i].value}\n                    onChangeAction={this.updateValues}\n                    onFocusAction={this.inputFocusAction}\n                    onBlurActions={[ ()=>this.shiftFocus(i) ]}\n                />\n            );\n            inputs.push(input)\n        }\n\n        let maximize = (valueCheck : boolean)=>{\n            if(valueCheck === true){\n                return \"maximized\"\n            }else{\n                return \"catman-edit-default restored\"\n            }\n        };\n\n        let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return toolTipContent.maximizeDrawer();\n            }else{\n                return toolTipContent.restoreDrawer();\n            }\n        };\n\n        let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return \"icon-maximize\"\n            }else{\n                return \"icon-restore-btn\"\n            }\n        };\n\n\n        let drawer = (<></>);\n        if(this.state.editDrawerOpen === true){\n            drawer = (\n                <>\n                    <StickyThing\n                        ref = {this.editDrawerRef}\n                        enterFromThisSide=\"bottom\"\n                        lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n                        animateIn={true}\n                        heightIncludeUnits=\"\"\n                        widthIncludeUnits={\"\"}\n                        stickyOpen={true}\n                        bgColor={\"#CECECE\"}\n                        doAnimation={true}\n                        toolBar=\"none\"\n                    >\n                        <div className={\"tool-bar\"}>\n                            <div></div>\n                            <div className=\"drawer-controls\">\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.maximizeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"tool-bar-btn icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.closeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={toolTipContent.closeDrawer()}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName=\"icon-close\"\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n\n                            </div>\n                        </div>\n                        <div className=\"drawer-edit-area\">\n                            {inputs}\n                        </div>\n                    </StickyThing>\n                </>\n            );\n        }\n        return drawer;\n    }\n\n    //GRID MANAGEMENT\n    getGridArea(){\n        return (\n            <DataGrid\n                ref={this.dataGridRef}\n                data={this.state.workingData}\n                manageParentViews={()=>this.openEditDrawer()}\n                selectionCallback={this.manageSelectionSet}\n                columnsData={this.state.columnsData}\n                classes={this.conditionClasses()}\n                addAction={this.addAction}\n                focusedItem={this.state.focusedInput}\n                hasDetailsActionButton={this.props.gridHasDetailsButton}\n            />\n        )\n    }\n\n    manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string, row:number, cell:number )=>{\n        if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n            if(checkBoxSelections.length <= 1){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n            }else if(checkBoxSelections.length > 1 ){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n            }\n            this.initialized = true;\n        }else{\n            this.setState({footerOpen : false});\n        }\n\n        //this is a catch all for parent objects to do something when...\n        //... a selection has occurred\n\n        if(this.props.selectionActions != undefined){\n            for(let i=0; i < this.props.selectionActions.length; i++){\n                this.props.selectionActions[i]();\n            }\n        }\n\n        //manage focus events\n        //we'll use the row & cell data here to manage the focus widget\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen:true}})\n        }\n\n    };\n    conditionClasses(){\n        if(this.state.editDrawerOpen === true){\n            return \"drawer-open\";\n        }\n    }\n    addAction(addType:string){\n\n        switch (addType) {\n            case \"add-attribute\":\n\n                return(<></>);\n            case \"add-products\":\n\n                return(<></>);\n        }\n    }\n\n    switchToEditMode(){\n        if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n            this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n            this.openEditDrawer();\n            this.initialized = false;\n            this.setState({footerOpen : false})\n        }\n    }\n\n    // Grid\n    clearSelection(){\n        if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n    }\n    getCheckedRows(){\n        if(this.dataGridRef.current != undefined)\n        {\n            return this.dataGridRef.current._checkedRows\n        }\n    }\n    switchToEditModeFromCheckBoxMode(){\n        if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n            this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n            this.openEditDrawer();\n            this.initialized = false;\n            this.setState({footerOpen : false})\n        }\n    }\n\n    //Life Cycle\n    componentDidUpdate(): void {\n        let inputs : any = document.getElementsByClassName(\"InputBox\");\n\n        if(this.drawerFirstOpen === true ){\n            if(inputs[0] != undefined){\n                inputs[0].focus();\n                inputs[0].select();\n                this.drawerFirstOpen = false;\n            }\n        }\n    }\n\n    render(){\n        return(\n            <>\n                {this.getEditDrawer()}\n                {this.getGridArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}