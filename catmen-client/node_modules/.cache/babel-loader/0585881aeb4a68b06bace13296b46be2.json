{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx\";\nimport React from \"react\";\nimport { MainHeaderArea } from \"../_common/main-header-area/main-header-area\";\nimport { Navigation } from \"../../view-components/list-menu/intra-app-navigation\";\nimport { mainNavConfig } from \"../_catman-configuration/common-app-configuration\";\nimport { toolTipContent } from \"../tool-tip-content/content-tool-tips\";\nimport { TitleArea } from \"../../view-components/title-area/title-area\";\nimport { CardArea } from \"../../view-components/cards-area/card-area\";\nimport { Card } from \"../../view-components/card/card\";\nimport { dataManagerMain } from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport { SingleMediaDetailsView } from \"./media-details-view\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport { DataGrid } from \"../../view-components/data-grid/data-grid\";\nimport { catmanData } from \"../../_sample-data/products-data\";\nimport { TextInput } from \"../../view-components/text-input/text-input\";\nexport class MediaLibraryView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectedMediaIndex = 0;\n    this.dataGridRef = React.createRef();\n    this.editDrawerRef = React.createRef();\n    this.drawerFirstOpen = false;\n    this.initialized = false;\n    this.selectionSet = [];\n    this.drawerInputsLength = 0;\n\n    this.manageMediaDetailsPage = mediaIndex => {\n      console.log(\"mediaIndex\", mediaIndex);\n      this.selectedMediaIndex = mediaIndex;\n      this.setState({\n        mediaDetailsOpen: !this.state.mediaDetailsOpen\n      });\n    };\n\n    this.manageSelectionSet = (selectionSet, checkBoxSelections, message) => {\n      if (checkBoxSelections.length > 0 || this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") {\n        if (checkBoxSelections.length <= 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"default\"\n          });\n        } else if (checkBoxSelections.length > 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"multiple-selected\"\n          });\n        }\n\n        this.initialized = true;\n      } else {\n        this.setState({\n          footerOpen: false\n        });\n      }\n    };\n\n    this.state = {\n      mediaDetailsOpen: false,\n      viewMode: \"cards-view\",\n      editDrawerOpen: false,\n      //TODO need to adjust data manager\n      columnsData: this.props.columnsData,\n      workingData: this.props.gridData,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      },\n      footerOpen: false,\n      footerMode: \"default\"\n    };\n  }\n\n  manageViewModes(desiredState) {\n    this.setState({\n      viewMode: desiredState\n    });\n  }\n\n  getMediaDetailsView() {\n    if (this.state.mediaDetailsOpen === true) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SingleMediaDetailsView, {\n        mediaData: dataManagerMain.getMediaData()[this.selectedMediaIndex],\n        closeSingleMediaView: () => this.manageMediaDetailsPage(0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getCardArea() {\n    if (this.state.mediaDetailsOpen === false) {\n      return /*#__PURE__*/React.createElement(CardArea, {\n        containerClasses: \"catman-media-cards\",\n        cards: /*#__PURE__*/React.createElement(Card, {\n          cardType: \"media\",\n          mediaData: dataManagerMain.getMediaData(),\n          getDetailsFunctions: this.manageMediaDetailsPage,\n          actionToolTip: toolTipContent.mediaRelatedTooltips(\"media-details\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  openEditDrawer() {\n    this.drawerFirstOpen = true;\n    this.setState({\n      editDrawerOpen: true\n    });\n  }\n\n  getEditDrawer() {\n    if (this.state.editDrawerOpen === false) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.selectionSet = this.dataGridRef.current.selectionSet; // console.log(\"cat details view selection set: \", this.selectionSet)\n    }\n\n    let inputs = [];\n    let selectedItems = []; //Create list of selection items that need inputs (i.e. one input per column)\n\n    i: for (let i = 0; i < this.selectionSet.length; i++) {\n      j: for (let j = 0; j < selectedItems.length; j++) {\n        if (this.selectionSet[i].columnName === selectedItems[j].columnName) {\n          continue i;\n        }\n      }\n\n      let row = this.selectionSet[i].row;\n      let cell = this.selectionSet[i].cell; //TODO this needs to be genericized\n      //let productDataItem = catmanData.productData[row-2][cell-2];\n\n      let productDataItem = catmanData.productData[row - 2][cell - 2];\n      selectedItems.push(productDataItem);\n    } //Store number of inputs for later use\n\n\n    this.drawerInputsLength = selectedItems.length;\n\n    for (let i = 0; i < selectedItems.length; i++) {\n      let input = /*#__PURE__*/React.createElement(TextInput, {\n        row: this.selectionSet[i].row,\n        cell: this.selectionSet[i].cell,\n        columnName: this.selectionSet[i].columnName,\n        label: this.getColumnLabel(selectedItems[i].columnName),\n        currentValue: selectedItems[i].value,\n        onChangeAction: this.updateValues,\n        onFocusAction: this.inputFocusAction,\n        onBlurActions: [() => this.shiftFocus(i)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }\n      });\n      inputs.push(input);\n    }\n\n    let maximize = valueCheck => {\n      if (valueCheck === true) {\n        return \"maximized\";\n      } else {\n        return \"catman-edit-default restored\";\n      }\n    };\n\n    let restoreAndMaximizeTooltip = valueCheck => {\n      if (valueCheck === false) {\n        return toolTipContent.maximizeDrawer();\n      } else {\n        return toolTipContent.restoreDrawer();\n      }\n    };\n\n    let restoreAndMaximizeBtnIcon = valueCheck => {\n      if (valueCheck === false) {\n        return \"icon-maximize\";\n      } else {\n        return \"icon-restore-btn\";\n      }\n    };\n\n    let drawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.state.editDrawerOpen === true) {\n      drawer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        ref: this.editDrawerRef,\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: `catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`,\n        animateIn: true,\n        heightIncludeUnits: \"\",\n        widthIncludeUnits: \"\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        toolBar: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tool-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.maximizeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: restoreAndMaximizeTooltip(this.state.editDrawerMaximized),\n        toolTipTimeOutInMS: 10000,\n        classes: \"tool-bar-btn icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: `${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`,\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.closeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: toolTipContent.closeDrawer(),\n        toolTipTimeOutInMS: 10000,\n        classes: \"icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: \"icon-close\",\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-edit-area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 25\n        }\n      }, inputs)));\n    }\n\n    return drawer;\n  } //MANAGE GRID\n  //GRID MANAGEMENT\n\n\n  conditionClasses() {\n    if (this.state.editDrawerOpen === true) {\n      return \"drawer-open\";\n    }\n  }\n\n  addAction(addType) {\n    console.log(\"added item or items: \", addType);\n\n    switch (addType) {\n      case \"add-attribute\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"add-products\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  getGridArea() {\n    return /*#__PURE__*/React.createElement(DataGrid, {\n      ref: this.dataGridRef,\n      data: this.state.workingData,\n      manageParentViews: () => this.openEditDrawer(),\n      selectionCallback: this.manageSelectionSet,\n      columnsData: this.state.columnsData,\n      classes: this.conditionClasses(),\n      addAction: this.addAction,\n      focusedItem: this.state.focusedInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    });\n  }\n\n  getContentArea() {\n    switch (this.state.viewMode) {\n      case \"grid-view\":\n        return this.getGridArea();\n\n      case \"cards-view\":\n        return this.getCardArea();\n    }\n  }\n\n  getToggleBar() {\n    //determine class\n    const selectedClass = stateName => {\n      if (stateName == this.state.viewMode) {\n        return \"active\";\n      } else {\n        return \"\";\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"grid-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"grid-view\")}`,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-list-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"cards-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"cards-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-card-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"mosaic-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"mosaic-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-mosaic-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MainHeaderArea, {\n      addItemAction: () => {},\n      sectionTitle: \"Media Library\",\n      mainButtonLabel: \"Add Media\",\n      navigationElement: /*#__PURE__*/React.createElement(Navigation, {\n        menuHelpStyle: \"panel\",\n        navElements: mainNavConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 40\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TitleArea, {\n      mainTitle: \"Media Library\",\n      subTitle: \"Manage media to describe your products\",\n      titleType: \"subtitle-above\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"view-switch-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }\n    }, this.getToggleBar()), this.getContentArea(), this.getMediaDetailsView());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx"],"names":["React","MainHeaderArea","Navigation","mainNavConfig","toolTipContent","TitleArea","CardArea","Card","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGrid","catmanData","TextInput","MediaLibraryView","Component","constructor","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","drawerFirstOpen","initialized","selectionSet","drawerInputsLength","manageMediaDetailsPage","mediaIndex","console","log","setState","mediaDetailsOpen","state","manageSelectionSet","checkBoxSelections","message","length","editDrawerOpen","footerOpen","footerMode","viewMode","columnsData","workingData","gridData","focusedInput","row","cell","manageViewModes","desiredState","getMediaDetailsView","getMediaData","getCardArea","mediaRelatedTooltips","openEditDrawer","getEditDrawer","current","undefined","inputs","selectedItems","i","j","columnName","productDataItem","productData","push","input","getColumnLabel","value","updateValues","inputFocusAction","shiftFocus","maximize","valueCheck","restoreAndMaximizeTooltip","maximizeDrawer","restoreDrawer","restoreAndMaximizeBtnIcon","drawer","editDrawerMaximized","maximizeEditDrawer","closeEditDrawer","closeDrawer","conditionClasses","addAction","addType","getGridArea","getContentArea","getToggleBar","selectedClass","stateName","goBackWizard","render"],"mappings":"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","sourcesContent":["import React, {ReactElement} from \"react\";\nimport {MainHeaderArea} from \"../_common/main-header-area/main-header-area\";\nimport {Navigation} from \"../../view-components/list-menu/intra-app-navigation\";\nimport {mainNavConfig} from \"../_catman-configuration/common-app-configuration\";\nimport {toolTipContent} from \"../tool-tip-content/content-tool-tips\";\nimport {TitleArea} from \"../../view-components/title-area/title-area\";\nimport {CardArea} from \"../../view-components/cards-area/card-area\";\nimport {Card} from \"../../view-components/card/card\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"./media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../view-components/data-grid/data-types-for-data-grid\";\nimport {DataManager} from \"../../data-components/data-manager/data-manager\";\nimport {iColumn} from \"../../_sample-data/columns\";\nimport {focusInputType} from \"../catalog-views/catalog-details/catalog-details-view\";\nimport {catmanData} from \"../../_sample-data/products-data\";\nimport {TextInput} from \"../../view-components/text-input/text-input\";\n\ninterface iPROPS {\n    message?: string;\n    gridData : iDataGridItem[][];\n    columnsData : iColumn[];\n}\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\ninterface iSTATE{\n    mediaDetailsOpen : boolean;\n    viewMode : viewState;\n    editDrawerOpen : boolean;\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n    focusedInput : focusInputType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n}\n\nexport class MediaLibraryView extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.state={\n            mediaDetailsOpen : false,\n            viewMode : \"cards-view\",\n            editDrawerOpen : false,\n            //TODO need to adjust data manager\n            columnsData : this.props.columnsData,\n            workingData : this.props.gridData,\n            focusedInput : { row:0, cell:0, editDrawerOpen : false},\n            footerOpen : false,\n            footerMode : \"default\"\n        }\n    }\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n    drawerFirstOpen : boolean = false;\n\n    //just for the fist launch of checkbox editing\n    initialized : boolean = false;\n\n    selectionSet : selectionObject[] = [];\n    drawerInputsLength = 0;\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        console.log(\"mediaIndex\", mediaIndex );\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({mediaDetailsOpen : !this.state.mediaDetailsOpen})\n    };\n\n\n    manageViewModes(desiredState : viewState){\n        this.setState({viewMode : desiredState});\n    }\n\n    getMediaDetailsView(){\n        if(this.state.mediaDetailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n    getCardArea() {\n        if (this.state.mediaDetailsOpen === false) {\n            return (<CardArea\n                containerClasses=\"catman-media-cards\"\n                cards={\n                    <Card\n                        cardType=\"media\"\n                        mediaData={dataManagerMain.getMediaData()}\n                        getDetailsFunctions={this.manageMediaDetailsPage}\n                        actionToolTip={toolTipContent.mediaRelatedTooltips(\"media-details\")}\n                    />\n                }\n            />)\n        } else {\n            return (<></>)\n        }\n    }\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n    getEditDrawer():ReactElement{\n\n        if(this.state.editDrawerOpen === false){\n            return(<></>);\n        }\n\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n            // console.log(\"cat details view selection set: \", this.selectionSet)\n        }\n\n        let inputs : ReactElement[] = [];\n        let selectedItems : iDataGridItem[] = [];\n\n        //Create list of selection items that need inputs (i.e. one input per column)\n        i: for(let i=0; i < this.selectionSet.length; i++){\n            j: for(let j=0; j < selectedItems.length; j++){\n                if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n                    continue i;\n                }\n            }\n            let row = this.selectionSet[i].row;\n            let cell = this.selectionSet[i].cell;\n            //TODO this needs to be genericized\n            //let productDataItem = catmanData.productData[row-2][cell-2];\n            let productDataItem = catmanData.productData[row-2][cell-2];\n            selectedItems.push(productDataItem);\n        }\n\n        //Store number of inputs for later use\n        this.drawerInputsLength = selectedItems.length;\n\n        for( let i=0; i < selectedItems.length; i++){\n            let input = (\n                <TextInput\n                    row={this.selectionSet[i].row}\n                    cell={this.selectionSet[i].cell}\n                    columnName={this.selectionSet[i].columnName}\n                    label={this.getColumnLabel( selectedItems[i].columnName )}\n                    currentValue={ selectedItems[i].value}\n                    onChangeAction={this.updateValues}\n                    onFocusAction={this.inputFocusAction}\n                    onBlurActions={[ ()=>this.shiftFocus(i) ]}\n                />\n            );\n            inputs.push(input)\n        }\n\n        let maximize = (valueCheck : boolean)=>{\n            if(valueCheck === true){\n                return \"maximized\"\n            }else{\n                return \"catman-edit-default restored\"\n            }\n        };\n\n        let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return toolTipContent.maximizeDrawer();\n            }else{\n                return toolTipContent.restoreDrawer();\n            }\n        };\n\n        let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return \"icon-maximize\"\n            }else{\n                return \"icon-restore-btn\"\n            }\n        }\n\n\n        let drawer = (<></>);\n        if(this.state.editDrawerOpen === true){\n            drawer = (\n                <>\n                    <StickyThing\n                        ref = {this.editDrawerRef}\n                        enterFromThisSide=\"bottom\"\n                        lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n                        animateIn={true}\n                        heightIncludeUnits=\"\"\n                        widthIncludeUnits={\"\"}\n                        stickyOpen={true}\n                        bgColor={\"#CECECE\"}\n                        doAnimation={true}\n                        toolBar=\"none\"\n                    >\n                        <div className={\"tool-bar\"}>\n                            <div></div>\n                            <div className=\"drawer-controls\">\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.maximizeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"tool-bar-btn icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.closeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={toolTipContent.closeDrawer()}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName=\"icon-close\"\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n\n                            </div>\n                        </div>\n\n                        <div className=\"drawer-edit-area\">\n                            {inputs}\n                        </div>\n                    </StickyThing>\n                </>\n            );\n        }\n        return drawer;\n    }\n    //MANAGE GRID\n    //GRID MANAGEMENT\n    manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )=>{\n        if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n            if(checkBoxSelections.length <= 1){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n            }else if(checkBoxSelections.length > 1 ){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n            }\n            this.initialized = true;\n        }else{\n            this.setState({footerOpen : false});\n        }\n\n    };\n    conditionClasses(){\n        if(this.state.editDrawerOpen === true){\n            return \"drawer-open\";\n        }\n    }\n    addAction(addType:string){\n        console.log(\"added item or items: \", addType );\n        switch (addType) {\n            case \"add-attribute\":\n\n                return(<></>);\n            case \"add-products\":\n\n                return(<></>);\n\n\n\n        }\n    }\n\n    getGridArea(){\n        return (\n            <DataGrid\n                ref={this.dataGridRef}\n                data={this.state.workingData}\n                manageParentViews={()=>this.openEditDrawer()}\n                selectionCallback={this.manageSelectionSet}\n                columnsData={this.state.columnsData}\n                classes={this.conditionClasses()}\n                addAction={this.addAction}\n                focusedItem={this.state.focusedInput}\n            />\n        )\n    }\n\n    getContentArea(){\n        switch (this.state.viewMode) {\n            case \"grid-view\":\n                return this.getGridArea();\n            case \"cards-view\":\n                return this.getCardArea();\n        }\n    }\n\n    getToggleBar(){\n\n        //determine class\n        const selectedClass = (stateName : viewState)=>{\n          if(stateName == this.state.viewMode)\n          {\n              return \"active\";\n          }\n          else\n          {\n              return \"\";\n          }\n        };\n\n        return(\n            <div className=\"button-bar\">\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"grid-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"grid-view\")}`}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-list-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"cards-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"cards-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-card-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"mosaic-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={ toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"mosaic-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-mosaic-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <>\n                <MainHeaderArea\n                    addItemAction={()=>{}}\n                    sectionTitle=\"Media Library\"\n                    mainButtonLabel=\"Add Media\"\n                    navigationElement={<Navigation menuHelpStyle=\"panel\" navElements={mainNavConfig} />}\n                />\n                <TitleArea\n                    mainTitle=\"Media Library\"\n                    subTitle=\"Manage media to describe your products\"\n                    titleType=\"subtitle-above\"\n                />\n                <div className=\"view-switch-container\">{this.getToggleBar()}</div>\n                {this.getContentArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}