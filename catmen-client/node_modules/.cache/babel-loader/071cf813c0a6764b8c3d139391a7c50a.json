{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\"; //data grid data should be an array of arrays\n//each product is an array of attributes\n\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numCols = void 0;\n    this.numRows = void 0;\n    this.selectionSet = [];\n    this.numCols = this.getNumColumns();\n    this.numRows = this.getNumRows();\n  }\n\n  manageSelection(row, cell) {\n    let found = false;\n\n    for (let i = 0; i < this.selectionSet.length; i++) {\n      if (this.selectionSet[i].cell === cell && this.selectionSet[i].row === row) {}\n    }\n  }\n\n  getNumColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return this.props.data[0].length;\n  }\n\n  getNumRows() {\n    return this.props.data.length;\n  }\n\n  getProductUniqueID(index) {\n    for (let j = 0; j < this.props.data[index].length; j++) {\n      if (this.props.data[index][j].column === \"uniqueID\") {\n        return this.props.data[index][j].value;\n      }\n    }\n  }\n\n  mouseDownAction(row, cell) {\n    console.log(\"mouse down: \", row, \" \", cell);\n  }\n\n  mouseUpAction() {\n    console.log(\"mouse up\");\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.props.data.length; i++) {\n      for (let j = 0; j < this.props.data[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell checkbox-main\",\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"checkbox-unchecked\",\n              width: \"0.5rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell\",\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: \"edit-cell\",\n          tileLabel: this.props.data[i][j].value,\n          selectedAction: () => this.mouseDownAction(j, i),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }\n        }));\n        cells.push(cell);\n\n        if (j === this.props.data[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"nav-link\",\n            navPath: `/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`,\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  render() {\n    let gridItems = [];\n    let columnHeaders = [];\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      style: {\n        gridTemplateColumns: `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","DataGrid","Component","constructor","props","numCols","numRows","selectionSet","getNumColumns","getNumRows","manageSelection","row","cell","found","i","length","data","getProductUniqueID","index","j","column","value","mouseDownAction","console","log","mouseUpAction","getGridItems","cells","push","gridColumn","gridRow","zIndex","mainNav","render","gridItems","columnHeaders","constructedGrid","gridTemplateColumns","toString"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][]\n}\n\ninterface iSTATE {\n\n}\n\nexport type selectionObject = {\n    row : number;\n    cell : number;\n    selected : boolean;\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.numCols = this.getNumColumns();\n        this.numRows = this.getNumRows();\n    }\n\n    numCols : number;\n    numRows: number;\n    selectionSet : selectionObject[] = [];\n\n    manageSelection(row:number, cell:number){\n        let found : boolean = false;\n        for(let i=0; i < this.selectionSet.length; i++){\n            if( this.selectionSet[i].cell === cell && this.selectionSet[i].row === row ){\n                \n            }\n        }\n    }\n\n    getNumColumns(){\n        //TODO swap this out to calculating total normalized columns\n        return this.props.data[0].length;\n    }\n\n    getNumRows(){\n        return this.props.data.length;\n    }\n\n    getProductUniqueID(index : number){\n        for(let j=0; j < this.props.data[index].length; j++){\n            if(this.props.data[index][j].column === \"uniqueID\"){\n                return this.props.data[index][j].value;\n            }\n        }\n    }\n\n    mouseDownAction(row : number, cell:number){\n        console.log(\"mouse down: \", row, \" \",cell);\n    }\n\n    mouseUpAction(){\n        console.log(\"mouse up\");\n    }\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.props.data.length; i++){\n            for(let j=0; j < this.props.data[i].length; j++){\n                if(j === 0){\n                    cells.push(\n                        <div className=\"cell checkbox-main\" style={{gridColumn : j+1, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"checkbox-unchecked\"\n                                        width=\"0.5rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className=\"cell\" style={{gridColumn : j+2, gridRow : i+1 }}>\n                        <Tile\n                            tileType=\"edit-cell\"\n                            tileLabel={this.props.data[i][j].value}\n                            selectedAction={() => this.mouseDownAction(j,i)}\n                        />\n                    </div>\n                );\n\n                cells.push(cell);\n\n                if(j === this.props.data[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"nav-link\"\n                                navPath={`/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n            }\n        }\n\n\n\n        return cells;\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let gridItems : ReactElement[] = [];\n        let columnHeaders : ReactElement[]=[];\n\n        let constructedGrid : ReactElement = (\n            <>\n                <div className=\"data-grid\">\n                    <div className=\"viewport\" style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}>\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}