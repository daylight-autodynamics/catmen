{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx\";\nimport React from \"react\";\nimport { MainHeaderArea } from \"../_common/main-header-area/main-header-area\";\nimport { Navigation } from \"../../view-components/list-menu/intra-app-navigation\";\nimport { mainNavConfig } from \"../_catman-configuration/common-app-configuration\";\nimport { toolTipContent } from \"../tool-tip-content/content-tool-tips\";\nimport { TitleArea } from \"../../view-components/title-area/title-area\";\nimport { CardArea } from \"../../view-components/cards-area/card-area\";\nimport { Card } from \"../../view-components/card/card\";\nimport { dataManagerMain } from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport { SingleMediaDetailsView } from \"./media-details-view\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport { DataGrid } from \"../../view-components/data-grid/data-grid\";\nimport { TextInput } from \"../../view-components/text-input/text-input\";\nimport { DataGridWithEditDrawer } from \"../../view-components/data-grid/data-grid-with-edit-drawer\";\nexport class MediaLibraryView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectedMediaIndex = 0;\n    this.dataGridRef = React.createRef();\n    this.editDrawerRef = React.createRef();\n    this.drawerFirstOpen = false;\n    this.columnDefs = void 0;\n    this.initialized = false;\n    this.selectionSet = [];\n    this.drawerInputsLength = 0;\n\n    this.manageMediaDetailsPage = mediaIndex => {\n      console.log(\"mediaIndex\", mediaIndex);\n      this.selectedMediaIndex = mediaIndex;\n      this.setState({\n        mediaDetailsOpen: !this.state.mediaDetailsOpen\n      });\n    };\n\n    this.updateValues = (row, cell, value, colName) => {\n      if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n        this.selectionSet = this.dataGridRef.current.selectionSet;\n        console.log(\"cat details view selection set: \", this.selectionSet);\n      }\n\n      console.log(\"inside drawer\", value, \" col name:\", colName); //the minus 2 is the offset for the extra columns checkbox and edit\n\n      for (let i = 0; i < this.selectionSet.length; i++) {\n        if (this.selectionSet[i].columnName === colName) {\n          let myRow = this.selectionSet[i].row - 2;\n          let myCell = this.selectionSet[i].cell - 2; //this.workingDataSet[ myRow-2][myCell-2].value = value;\n\n          const updateSet = {\n            row: myRow,\n            cell: myCell,\n            newData: value\n          };\n          this.props.dataManager.setData(\"media-data\", updateSet);\n        }\n      }\n\n      this.setState({\n        workingData: this.props.dataManager.getProductData()\n      });\n      console.log(\"working data set:\", this.state.workingData);\n    };\n\n    this.inputFocusAction = (row, cell) => {\n      //console.log(\"row: \", row, \" cell:\", cell);\n      if (this.state.editDrawerOpen === true) {\n        this.setState({\n          focusedInput: {\n            row: row,\n            cell: cell,\n            editDrawerOpen: this.state.editDrawerOpen\n          }\n        });\n      }\n    };\n\n    this.columnDefs = this.props.columnsData;\n    this.state = {\n      mediaDetailsOpen: false,\n      viewMode: \"cards-view\",\n      editDrawerOpen: false,\n      //TODO need to adjust data manager\n      columnsData: this.props.columnsData,\n      workingData: this.props.gridData,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      },\n      footerOpen: false,\n      footerMode: \"default\",\n      editDrawerMaximized: false\n    };\n  }\n\n  manageViewModes(desiredState) {\n    this.setState({\n      viewMode: desiredState\n    });\n  }\n\n  getMediaDetailsView() {\n    if (this.state.mediaDetailsOpen === true) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SingleMediaDetailsView, {\n        mediaData: dataManagerMain.getMediaObjectData()[this.selectedMediaIndex],\n        closeSingleMediaView: () => this.manageMediaDetailsPage(0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getCardArea() {\n    if (this.state.mediaDetailsOpen === false) {\n      return /*#__PURE__*/React.createElement(CardArea, {\n        containerClasses: \"catman-media-cards\",\n        cards: /*#__PURE__*/React.createElement(Card, {\n          cardType: \"media\",\n          mediaData: dataManagerMain.getMediaObjectData(),\n          getDetailsFunctions: this.manageMediaDetailsPage,\n          actionToolTip: toolTipContent.mediaRelatedTooltips(\"media-details\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  getColumnLabel(colName) {\n    //utility method for getting column data obj from\n    let columnLabel = \"\";\n\n    for (let i = 0; i < this.columnDefs.length; i++) {\n      if (this.columnDefs[i].columnName === colName) {\n        columnLabel = this.columnDefs[i].columnLabel;\n      }\n    }\n\n    return columnLabel;\n  }\n\n  openEditDrawer() {\n    this.drawerFirstOpen = true;\n    this.setState({\n      editDrawerOpen: true\n    });\n  } //DRAWER RELATED\n\n\n  maximizeEditDrawer() {\n    this.setState({\n      editDrawerMaximized: !this.state.editDrawerMaximized\n    });\n  }\n\n  closeEditDrawer() {\n    this.setState({\n      editDrawerOpen: false,\n      editDrawerMaximized: false,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      }\n    });\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.dataGridRef.current.clearSelection();\n    }\n\n    this.drawerFirstOpen = false;\n  }\n\n  shiftFocus(shiftIndex) {\n    console.log(\"shifted focus: \", shiftIndex);\n    let inputs = document.getElementsByClassName(\"InputBox\");\n\n    if (inputs[0] != undefined) {\n      if (shiftIndex === inputs.length - 1) {\n        console.log(\"shifted focus on end\"); // @ts-ignore\n\n        inputs[0].focus(); // @ts-ignore\n\n        inputs[0].select();\n      }\n    }\n  }\n\n  getEditDrawer() {\n    if (this.state.editDrawerOpen === false) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.selectionSet = this.dataGridRef.current.selectionSet; // console.log(\"cat details view selection set: \", this.selectionSet)\n    }\n\n    let inputs = [];\n    let selectedItems = []; //Create list of selection items that need inputs (i.e. one input per column)\n\n    i: for (let i = 0; i < this.selectionSet.length; i++) {\n      j: for (let j = 0; j < selectedItems.length; j++) {\n        if (this.selectionSet[i].columnName === selectedItems[j].columnName) {\n          continue i;\n        }\n      }\n\n      let row = this.selectionSet[i].row;\n      let cell = this.selectionSet[i].cell; //TODO this needs to be genericized\n      //let productDataItem = catmanData.productData[row-2][cell-2];\n\n      let productDataItem = this.props.gridData[row - 2][cell - 2];\n      selectedItems.push(productDataItem);\n    } //Store number of inputs for later use\n\n\n    this.drawerInputsLength = selectedItems.length; //CREATE INPUTS for DRAWER\n\n    for (let i = 0; i < selectedItems.length; i++) {\n      let input = /*#__PURE__*/React.createElement(TextInput, {\n        row: this.selectionSet[i].row,\n        cell: this.selectionSet[i].cell,\n        columnName: this.selectionSet[i].columnName,\n        label: this.getColumnLabel(selectedItems[i].columnName),\n        currentValue: selectedItems[i].value,\n        onChangeAction: this.updateValues,\n        onFocusAction: this.inputFocusAction,\n        onBlurActions: [() => this.shiftFocus(i)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 17\n        }\n      });\n      inputs.push(input);\n    }\n\n    let maximize = valueCheck => {\n      if (valueCheck === true) {\n        return \"maximized\";\n      } else {\n        return \"catman-edit-default restored\";\n      }\n    };\n\n    let restoreAndMaximizeTooltip = valueCheck => {\n      if (valueCheck === false) {\n        return toolTipContent.maximizeDrawer();\n      } else {\n        return toolTipContent.restoreDrawer();\n      }\n    };\n\n    let restoreAndMaximizeBtnIcon = valueCheck => {\n      if (valueCheck === false) {\n        return \"icon-maximize\";\n      } else {\n        return \"icon-restore-btn\";\n      }\n    };\n\n    let drawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.state.editDrawerOpen === true) {\n      drawer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        ref: this.editDrawerRef,\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: `catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`,\n        animateIn: true,\n        heightIncludeUnits: \"\",\n        widthIncludeUnits: \"\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        toolBar: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tool-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.maximizeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: restoreAndMaximizeTooltip(this.state.editDrawerMaximized),\n        toolTipTimeOutInMS: 10000,\n        classes: \"tool-bar-btn icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: `${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`,\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.closeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: toolTipContent.closeDrawer(),\n        toolTipTimeOutInMS: 10000,\n        classes: \"icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: \"icon-close\",\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-edit-area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 25\n        }\n      }, inputs)));\n    }\n\n    return drawer;\n  } //MANAGE GRID\n  //GRID MANAGEMENT\n\n\n  conditionClasses() {\n    if (this.state.editDrawerOpen === true) {\n      return \"drawer-open\";\n    }\n  }\n\n  getGridArea() {\n    let bla = /*#__PURE__*/React.createElement(DataGrid, {\n      ref: this.dataGridRef,\n      data: this.state.workingData,\n      manageParentViews: () => this.openEditDrawer(),\n      selectionCallback: () => {},\n      columnsData: this.state.columnsData,\n      classes: this.conditionClasses(),\n      addAction: this.addAction,\n      focusedItem: this.state.focusedInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }\n    });\n    return /*#__PURE__*/React.createElement(DataGridWithEditDrawer, {\n      gridData: dataManagerMain.getMediaDataForGrid(),\n      columnsData: dataManagerMain.getMediaColumnsForGrid(),\n      dataManager: dataManagerMain,\n      targetDataSet: \"media-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 13\n      }\n    });\n  }\n\n  getContentArea() {\n    switch (this.state.viewMode) {\n      case \"grid-view\":\n        return this.getGridArea();\n\n      case \"cards-view\":\n        return this.getCardArea();\n    }\n  }\n\n  getToggleBar() {\n    //determine class\n    const selectedClass = stateName => {\n      if (stateName == this.state.viewMode) {\n        return \"active\";\n      } else {\n        return \"\";\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"grid-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"grid-view\")}`,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-list-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"cards-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"cards-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-card-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"mosaic-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"mosaic-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-mosaic-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MainHeaderArea, {\n      addItemAction: () => {},\n      sectionTitle: \"Media Library\",\n      mainButtonLabel: \"Add Media\",\n      navigationElement: /*#__PURE__*/React.createElement(Navigation, {\n        menuHelpStyle: \"panel\",\n        navElements: mainNavConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 40\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TitleArea, {\n      mainTitle: \"Media Library\",\n      subTitle: \"Manage media to describe your products\",\n      titleType: \"subtitle-above\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"view-switch-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 17\n      }\n    }, this.getToggleBar()), this.getEditDrawer(), this.getContentArea(), this.getMediaDetailsView());\n  }\n\n} // BACKUP\n//\n//\n// import React, {ReactElement} from \"react\";\n// import {MainHeaderArea} from \"../_common/main-header-area/main-header-area\";\n// import {Navigation} from \"../../view-components/list-menu/intra-app-navigation\";\n// import {mainNavConfig} from \"../_catman-configuration/common-app-configuration\";\n// import {toolTipContent} from \"../tool-tip-content/content-tool-tips\";\n// import {TitleArea} from \"../../view-components/title-area/title-area\";\n// import {CardArea} from \"../../view-components/cards-area/card-area\";\n// import {Card} from \"../../view-components/card/card\";\n// import {dataManagerMain} from \"../../index\";\n// import StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\n// import {SingleMediaDetailsView} from \"./media-details-view\";\n// import {CatmanIcon} from \"../../svg/icons/icons\";\n// import AppButton from \"../../view-components/button/app-button\";\n// import {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\n// import {iDataGridItem} from \"../../_catman-data-types\";\n// import {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\n// import {iColumn} from \"../../_sample-data/product-columns\";\n// import {focusInputType} from \"../catalog-views/catalog-details/catalog-details-view\";\n// import {TextInput} from \"../../view-components/text-input/text-input\";\n// import {dataSetType} from \"../../data-components/data-manager/data-manager\";\n//\n//\n// type viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n//\n//\n// interface iPROPS {\n//     message?: string;\n//     gridData : iDataGridItem[][];\n//     columnsData : iColumn[];\n//     dataManager : DataManager;\n//     targetDataSet : dataSetType;\n// }\n//\n// interface iSTATE{\n//     mediaDetailsOpen : boolean;\n//     viewMode : viewState;\n//     editDrawerOpen : boolean;\n//     workingData : iDataGridItem[][];\n//     columnsData : iColumn[];\n//     focusedInput : focusInputType;\n//     footerOpen : boolean;\n//     footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n//     editDrawerMaximized : boolean;\n// }\n//\n// export class MediaLibraryView extends React.Component<iPROPS, iSTATE>{\n//     constructor(props:iPROPS) {\n//         super(props);\n//         this.columnDefs = this.props.columnsData;\n//         this.state={\n//             mediaDetailsOpen : false,\n//             viewMode : \"cards-view\",\n//             editDrawerOpen : false,\n//             //TODO need to adjust data manager\n//             columnsData : this.props.columnsData,\n//             workingData : this.props.gridData,\n//             focusedInput : { row:0, cell:0, editDrawerOpen : false},\n//             footerOpen : false,\n//             footerMode : \"default\",\n//             editDrawerMaximized : false\n//         }\n//     }\n//     selectedMediaIndex : number = 0;\n//     dataGridRef = React.createRef<DataGrid>();\n//     editDrawerRef = React.createRef<StickyThing>();\n//     drawerFirstOpen : boolean = false;\n//     //COLUMN DEFINITIONS:\n//     columnDefs : iColumn[];\n//\n//     //just for the fist launch of checkbox editing\n//     initialized : boolean = false;\n//\n//     selectionSet : selectionObject[] = [];\n//     drawerInputsLength = 0;\n//\n//     manageMediaDetailsPage=(mediaIndex : number)=>{\n//         console.log(\"mediaIndex\", mediaIndex );\n//         this.selectedMediaIndex = mediaIndex;\n//         this.setState({mediaDetailsOpen : !this.state.mediaDetailsOpen})\n//     };\n//\n//     manageViewModes(desiredState : viewState){\n//         this.setState({viewMode : desiredState});\n//     }\n//\n//     getMediaDetailsView(){\n//         if(this.state.mediaDetailsOpen === true){\n//             return(\n//                 <StickyThing\n//                     enterFromThisSide=\"right\"\n//                     lastResortClasses={\"product-view\"}\n//                     animateIn={true}\n//                     heightIncludeUnits=\"100vh\"\n//                     widthIncludeUnits={\"100vw\"}\n//                     stickyOpen={true}\n//                     bgColor={\"#CECECE\"}\n//                     doAnimation={true}\n//                 >\n//                     <SingleMediaDetailsView\n//                         mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n//                         closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n//                     />\n//                 </StickyThing>\n//             )\n//         }\n//     }\n//\n//     getCardArea() {\n//         if (this.state.mediaDetailsOpen === false) {\n//             return (<CardArea\n//                 containerClasses=\"catman-media-cards\"\n//                 cards={\n//                     <Card\n//                         cardType=\"media\"\n//                         mediaData={dataManagerMain.getMediaObjectData()}\n//                         getDetailsFunctions={this.manageMediaDetailsPage}\n//                         actionToolTip={toolTipContent.mediaRelatedTooltips(\"media-details\")}\n//                     />\n//                 }\n//             />)\n//         } else {\n//             return (<></>)\n//         }\n//     }\n//\n//     getColumnLabel(colName : string) : string{\n//         //utility method for getting column data obj from\n//         let columnLabel = \"\";\n//         for(let i = 0; i < this.columnDefs.length; i++){\n//             if(this.columnDefs[i].columnName === colName){\n//                 columnLabel = this.columnDefs[i].columnLabel;\n//             }\n//         }\n//         return columnLabel;\n//     }\n//\n//     updateValues=(row : number, cell:number, value:string, colName : string)=>{\n//         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n//             this.selectionSet = this.dataGridRef.current.selectionSet;\n//             console.log(\"cat details view selection set: \", this.selectionSet)\n//         }\n//         console.log(\"inside drawer\", value, \" col name:\", colName);\n//         //the minus 2 is the offset for the extra columns checkbox and edit\n//         for(let i =0; i < this.selectionSet.length; i++){\n//             if(this.selectionSet[i].columnName === colName){\n//                 let myRow = this.selectionSet[i].row-2;\n//                 let myCell = this.selectionSet[i].cell-2;\n//\n//                 //this.workingDataSet[ myRow-2][myCell-2].value = value;\n//                 const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n//                 this.props.dataManager.setData(\"media-data\", updateSet);\n//             }\n//         }\n//\n//         this.setState({workingData : this.props.dataManager.getProductData()});\n//         console.log( \"working data set:\", this.state.workingData );\n//     };\n//\n//     openEditDrawer( ){\n//         this.drawerFirstOpen = true;\n//         this.setState({editDrawerOpen : true});\n//     }\n//\n//     //DRAWER RELATED\n//     maximizeEditDrawer(){\n//         this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n//     }\n//\n//     closeEditDrawer(){\n//         this.setState({\n//             editDrawerOpen : false,\n//             editDrawerMaximized : false,\n//             focusedInput : {row:0, cell:0, editDrawerOpen:false}\n//         });\n//         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n//             this.dataGridRef.current.clearSelection();\n//         }\n//         this.drawerFirstOpen = false;\n//     }\n//\n//     shiftFocus(shiftIndex: number){\n//\n//         console.log(\"shifted focus: \", shiftIndex);\n//         let inputs: HTMLCollection = document.getElementsByClassName(\"InputBox\");\n//         if(inputs[0] != undefined){\n//             if(shiftIndex === inputs.length-1){\n//                 console.log(\"shifted focus on end\");\n//                 // @ts-ignore\n//                 inputs[0].focus();\n//                 // @ts-ignore\n//                 inputs[0].select();\n//             }\n//         }\n//     };\n//\n//     inputFocusAction=(row : number, cell:number)=>{\n//         //console.log(\"row: \", row, \" cell:\", cell);\n//         if(this.state.editDrawerOpen === true){\n//             this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n//         }\n//     };\n//\n//     getEditDrawer():ReactElement{\n//\n//         if(this.state.editDrawerOpen === false){\n//             return(<></>);\n//         }\n//\n//         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n//             this.selectionSet = this.dataGridRef.current.selectionSet;\n//             // console.log(\"cat details view selection set: \", this.selectionSet)\n//         }\n//\n//         let inputs : ReactElement[] = [];\n//         let selectedItems : iDataGridItem[] = [];\n//\n//         //Create list of selection items that need inputs (i.e. one input per column)\n//         i: for(let i=0; i < this.selectionSet.length; i++){\n//             j: for(let j=0; j < selectedItems.length; j++){\n//                 if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n//                     continue i;\n//                 }\n//             }\n//             let row = this.selectionSet[i].row;\n//             let cell = this.selectionSet[i].cell;\n//             //TODO this needs to be genericized\n//             //let productDataItem = catmanData.productData[row-2][cell-2];\n//             let productDataItem = this.props.gridData[row-2][cell-2];\n//             selectedItems.push(productDataItem);\n//         }\n//\n//         //Store number of inputs for later use\n//         this.drawerInputsLength = selectedItems.length;\n//\n//         //CREATE INPUTS for DRAWER\n//         for( let i=0; i < selectedItems.length; i++){\n//             let input = (\n//                 <TextInput\n//                     row={this.selectionSet[i].row}\n//                     cell={this.selectionSet[i].cell}\n//                     columnName={this.selectionSet[i].columnName}\n//                     label={this.getColumnLabel( selectedItems[i].columnName )}\n//                     currentValue={ selectedItems[i].value}\n//                     onChangeAction={this.updateValues}\n//                     onFocusAction={this.inputFocusAction}\n//                     onBlurActions={[ ()=>this.shiftFocus(i) ]}\n//                 />\n//             );\n//             inputs.push(input)\n//         }\n//\n//         let maximize = (valueCheck : boolean)=>{\n//             if(valueCheck === true){\n//                 return \"maximized\"\n//             }else{\n//                 return \"catman-edit-default restored\"\n//             }\n//         };\n//\n//         let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n//             if(valueCheck === false){\n//                 return toolTipContent.maximizeDrawer();\n//             }else{\n//                 return toolTipContent.restoreDrawer();\n//             }\n//         };\n//\n//         let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n//             if(valueCheck === false){\n//                 return \"icon-maximize\"\n//             }else{\n//                 return \"icon-restore-btn\"\n//             }\n//         }\n//\n//\n//         let drawer = (<></>);\n//         if(this.state.editDrawerOpen === true){\n//             drawer = (\n//                 <>\n//                     <StickyThing\n//                         ref = {this.editDrawerRef}\n//                         enterFromThisSide=\"bottom\"\n//                         lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n//                         animateIn={true}\n//                         heightIncludeUnits=\"\"\n//                         widthIncludeUnits={\"\"}\n//                         stickyOpen={true}\n//                         bgColor={\"#CECECE\"}\n//                         doAnimation={true}\n//                         toolBar=\"none\"\n//                     >\n//                         <div className={\"tool-bar\"}>\n//                             <div></div>\n//                             <div className=\"drawer-controls\">\n//                                 <AppButton\n//                                     buttonType={\"secondary-action\"}\n//                                     buttonLabel=\"\"\n//                                     OnClick={()=>this.maximizeEditDrawer()}\n//                                     tooltipType=\"custom\"\n//                                     tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n//                                     toolTipTimeOutInMS={10000}\n//                                     classes=\"tool-bar-btn icon-only-btn\"\n//                                     iconLeft={\n//                                         <CatmanIcon\n//                                             iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n//                                             classes=\" \"\n//                                             height=\"100%\"\n//                                             width=\"100%\"\n//                                         />\n//                                     }\n//                                 />\n//                                 <AppButton\n//                                     buttonType={\"secondary-action\"}\n//                                     buttonLabel=\"\"\n//                                     OnClick={()=>this.closeEditDrawer()}\n//                                     tooltipType=\"custom\"\n//                                     tooltip={toolTipContent.closeDrawer()}\n//                                     toolTipTimeOutInMS={10000}\n//                                     classes=\"icon-only-btn\"\n//                                     iconLeft={\n//                                         <CatmanIcon\n//                                             iconName=\"icon-close\"\n//                                             classes=\" \"\n//                                             height=\"100%\"\n//                                             width=\"100%\"\n//                                         />\n//                                     }\n//                                 />\n//\n//                             </div>\n//                         </div>\n//\n//                         <div className=\"drawer-edit-area\">\n//                             {inputs}\n//                         </div>\n//                     </StickyThing>\n//                 </>\n//             );\n//         }\n//         return drawer;\n//     }\n//\n//     //MANAGE GRID\n//     //GRID MANAGEMENT\n//     manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )=>{\n//         if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n//             if(checkBoxSelections.length <= 1){\n//                 this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n//             }else if(checkBoxSelections.length > 1 ){\n//                 this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n//             }\n//             this.initialized = true;\n//         }else{\n//             this.setState({footerOpen : false});\n//         }\n//\n//     };\n//     conditionClasses(){\n//         if(this.state.editDrawerOpen === true){\n//             return \"drawer-open\";\n//         }\n//     }\n//     addAction(addType:string){\n//         console.log(\"added item or items: \", addType );\n//         switch (addType) {\n//             case \"add-attribute\":\n//\n//                 return(<></>);\n//             case \"add-products\":\n//\n//                 return(<></>);\n//\n//\n//\n//         }\n//     }\n//\n//     getGridArea(){\n//         return (\n//             <DataGrid\n//                 ref={this.dataGridRef}\n//                 data={this.state.workingData}\n//                 manageParentViews={()=>this.openEditDrawer()}\n//                 selectionCallback={this.manageSelectionSet}\n//                 columnsData={this.state.columnsData}\n//                 classes={this.conditionClasses()}\n//                 addAction={this.addAction}\n//                 focusedItem={this.state.focusedInput}\n//             />\n//         )\n//     }\n//\n//     getContentArea(){\n//         switch (this.state.viewMode) {\n//             case \"grid-view\":\n//                 return this.getGridArea();\n//             case \"cards-view\":\n//                 return this.getCardArea();\n//         }\n//     }\n//\n//     getToggleBar(){\n//\n//         //determine class\n//         const selectedClass = (stateName : viewState)=>{\n//             if(stateName == this.state.viewMode)\n//             {\n//                 return \"active\";\n//             }\n//             else\n//             {\n//                 return \"\";\n//             }\n//         };\n//\n//         return(\n//             <div className=\"button-bar\">\n//                 <AppButton\n//                     OnClick={()=>this.manageViewModes(\"grid-view\")}\n//                     buttonType=\"transparent-bg\"\n//                     tooltipType=\"custom\"\n//                     tooltip={toolTipContent.goBackWizard()}\n//                     classes={`${selectedClass(\"grid-view\")}`}\n//                     iconCenter={(\n//                         <CatmanIcon\n//                             iconName={`icon-list-view`}\n//                             width=\"1rem\"\n//                             height=\"100%\"\n//                         />\n//                     )}\n//                 />\n//                 <AppButton\n//                     OnClick={()=>this.manageViewModes(\"cards-view\")}\n//                     buttonType=\"transparent-bg\"\n//                     tooltipType=\"custom\"\n//                     tooltip={toolTipContent.goBackWizard()}\n//                     classes={`${selectedClass(\"cards-view\")} `}\n//                     iconCenter={(\n//                         <CatmanIcon\n//                             iconName={`icon-card-view`}\n//                             width=\"1rem\"\n//                             height=\"100%\"\n//                         />\n//                     )}\n//                 />\n//                 <AppButton\n//                     OnClick={()=>this.manageViewModes(\"mosaic-view\")}\n//                     buttonType=\"transparent-bg\"\n//                     tooltipType=\"custom\"\n//                     tooltip={ toolTipContent.goBackWizard()}\n//                     classes={`${selectedClass(\"mosaic-view\")} `}\n//                     iconCenter={(\n//                         <CatmanIcon\n//                             iconName={`icon-mosaic-view`}\n//                             width=\"1rem\"\n//                             height=\"100%\"\n//                         />\n//                     )}\n//                 />\n//             </div>\n//         )\n//     }\n//\n//     render(){\n//         return(\n//             <>\n//                 <MainHeaderArea\n//                     addItemAction={()=>{}}\n//                     sectionTitle=\"Media Library\"\n//                     mainButtonLabel=\"Add Media\"\n//                     navigationElement={<Navigation menuHelpStyle=\"panel\" navElements={mainNavConfig} />}\n//                 />\n//                 <TitleArea\n//                     mainTitle=\"Media Library\"\n//                     subTitle=\"Manage media to describe your products\"\n//                     titleType=\"subtitle-above\"\n//                 />\n//                 <div className=\"view-switch-container\">{this.getToggleBar()}</div>\n//                 {this.getEditDrawer()}\n//                 {this.getContentArea()}\n//                 {this.getMediaDetailsView()}\n//             </>\n//         );\n//     }\n// }","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx"],"names":["React","MainHeaderArea","Navigation","mainNavConfig","toolTipContent","TitleArea","CardArea","Card","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGrid","TextInput","DataGridWithEditDrawer","MediaLibraryView","Component","constructor","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","drawerFirstOpen","columnDefs","initialized","selectionSet","drawerInputsLength","manageMediaDetailsPage","mediaIndex","console","log","setState","mediaDetailsOpen","state","updateValues","row","cell","value","colName","current","undefined","i","length","columnName","myRow","myCell","updateSet","newData","dataManager","setData","workingData","getProductData","inputFocusAction","editDrawerOpen","focusedInput","columnsData","viewMode","gridData","footerOpen","footerMode","editDrawerMaximized","manageViewModes","desiredState","getMediaDetailsView","getMediaObjectData","getCardArea","mediaRelatedTooltips","getColumnLabel","columnLabel","openEditDrawer","maximizeEditDrawer","closeEditDrawer","clearSelection","shiftFocus","shiftIndex","inputs","document","getElementsByClassName","focus","select","getEditDrawer","selectedItems","j","productDataItem","push","input","maximize","valueCheck","restoreAndMaximizeTooltip","maximizeDrawer","restoreDrawer","restoreAndMaximizeBtnIcon","drawer","closeDrawer","conditionClasses","getGridArea","bla","addAction","getMediaDataForGrid","getMediaColumnsForGrid","getContentArea","getToggleBar","selectedClass","stateName","goBackWizard","render"],"mappings":"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":["import React, {ReactElement} from \"react\";\nimport {MainHeaderArea} from \"../_common/main-header-area/main-header-area\";\nimport {Navigation} from \"../../view-components/list-menu/intra-app-navigation\";\nimport {mainNavConfig} from \"../_catman-configuration/common-app-configuration\";\nimport {toolTipContent} from \"../tool-tip-content/content-tool-tips\";\nimport {TitleArea} from \"../../view-components/title-area/title-area\";\nimport {CardArea} from \"../../view-components/cards-area/card-area\";\nimport {Card} from \"../../view-components/card/card\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"./media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../_catman-data-types\";\nimport {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\nimport {iColumn} from \"../../_sample-data/product-columns\";\nimport {focusInputType} from \"../catalog-views/catalog-details/catalog-details-view\";\nimport {TextInput} from \"../../view-components/text-input/text-input\";\nimport {dataSetType} from \"../../data-components/data-manager/data-manager\";\nimport {dataAttributeColumns} from \"../../_sample-data/attributes-data-and-columns\";\nimport {DataGridWithEditDrawer} from \"../../view-components/data-grid/data-grid-with-edit-drawer\";\n\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\n\ninterface iPROPS {\n    message?: string;\n    gridData : iDataGridItem[][];\n    columnsData : iColumn[];\n    dataManager : DataManager;\n    targetDataSet : dataSetType;\n}\n\ninterface iSTATE{\n    mediaDetailsOpen : boolean;\n    viewMode : viewState;\n    editDrawerOpen : boolean;\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n    focusedInput : focusInputType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    editDrawerMaximized : boolean;\n}\n\nexport class MediaLibraryView extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.columnDefs = this.props.columnsData;\n        this.state={\n            mediaDetailsOpen : false,\n            viewMode : \"cards-view\",\n            editDrawerOpen : false,\n            //TODO need to adjust data manager\n            columnsData : this.props.columnsData,\n            workingData : this.props.gridData,\n            focusedInput : { row:0, cell:0, editDrawerOpen : false},\n            footerOpen : false,\n            footerMode : \"default\",\n            editDrawerMaximized : false\n        }\n    }\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n    drawerFirstOpen : boolean = false;\n    //COLUMN DEFINITIONS:\n    columnDefs : iColumn[];\n\n    //just for the fist launch of checkbox editing\n    initialized : boolean = false;\n\n    selectionSet : selectionObject[] = [];\n    drawerInputsLength = 0;\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        console.log(\"mediaIndex\", mediaIndex );\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({mediaDetailsOpen : !this.state.mediaDetailsOpen})\n    };\n\n    manageViewModes(desiredState : viewState){\n        this.setState({viewMode : desiredState});\n    }\n\n    getMediaDetailsView(){\n        if(this.state.mediaDetailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n    getCardArea() {\n        if (this.state.mediaDetailsOpen === false) {\n            return (<CardArea\n                containerClasses=\"catman-media-cards\"\n                cards={\n                    <Card\n                        cardType=\"media\"\n                        mediaData={dataManagerMain.getMediaObjectData()}\n                        getDetailsFunctions={this.manageMediaDetailsPage}\n                        actionToolTip={toolTipContent.mediaRelatedTooltips(\"media-details\")}\n                    />\n                }\n            />)\n        } else {\n            return (<></>)\n        }\n    }\n\n    getColumnLabel(colName : string) : string{\n        //utility method for getting column data obj from\n        let columnLabel = \"\";\n        for(let i = 0; i < this.columnDefs.length; i++){\n            if(this.columnDefs[i].columnName === colName){\n                columnLabel = this.columnDefs[i].columnLabel;\n            }\n        }\n        return columnLabel;\n    }\n\n    updateValues=(row : number, cell:number, value:string, colName : string)=>{\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n            console.log(\"cat details view selection set: \", this.selectionSet)\n        }\n        console.log(\"inside drawer\", value, \" col name:\", colName);\n        //the minus 2 is the offset for the extra columns checkbox and edit\n        for(let i =0; i < this.selectionSet.length; i++){\n            if(this.selectionSet[i].columnName === colName){\n                let myRow = this.selectionSet[i].row-2;\n                let myCell = this.selectionSet[i].cell-2;\n\n                //this.workingDataSet[ myRow-2][myCell-2].value = value;\n                const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n                this.props.dataManager.setData(\"media-data\", updateSet);\n            }\n        }\n\n        this.setState({workingData : this.props.dataManager.getProductData()});\n        console.log( \"working data set:\", this.state.workingData );\n    };\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n\n    //DRAWER RELATED\n    maximizeEditDrawer(){\n        this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n    }\n\n    closeEditDrawer(){\n        this.setState({\n            editDrawerOpen : false,\n            editDrawerMaximized : false,\n            focusedInput : {row:0, cell:0, editDrawerOpen:false}\n        });\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n        this.drawerFirstOpen = false;\n    }\n\n    shiftFocus(shiftIndex: number){\n\n        console.log(\"shifted focus: \", shiftIndex);\n        let inputs: HTMLCollection = document.getElementsByClassName(\"InputBox\");\n        if(inputs[0] != undefined){\n            if(shiftIndex === inputs.length-1){\n                console.log(\"shifted focus on end\");\n                // @ts-ignore\n                inputs[0].focus();\n                // @ts-ignore\n                inputs[0].select();\n            }\n        }\n    };\n\n    inputFocusAction=(row : number, cell:number)=>{\n        //console.log(\"row: \", row, \" cell:\", cell);\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n        }\n    };\n\n    getEditDrawer():ReactElement{\n\n        if(this.state.editDrawerOpen === false){\n            return(<></>);\n        }\n\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n            // console.log(\"cat details view selection set: \", this.selectionSet)\n        }\n\n        let inputs : ReactElement[] = [];\n        let selectedItems : iDataGridItem[] = [];\n\n        //Create list of selection items that need inputs (i.e. one input per column)\n        i: for(let i=0; i < this.selectionSet.length; i++){\n            j: for(let j=0; j < selectedItems.length; j++){\n                if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n                    continue i;\n                }\n            }\n            let row = this.selectionSet[i].row;\n            let cell = this.selectionSet[i].cell;\n            //TODO this needs to be genericized\n            //let productDataItem = catmanData.productData[row-2][cell-2];\n            let productDataItem = this.props.gridData[row-2][cell-2];\n            selectedItems.push(productDataItem);\n        }\n\n        //Store number of inputs for later use\n        this.drawerInputsLength = selectedItems.length;\n\n        //CREATE INPUTS for DRAWER\n        for( let i=0; i < selectedItems.length; i++){\n            let input = (\n                <TextInput\n                    row={this.selectionSet[i].row}\n                    cell={this.selectionSet[i].cell}\n                    columnName={this.selectionSet[i].columnName}\n                    label={this.getColumnLabel( selectedItems[i].columnName )}\n                    currentValue={ selectedItems[i].value}\n                    onChangeAction={this.updateValues}\n                    onFocusAction={this.inputFocusAction}\n                    onBlurActions={[ ()=>this.shiftFocus(i) ]}\n                />\n            );\n            inputs.push(input)\n        }\n\n        let maximize = (valueCheck : boolean)=>{\n            if(valueCheck === true){\n                return \"maximized\"\n            }else{\n                return \"catman-edit-default restored\"\n            }\n        };\n\n        let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return toolTipContent.maximizeDrawer();\n            }else{\n                return toolTipContent.restoreDrawer();\n            }\n        };\n\n        let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return \"icon-maximize\"\n            }else{\n                return \"icon-restore-btn\"\n            }\n        }\n\n\n        let drawer = (<></>);\n        if(this.state.editDrawerOpen === true){\n            drawer = (\n                <>\n                    <StickyThing\n                        ref = {this.editDrawerRef}\n                        enterFromThisSide=\"bottom\"\n                        lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n                        animateIn={true}\n                        heightIncludeUnits=\"\"\n                        widthIncludeUnits={\"\"}\n                        stickyOpen={true}\n                        bgColor={\"#CECECE\"}\n                        doAnimation={true}\n                        toolBar=\"none\"\n                    >\n                        <div className={\"tool-bar\"}>\n                            <div></div>\n                            <div className=\"drawer-controls\">\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.maximizeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"tool-bar-btn icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.closeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={toolTipContent.closeDrawer()}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName=\"icon-close\"\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n\n                            </div>\n                        </div>\n\n                        <div className=\"drawer-edit-area\">\n                            {inputs}\n                        </div>\n                    </StickyThing>\n                </>\n            );\n        }\n        return drawer;\n    }\n\n    //MANAGE GRID\n    //GRID MANAGEMENT\n\n    conditionClasses(){\n        if(this.state.editDrawerOpen === true){\n            return \"drawer-open\";\n        }\n    }\n\n\n    getGridArea(){\n        let bla = (\n            <DataGrid\n                ref={this.dataGridRef}\n                data={this.state.workingData}\n                manageParentViews={()=>this.openEditDrawer()}\n                selectionCallback={()=>{}}\n                columnsData={this.state.columnsData}\n                classes={this.conditionClasses()}\n                addAction={this.addAction}\n                focusedItem={this.state.focusedInput}\n            />\n        );\n\n        return(\n            <DataGridWithEditDrawer\n                gridData={dataManagerMain.getMediaDataForGrid()}\n                columnsData={dataManagerMain.getMediaColumnsForGrid()}\n                dataManager={dataManagerMain}\n                targetDataSet={ \"media-data\"}\n            />\n\n        );\n    }\n\n    getContentArea(){\n        switch (this.state.viewMode) {\n            case \"grid-view\":\n                return this.getGridArea();\n            case \"cards-view\":\n                return this.getCardArea();\n        }\n    }\n\n    getToggleBar(){\n\n        //determine class\n        const selectedClass = (stateName : viewState)=>{\n          if(stateName == this.state.viewMode)\n          {\n              return \"active\";\n          }\n          else\n          {\n              return \"\";\n          }\n        };\n\n        return(\n            <div className=\"button-bar\">\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"grid-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"grid-view\")}`}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-list-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"cards-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"cards-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-card-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"mosaic-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={ toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"mosaic-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-mosaic-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <>\n                <MainHeaderArea\n                    addItemAction={()=>{}}\n                    sectionTitle=\"Media Library\"\n                    mainButtonLabel=\"Add Media\"\n                    navigationElement={<Navigation menuHelpStyle=\"panel\" navElements={mainNavConfig} />}\n                />\n                <TitleArea\n                    mainTitle=\"Media Library\"\n                    subTitle=\"Manage media to describe your products\"\n                    titleType=\"subtitle-above\"\n                />\n                <div className=\"view-switch-container\">{this.getToggleBar()}</div>\n                {this.getEditDrawer()}\n                {this.getContentArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}\n\n\n\n// BACKUP\n\n//\n//\n// import React, {ReactElement} from \"react\";\n// import {MainHeaderArea} from \"../_common/main-header-area/main-header-area\";\n// import {Navigation} from \"../../view-components/list-menu/intra-app-navigation\";\n// import {mainNavConfig} from \"../_catman-configuration/common-app-configuration\";\n// import {toolTipContent} from \"../tool-tip-content/content-tool-tips\";\n// import {TitleArea} from \"../../view-components/title-area/title-area\";\n// import {CardArea} from \"../../view-components/cards-area/card-area\";\n// import {Card} from \"../../view-components/card/card\";\n// import {dataManagerMain} from \"../../index\";\n// import StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\n// import {SingleMediaDetailsView} from \"./media-details-view\";\n// import {CatmanIcon} from \"../../svg/icons/icons\";\n// import AppButton from \"../../view-components/button/app-button\";\n// import {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\n// import {iDataGridItem} from \"../../_catman-data-types\";\n// import {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\n// import {iColumn} from \"../../_sample-data/product-columns\";\n// import {focusInputType} from \"../catalog-views/catalog-details/catalog-details-view\";\n// import {TextInput} from \"../../view-components/text-input/text-input\";\n// import {dataSetType} from \"../../data-components/data-manager/data-manager\";\n//\n//\n// type viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n//\n//\n// interface iPROPS {\n//     message?: string;\n//     gridData : iDataGridItem[][];\n//     columnsData : iColumn[];\n//     dataManager : DataManager;\n//     targetDataSet : dataSetType;\n// }\n//\n// interface iSTATE{\n//     mediaDetailsOpen : boolean;\n//     viewMode : viewState;\n//     editDrawerOpen : boolean;\n//     workingData : iDataGridItem[][];\n//     columnsData : iColumn[];\n//     focusedInput : focusInputType;\n//     footerOpen : boolean;\n//     footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n//     editDrawerMaximized : boolean;\n// }\n//\n// export class MediaLibraryView extends React.Component<iPROPS, iSTATE>{\n//     constructor(props:iPROPS) {\n//         super(props);\n//         this.columnDefs = this.props.columnsData;\n//         this.state={\n//             mediaDetailsOpen : false,\n//             viewMode : \"cards-view\",\n//             editDrawerOpen : false,\n//             //TODO need to adjust data manager\n//             columnsData : this.props.columnsData,\n//             workingData : this.props.gridData,\n//             focusedInput : { row:0, cell:0, editDrawerOpen : false},\n//             footerOpen : false,\n//             footerMode : \"default\",\n//             editDrawerMaximized : false\n//         }\n//     }\n//     selectedMediaIndex : number = 0;\n//     dataGridRef = React.createRef<DataGrid>();\n//     editDrawerRef = React.createRef<StickyThing>();\n//     drawerFirstOpen : boolean = false;\n//     //COLUMN DEFINITIONS:\n//     columnDefs : iColumn[];\n//\n//     //just for the fist launch of checkbox editing\n//     initialized : boolean = false;\n//\n//     selectionSet : selectionObject[] = [];\n//     drawerInputsLength = 0;\n//\n//     manageMediaDetailsPage=(mediaIndex : number)=>{\n//         console.log(\"mediaIndex\", mediaIndex );\n//         this.selectedMediaIndex = mediaIndex;\n//         this.setState({mediaDetailsOpen : !this.state.mediaDetailsOpen})\n//     };\n//\n//     manageViewModes(desiredState : viewState){\n//         this.setState({viewMode : desiredState});\n//     }\n//\n//     getMediaDetailsView(){\n//         if(this.state.mediaDetailsOpen === true){\n//             return(\n//                 <StickyThing\n//                     enterFromThisSide=\"right\"\n//                     lastResortClasses={\"product-view\"}\n//                     animateIn={true}\n//                     heightIncludeUnits=\"100vh\"\n//                     widthIncludeUnits={\"100vw\"}\n//                     stickyOpen={true}\n//                     bgColor={\"#CECECE\"}\n//                     doAnimation={true}\n//                 >\n//                     <SingleMediaDetailsView\n//                         mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n//                         closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n//                     />\n//                 </StickyThing>\n//             )\n//         }\n//     }\n//\n//     getCardArea() {\n//         if (this.state.mediaDetailsOpen === false) {\n//             return (<CardArea\n//                 containerClasses=\"catman-media-cards\"\n//                 cards={\n//                     <Card\n//                         cardType=\"media\"\n//                         mediaData={dataManagerMain.getMediaObjectData()}\n//                         getDetailsFunctions={this.manageMediaDetailsPage}\n//                         actionToolTip={toolTipContent.mediaRelatedTooltips(\"media-details\")}\n//                     />\n//                 }\n//             />)\n//         } else {\n//             return (<></>)\n//         }\n//     }\n//\n//     getColumnLabel(colName : string) : string{\n//         //utility method for getting column data obj from\n//         let columnLabel = \"\";\n//         for(let i = 0; i < this.columnDefs.length; i++){\n//             if(this.columnDefs[i].columnName === colName){\n//                 columnLabel = this.columnDefs[i].columnLabel;\n//             }\n//         }\n//         return columnLabel;\n//     }\n//\n//     updateValues=(row : number, cell:number, value:string, colName : string)=>{\n//         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n//             this.selectionSet = this.dataGridRef.current.selectionSet;\n//             console.log(\"cat details view selection set: \", this.selectionSet)\n//         }\n//         console.log(\"inside drawer\", value, \" col name:\", colName);\n//         //the minus 2 is the offset for the extra columns checkbox and edit\n//         for(let i =0; i < this.selectionSet.length; i++){\n//             if(this.selectionSet[i].columnName === colName){\n//                 let myRow = this.selectionSet[i].row-2;\n//                 let myCell = this.selectionSet[i].cell-2;\n//\n//                 //this.workingDataSet[ myRow-2][myCell-2].value = value;\n//                 const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n//                 this.props.dataManager.setData(\"media-data\", updateSet);\n//             }\n//         }\n//\n//         this.setState({workingData : this.props.dataManager.getProductData()});\n//         console.log( \"working data set:\", this.state.workingData );\n//     };\n//\n//     openEditDrawer( ){\n//         this.drawerFirstOpen = true;\n//         this.setState({editDrawerOpen : true});\n//     }\n//\n//     //DRAWER RELATED\n//     maximizeEditDrawer(){\n//         this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n//     }\n//\n//     closeEditDrawer(){\n//         this.setState({\n//             editDrawerOpen : false,\n//             editDrawerMaximized : false,\n//             focusedInput : {row:0, cell:0, editDrawerOpen:false}\n//         });\n//         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n//             this.dataGridRef.current.clearSelection();\n//         }\n//         this.drawerFirstOpen = false;\n//     }\n//\n//     shiftFocus(shiftIndex: number){\n//\n//         console.log(\"shifted focus: \", shiftIndex);\n//         let inputs: HTMLCollection = document.getElementsByClassName(\"InputBox\");\n//         if(inputs[0] != undefined){\n//             if(shiftIndex === inputs.length-1){\n//                 console.log(\"shifted focus on end\");\n//                 // @ts-ignore\n//                 inputs[0].focus();\n//                 // @ts-ignore\n//                 inputs[0].select();\n//             }\n//         }\n//     };\n//\n//     inputFocusAction=(row : number, cell:number)=>{\n//         //console.log(\"row: \", row, \" cell:\", cell);\n//         if(this.state.editDrawerOpen === true){\n//             this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n//         }\n//     };\n//\n//     getEditDrawer():ReactElement{\n//\n//         if(this.state.editDrawerOpen === false){\n//             return(<></>);\n//         }\n//\n//         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n//             this.selectionSet = this.dataGridRef.current.selectionSet;\n//             // console.log(\"cat details view selection set: \", this.selectionSet)\n//         }\n//\n//         let inputs : ReactElement[] = [];\n//         let selectedItems : iDataGridItem[] = [];\n//\n//         //Create list of selection items that need inputs (i.e. one input per column)\n//         i: for(let i=0; i < this.selectionSet.length; i++){\n//             j: for(let j=0; j < selectedItems.length; j++){\n//                 if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n//                     continue i;\n//                 }\n//             }\n//             let row = this.selectionSet[i].row;\n//             let cell = this.selectionSet[i].cell;\n//             //TODO this needs to be genericized\n//             //let productDataItem = catmanData.productData[row-2][cell-2];\n//             let productDataItem = this.props.gridData[row-2][cell-2];\n//             selectedItems.push(productDataItem);\n//         }\n//\n//         //Store number of inputs for later use\n//         this.drawerInputsLength = selectedItems.length;\n//\n//         //CREATE INPUTS for DRAWER\n//         for( let i=0; i < selectedItems.length; i++){\n//             let input = (\n//                 <TextInput\n//                     row={this.selectionSet[i].row}\n//                     cell={this.selectionSet[i].cell}\n//                     columnName={this.selectionSet[i].columnName}\n//                     label={this.getColumnLabel( selectedItems[i].columnName )}\n//                     currentValue={ selectedItems[i].value}\n//                     onChangeAction={this.updateValues}\n//                     onFocusAction={this.inputFocusAction}\n//                     onBlurActions={[ ()=>this.shiftFocus(i) ]}\n//                 />\n//             );\n//             inputs.push(input)\n//         }\n//\n//         let maximize = (valueCheck : boolean)=>{\n//             if(valueCheck === true){\n//                 return \"maximized\"\n//             }else{\n//                 return \"catman-edit-default restored\"\n//             }\n//         };\n//\n//         let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n//             if(valueCheck === false){\n//                 return toolTipContent.maximizeDrawer();\n//             }else{\n//                 return toolTipContent.restoreDrawer();\n//             }\n//         };\n//\n//         let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n//             if(valueCheck === false){\n//                 return \"icon-maximize\"\n//             }else{\n//                 return \"icon-restore-btn\"\n//             }\n//         }\n//\n//\n//         let drawer = (<></>);\n//         if(this.state.editDrawerOpen === true){\n//             drawer = (\n//                 <>\n//                     <StickyThing\n//                         ref = {this.editDrawerRef}\n//                         enterFromThisSide=\"bottom\"\n//                         lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n//                         animateIn={true}\n//                         heightIncludeUnits=\"\"\n//                         widthIncludeUnits={\"\"}\n//                         stickyOpen={true}\n//                         bgColor={\"#CECECE\"}\n//                         doAnimation={true}\n//                         toolBar=\"none\"\n//                     >\n//                         <div className={\"tool-bar\"}>\n//                             <div></div>\n//                             <div className=\"drawer-controls\">\n//                                 <AppButton\n//                                     buttonType={\"secondary-action\"}\n//                                     buttonLabel=\"\"\n//                                     OnClick={()=>this.maximizeEditDrawer()}\n//                                     tooltipType=\"custom\"\n//                                     tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n//                                     toolTipTimeOutInMS={10000}\n//                                     classes=\"tool-bar-btn icon-only-btn\"\n//                                     iconLeft={\n//                                         <CatmanIcon\n//                                             iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n//                                             classes=\" \"\n//                                             height=\"100%\"\n//                                             width=\"100%\"\n//                                         />\n//                                     }\n//                                 />\n//                                 <AppButton\n//                                     buttonType={\"secondary-action\"}\n//                                     buttonLabel=\"\"\n//                                     OnClick={()=>this.closeEditDrawer()}\n//                                     tooltipType=\"custom\"\n//                                     tooltip={toolTipContent.closeDrawer()}\n//                                     toolTipTimeOutInMS={10000}\n//                                     classes=\"icon-only-btn\"\n//                                     iconLeft={\n//                                         <CatmanIcon\n//                                             iconName=\"icon-close\"\n//                                             classes=\" \"\n//                                             height=\"100%\"\n//                                             width=\"100%\"\n//                                         />\n//                                     }\n//                                 />\n//\n//                             </div>\n//                         </div>\n//\n//                         <div className=\"drawer-edit-area\">\n//                             {inputs}\n//                         </div>\n//                     </StickyThing>\n//                 </>\n//             );\n//         }\n//         return drawer;\n//     }\n//\n//     //MANAGE GRID\n//     //GRID MANAGEMENT\n//     manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )=>{\n//         if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n//             if(checkBoxSelections.length <= 1){\n//                 this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n//             }else if(checkBoxSelections.length > 1 ){\n//                 this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n//             }\n//             this.initialized = true;\n//         }else{\n//             this.setState({footerOpen : false});\n//         }\n//\n//     };\n//     conditionClasses(){\n//         if(this.state.editDrawerOpen === true){\n//             return \"drawer-open\";\n//         }\n//     }\n//     addAction(addType:string){\n//         console.log(\"added item or items: \", addType );\n//         switch (addType) {\n//             case \"add-attribute\":\n//\n//                 return(<></>);\n//             case \"add-products\":\n//\n//                 return(<></>);\n//\n//\n//\n//         }\n//     }\n//\n//     getGridArea(){\n//         return (\n//             <DataGrid\n//                 ref={this.dataGridRef}\n//                 data={this.state.workingData}\n//                 manageParentViews={()=>this.openEditDrawer()}\n//                 selectionCallback={this.manageSelectionSet}\n//                 columnsData={this.state.columnsData}\n//                 classes={this.conditionClasses()}\n//                 addAction={this.addAction}\n//                 focusedItem={this.state.focusedInput}\n//             />\n//         )\n//     }\n//\n//     getContentArea(){\n//         switch (this.state.viewMode) {\n//             case \"grid-view\":\n//                 return this.getGridArea();\n//             case \"cards-view\":\n//                 return this.getCardArea();\n//         }\n//     }\n//\n//     getToggleBar(){\n//\n//         //determine class\n//         const selectedClass = (stateName : viewState)=>{\n//             if(stateName == this.state.viewMode)\n//             {\n//                 return \"active\";\n//             }\n//             else\n//             {\n//                 return \"\";\n//             }\n//         };\n//\n//         return(\n//             <div className=\"button-bar\">\n//                 <AppButton\n//                     OnClick={()=>this.manageViewModes(\"grid-view\")}\n//                     buttonType=\"transparent-bg\"\n//                     tooltipType=\"custom\"\n//                     tooltip={toolTipContent.goBackWizard()}\n//                     classes={`${selectedClass(\"grid-view\")}`}\n//                     iconCenter={(\n//                         <CatmanIcon\n//                             iconName={`icon-list-view`}\n//                             width=\"1rem\"\n//                             height=\"100%\"\n//                         />\n//                     )}\n//                 />\n//                 <AppButton\n//                     OnClick={()=>this.manageViewModes(\"cards-view\")}\n//                     buttonType=\"transparent-bg\"\n//                     tooltipType=\"custom\"\n//                     tooltip={toolTipContent.goBackWizard()}\n//                     classes={`${selectedClass(\"cards-view\")} `}\n//                     iconCenter={(\n//                         <CatmanIcon\n//                             iconName={`icon-card-view`}\n//                             width=\"1rem\"\n//                             height=\"100%\"\n//                         />\n//                     )}\n//                 />\n//                 <AppButton\n//                     OnClick={()=>this.manageViewModes(\"mosaic-view\")}\n//                     buttonType=\"transparent-bg\"\n//                     tooltipType=\"custom\"\n//                     tooltip={ toolTipContent.goBackWizard()}\n//                     classes={`${selectedClass(\"mosaic-view\")} `}\n//                     iconCenter={(\n//                         <CatmanIcon\n//                             iconName={`icon-mosaic-view`}\n//                             width=\"1rem\"\n//                             height=\"100%\"\n//                         />\n//                     )}\n//                 />\n//             </div>\n//         )\n//     }\n//\n//     render(){\n//         return(\n//             <>\n//                 <MainHeaderArea\n//                     addItemAction={()=>{}}\n//                     sectionTitle=\"Media Library\"\n//                     mainButtonLabel=\"Add Media\"\n//                     navigationElement={<Navigation menuHelpStyle=\"panel\" navElements={mainNavConfig} />}\n//                 />\n//                 <TitleArea\n//                     mainTitle=\"Media Library\"\n//                     subTitle=\"Manage media to describe your products\"\n//                     titleType=\"subtitle-above\"\n//                 />\n//                 <div className=\"view-switch-container\">{this.getToggleBar()}</div>\n//                 {this.getEditDrawer()}\n//                 {this.getContentArea()}\n//                 {this.getMediaDetailsView()}\n//             </>\n//         );\n//     }\n// }"]},"metadata":{},"sourceType":"module"}