{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport { appColumns } from \"../../_sample-data/columns\"; //data grid data should be an array of arrays\n//each product is an array of attributes\n\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectionSet = [];\n    this.numCols = void 0;\n    this.numRows = void 0;\n    this.startSelectionRow = void 0;\n    this.startSelectionCell = void 0;\n    this.cellRange = void 0;\n    this._checkedRows = [];\n\n    this.iconCheck = row => {\n      for (let i = 0; i < this.state.checkedRows.length; i++) {\n        if (row === this.state.checkedRows[i]) {\n          return \"checkbox-checked\";\n        }\n      }\n\n      return \"checkbox-unchecked\";\n    };\n\n    this.updateSelectionState = () => {\n      this.setState({\n        selectionSet: this.selectionSet\n      });\n    };\n\n    this.state = {\n      workingDataSet: this.props.data,\n      selectionSet: [],\n      checkedRows: []\n    };\n    this.startSelectionRow = 0;\n    this.startSelectionCell = 0;\n    this.cellRange = {\n      startCell: 0,\n      endCell: 0,\n      startRow: 0,\n      endRow: 0\n    };\n    this.numCols = this.getNumColumns();\n    this.numRows = this.getNumRows();\n  }\n\n  manageSelection(row, cell, columnName, clearSelection) {\n    if (clearSelection) {\n      this.selectionSet = [];\n      this._checkedRows = [];\n    }\n\n    if (this.startSelectionRow > row) {\n      this.cellRange.startRow = row;\n      this.cellRange.endRow = this.startSelectionRow;\n    } else {\n      this.cellRange.startRow = this.startSelectionRow;\n      this.cellRange.endRow = row;\n    }\n\n    if (this.startSelectionCell > cell) {\n      this.cellRange.startCell = cell;\n      this.cellRange.endCell = this.startSelectionCell;\n    } else {\n      this.cellRange.startCell = this.startSelectionCell;\n      this.cellRange.endCell = cell;\n    }\n\n    if (row === this.startSelectionRow && cell === this.startSelectionCell) {\n      this.selectionSet.push({\n        row: row,\n        cell: cell,\n        selected: true,\n        columnName: appColumns.getColumns()[cell - 2].columnName\n      });\n    }\n\n    for (let i = this.cellRange.startRow; i < this.cellRange.endRow + 1; i++) {\n      for (let j = this.cellRange.startCell; j < this.cellRange.endCell + 1; j++) {\n        this.selectionSet.push({\n          row: i,\n          cell: j,\n          selected: true,\n          columnName: appColumns.getColumns()[j - 2].columnName\n        });\n      }\n    } // handle single cell as start and end\n\n\n    console.log(\"@@@ this.selectionSet: \", this.selectionSet);\n    console.log(\"*** this.state.selectionSet: \", this.state.selectionSet);\n\n    if (this.selectionSet.length === 2) {\n      if (this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell) {\n        this.selectionSet.splice(1, 1);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet,\n      checkedRows: this._checkedRows\n    });\n\n    if (this.props.selectionCallback !== undefined && this.props.selectionCallback !== null) {\n      let selectedItems = [];\n      let lastRow = 0; // work through the selection set to organize things\n\n      i: for (let i = 0; i < this.selectionSet.length; i++) {\n        if (i === 0) {\n          //if it's the first one let's create a new entry\n          lastRow = this.selectionSet[0].row;\n          let newItem = {\n            row: lastRow,\n            cells: [],\n            productFields: []\n          };\n          selectedItems.push(newItem);\n        } //loop over the existing list of rows to create new ones\n\n\n        if (this.selectionSet[i].row === lastRow) {\n          //one more loop over the list to grab all the cells that belong to the row\n          if (selectedItems[selectedItems.length - 1].cells.length === 0) {\n            for (let j = 0; j < this.selectionSet.length; j++) {\n              if (this.selectionSet[j].row === lastRow) {\n                //if the row matches the last row, then push in the selected cell\n                selectedItems[selectedItems.length - 1].cells.push(this.selectionSet[j].cell);\n              }\n            }\n          }\n        } else {\n          lastRow = this.selectionSet[i].row;\n          let newItem = {\n            row: lastRow,\n            cells: [],\n            productFields: []\n          };\n          selectedItems.push(newItem);\n        }\n      }\n\n      for (let x = 0; x < selectedItems.length; x++) {\n        for (let y = 0; y < this.state.workingDataSet[selectedItems[x].row - 2].length; y++) {\n          selectedItems[x].productFields.push(this.state.workingDataSet[selectedItems[x].row - 2][y]);\n        }\n      }\n\n      this.props.selectionCallback(selectedItems, this._checkedRows, \"standard-launch\");\n    }\n  }\n\n  clearSelection() {\n    this.setState({\n      selectionSet: [],\n      checkedRows: []\n    });\n    this._checkedRows = [];\n    this.selectionSet = [];\n  }\n\n  checkSelected(row, cell) {\n    for (let i = 0; i < this.state.selectionSet.length; i++) {\n      if (this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell) {\n        return \"selected\";\n      }\n    } //if nothing is found, return false because it isn't selected\n\n\n    return \"\";\n  }\n\n  getNumColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return appColumns.getColumns().length;\n  }\n\n  getNumRows() {\n    if (this.state.workingDataSet.length > 0) {\n      return this.state.workingDataSet.length;\n    } else {\n      return this.props.data.length;\n    }\n  }\n\n  getProductUniqueID(index) {\n    for (let j = 0; j < this.state.workingDataSet[index].length; j++) {\n      if (this.state.workingDataSet[index][j].columnName === \"uniqueID\") {\n        return this.state.workingDataSet[index][j].value;\n      }\n    }\n  }\n\n  mouseDownAction(row, cell) {\n    this.startSelectionCell = cell;\n    this.startSelectionRow = row;\n  }\n\n  mouseUpAction(row, cell, columnName) {\n    //console.log(\"@@@check\", row, \" \", cell, \" \", columnName);\n    this.manageSelection(row, cell, columnName, true);\n    console.log(\"selection set: \", this.selectionSet);\n  }\n\n  manageCheckbox(row) {\n    //find if this number is in the list\n    let found = false;\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      if (this._checkedRows[i] === row) {\n        //if it is in the list remove it which unchecks\n        this._checkedRows.splice(i, 1);\n\n        this.setState({\n          checkedRows: this._checkedRows\n        });\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      this._checkedRows.push(row);\n\n      this.setState({\n        checkedRows: this._checkedRows\n      });\n    } //handle selecting the checked\n    //First reset the cell selection\n\n\n    this.selectionSet = [];\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      for (let j = 0; j < this.state.workingDataSet[this._checkedRows[i] - 1].length; j++) {\n        let selectedCell = {\n          row: this._checkedRows[i] + 1,\n          cell: j,\n          selected: true,\n          columnName: appColumns.getColumns()[j + 1].columnName\n        };\n        this.selectionSet.push(selectedCell);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet\n    });\n\n    if (this.props.selectionCallback !== undefined) {\n      this.props.selectionCallback(this.state.selectionSet, this.state.checkedRows, \"checkbox-launched\");\n    } //once people use the tool, we can hide the tool tip\n\n\n    toolTipContent.showSelectRow = false;\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.state.workingDataSet.length; i++) {\n      for (let j = 0; j < this.state.workingDataSet[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell checkbox-main\",\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 2,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            OnClick: () => this.manageCheckbox(i + 1),\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.selectRow(),\n            classes: `${this.iconCheck(i + 1)}`,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: `${this.iconCheck(i + 1)}`,\n              width: \"0.5rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell\",\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 2\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: this.props.columns[j].control,\n          tileLabel: this.state.workingDataSet[i][j].value,\n          mouseDownActions: [() => this.mouseDownAction(i + 2, j + 2)],\n          mouseUpActions: [() => this.props.manageParentViews(), () => this.mouseUpAction(i + 2, j + 2, appColumns.getColumns()[j].columnName)],\n          selectedClass: this.checkSelected(i + 2, j + 2),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 25\n          }\n        }));\n\n        if (this.props.columns[j].control != \"hidden\") {\n          cells.push(cell);\n        }\n\n        if (j === this.state.workingDataSet[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 2,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"nav-link\",\n            navPath: `/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`,\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.singleProduct(),\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  getColumnHeaders() {\n    let columnsHeads = [];\n\n    for (let i = 0; i < this.props.columns.length; i++) {\n      if (i === 0) {\n        columnsHeads.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell checkbox-main grid-header\",\n          style: {\n            gridColumn: i + 1,\n            gridRow: 1,\n            zIndex: 100 + (this.numRows - i)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          OnClick: () => this.manageCheckbox(i),\n          buttonType: \"transparent-bg\",\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.selectRow(),\n          classes: ` `,\n          iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: `${this.iconCheck(i)}`,\n            width: \"0.5rem\",\n            height: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 25\n          }\n        })));\n      }\n\n      let columnHead = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cell grid-header\",\n        style: {\n          gridColumn: i + 2,\n          gridRow: 1,\n          zIndex: this.numRows + 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Tile, {\n        tileType: \"text-input\",\n        tileLabel: this.props.columns[i].columnLabel,\n        mouseDownActions: [],\n        mouseUpActions: [() => this.props.manageParentViews()],\n        selectedClass: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }\n      }));\n\n      if (this.props.columns[i].control != \"hidden\") {\n        columnsHeads.push(columnHead);\n      } //final column head action\n\n\n      if (i === this.props.columns.length - 1) {\n        columnsHeads.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell details grid-header\",\n          style: {\n            gridColumn: this.props.columns.length + 2,\n            gridRow: 1,\n            zIndex: 100 + (this.numRows - i)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"nav-link\",\n          navPath: `/catalog/spreadsheet`,\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.singleProduct(),\n          iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"go-arrow\",\n            width: \"1rem\",\n            height: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 25\n          }\n        })));\n      }\n    }\n\n    return columnsHeads;\n  }\n\n  render() {\n    let columnHeaders = this.getColumnHeaders(); //having some trouble with layout of grid and checkboxes\n    // style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}\n\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: `data-grid ${this.props.classes}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","appColumns","DataGrid","Component","constructor","props","selectionSet","numCols","numRows","startSelectionRow","startSelectionCell","cellRange","_checkedRows","iconCheck","row","i","state","checkedRows","length","updateSelectionState","setState","workingDataSet","data","startCell","endCell","startRow","endRow","getNumColumns","getNumRows","manageSelection","cell","columnName","clearSelection","push","selected","getColumns","j","console","log","splice","selectionCallback","undefined","selectedItems","lastRow","newItem","cells","productFields","x","y","checkSelected","getProductUniqueID","index","value","mouseDownAction","mouseUpAction","manageCheckbox","found","selectedCell","showSelectRow","getGridItems","gridColumn","gridRow","zIndex","selectRow","columns","control","manageParentViews","singleProduct","getColumnHeaders","columnsHeads","columnHead","columnLabel","render","columnHeaders","constructedGrid","classes"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {selectedStateType, Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport camelcase from \"camelcase\";\nimport {appColumns, iColumn} from \"../../_sample-data/columns\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][];\n    manageParentViews : Function;\n    selectionCallback? : Function;\n    columns : iColumn[];\n    classes? : string;\n}\n\ninterface iSTATE {\n    selectionSet : selectionObject[];\n    checkedRows :number[];\n    workingDataSet : iDataGridItem[][]\n}\n\nexport type selectionObject = {\n    row : number;\n    cell : number;\n    selected : boolean;\n    columnName : string;\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n\n        this.state = {\n            workingDataSet : this.props.data,\n            selectionSet : [],\n            checkedRows : [],\n\n        };\n        this.startSelectionRow = 0;\n        this.startSelectionCell = 0;\n\n        this.cellRange = {\n            startCell : 0,\n            endCell : 0,\n            startRow : 0,\n            endRow : 0,\n        };\n\n        this.numCols = this.getNumColumns();\n        this.numRows = this.getNumRows();\n    }\n    selectionSet : selectionObject[] = [];\n    numCols : number;\n    numRows: number;\n    startSelectionRow : number;\n    startSelectionCell : number;\n\n    cellRange : any;\n    _checkedRows : number[] = [];\n\n    manageSelection(row:number, cell:number, columnName : string,  clearSelection : boolean){\n\n        if(clearSelection){\n            this.selectionSet = [];\n            this._checkedRows = [];\n        }\n\n        if(this.startSelectionRow > row){\n            this.cellRange.startRow = row;\n            this.cellRange.endRow = this.startSelectionRow\n        }else{\n            this.cellRange.startRow = this.startSelectionRow;\n            this.cellRange.endRow = row;\n        }\n\n        if(this.startSelectionCell > cell){\n            this.cellRange.startCell = cell;\n            this.cellRange.endCell = this.startSelectionCell;\n        }else {\n            this.cellRange.startCell = this.startSelectionCell;\n            this.cellRange.endCell = cell;\n        }\n\n        if(row === this.startSelectionRow && cell === this.startSelectionCell){\n            this.selectionSet.push(\n                {\n                    row: row,\n                    cell: cell,\n                    selected : true,\n                    columnName : appColumns.getColumns()[cell-2].columnName\n                }\n            );\n        }\n\n        for( let i = this.cellRange.startRow; i < this.cellRange.endRow+1; i++){\n            for(let j= this.cellRange.startCell; j < this.cellRange.endCell+1; j++){\n                this.selectionSet.push(\n                    {\n                        row: i,\n                        cell: j,\n                        selected : true,\n                        columnName : appColumns.getColumns()[j-2].columnName\n                    }\n                );\n            }\n        }\n\n        // handle single cell as start and end\n\n        console.log(\"@@@ this.selectionSet: \", this.selectionSet);\n        console.log(\"*** this.state.selectionSet: \", this.state.selectionSet);\n\n        if(this.selectionSet.length === 2){\n            if( this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell  ){\n                this.selectionSet.splice(1,1);\n            }\n        }\n\n        this.setState({\n            selectionSet : this.selectionSet,\n            checkedRows : this._checkedRows\n        });\n\n\n        if(this.props.selectionCallback !== undefined && this.props.selectionCallback !== null){\n           type iSelectedItems = { row : number, cells : number[], productFields : iDataGridItem[] };\n            let selectedItems : iSelectedItems[] = [  ];\n            let lastRow : number = 0;\n\n            // work through the selection set to organize things\n\n           i: for(let i=0; i < this.selectionSet.length; i++){\n                if(i===0){\n                    //if it's the first one let's create a new entry\n                    lastRow = this.selectionSet[0].row;\n                    let newItem : iSelectedItems = { row : lastRow, cells:[], productFields : []};\n                    selectedItems.push(newItem);\n                }\n\n                //loop over the existing list of rows to create new ones\n                    if(this.selectionSet[i].row === lastRow){\n                        //one more loop over the list to grab all the cells that belong to the row\n                        if(selectedItems[selectedItems.length-1].cells.length === 0){\n                            for(let j=0; j < this.selectionSet.length; j++){\n                                if(this.selectionSet[j].row === lastRow){\n                                    //if the row matches the last row, then push in the selected cell\n                                    selectedItems[selectedItems.length-1].cells.push( this.selectionSet[j].cell );\n                                }\n                            }\n                        } \n                    }else{\n                        lastRow = this.selectionSet[i].row;\n                        let newItem : iSelectedItems = { row : lastRow, cells:[], productFields : []};\n                        selectedItems.push(newItem);\n                    }\n            }\n\n\n           for(let x=0; x < selectedItems.length; x++){\n                for(let y=0; y < this.state.workingDataSet[selectedItems[x].row-2].length; y++){\n                    selectedItems[x].productFields.push(this.state.workingDataSet[selectedItems[x].row-2][y] )\n                }\n\n           }\n\n            this.props.selectionCallback(selectedItems, this._checkedRows, \"standard-launch\");\n\n\n        }\n    }\n\n    clearSelection(){\n        this.setState({selectionSet:[], checkedRows:[]});\n        this._checkedRows = [];\n        this.selectionSet = [];\n    }\n\n    checkSelected(row:number, cell:number):selectedStateType{\n        for(let i=0; i<this.state.selectionSet.length; i++){\n            if( this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell){\n                return \"selected\";\n            }\n        }\n        //if nothing is found, return false because it isn't selected\n        return \"\";\n    }\n\n    getNumColumns(){\n        //TODO swap this out to calculating total normalized columns\n\n        return appColumns.getColumns().length;\n    }\n\n    getNumRows(){\n       if(this.state.workingDataSet.length > 0){\n           return this.state.workingDataSet.length;\n       }else{\n           return this.props.data.length;\n       }\n    }\n\n    getProductUniqueID(index : number){\n\n        for(let j=0; j < this.state.workingDataSet[index].length; j++){\n            if(this.state.workingDataSet[index][j].columnName === \"uniqueID\"){\n                return this.state.workingDataSet[index][j].value;\n            }\n        }\n    }\n\n    mouseDownAction(row : number, cell:number){\n        this.startSelectionCell = cell;\n        this.startSelectionRow = row;\n    }\n\n    mouseUpAction(row:number, cell:number, columnName : string){\n\n        //console.log(\"@@@check\", row, \" \", cell, \" \", columnName);\n        this.manageSelection(row, cell, columnName, true);\n        console.log(\"selection set: \", this.selectionSet);\n    }\n\n    manageCheckbox(row : number){\n\n        //find if this number is in the list\n        let found : boolean = false;\n\n\n        for(let i=0; i < this._checkedRows.length; i++){\n\n\n            if(this._checkedRows[i] === row){\n                //if it is in the list remove it which unchecks\n                this._checkedRows.splice(i, 1);\n                this.setState({checkedRows : this._checkedRows});\n                found = true;\n\n            }\n        }\n        if(found === false){\n            this._checkedRows.push(row);\n            this.setState({checkedRows : this._checkedRows});\n\n        }\n\n\n        //handle selecting the checked\n        //First reset the cell selection\n        this.selectionSet = [];\n\n        for(let i=0; i < this._checkedRows.length; i++){\n            for(let j=0; j < this.state.workingDataSet[this._checkedRows[i]-1].length; j++ ){\n                let selectedCell : selectionObject = {\n                    row : this._checkedRows[i]+1,\n                    cell : j,\n                    selected : true,\n                    columnName : appColumns.getColumns()[j+1].columnName\n                };\n                this.selectionSet.push(selectedCell);\n\n            }\n        }\n\n\n\n\n\n        this.setState({selectionSet : this.selectionSet});\n        if(this.props.selectionCallback !== undefined){\n            this.props.selectionCallback(this.state.selectionSet, this.state.checkedRows, \"checkbox-launched\");\n        }\n        //once people use the tool, we can hide the tool tip\n        toolTipContent.showSelectRow = false;\n    }\n\n    iconCheck = (row : number):string=>{\n        for(let i=0; i < this.state.checkedRows.length; i++){\n            if(row === this.state.checkedRows[i]){\n                return \"checkbox-checked\"\n            }\n        }\n        return \"checkbox-unchecked\"\n    };\n\n    updateSelectionState = ()=>{\n        this.setState({selectionSet : this.selectionSet});\n\n    };\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.state.workingDataSet.length; i++){\n            for(let j=0; j < this.state.workingDataSet[i].length; j++){\n                if(j === 0){\n                    cells.push(\n                        <div className=\"cell checkbox-main\" style={{gridColumn : j+1, gridRow : i+2, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                OnClick={()=>this.manageCheckbox(i+1)}\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.selectRow()}\n                                classes={`${this.iconCheck(i+1)}`}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName={`${this.iconCheck(i+1)}`}\n                                        width=\"0.5rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className=\"cell\" style={{gridColumn : j+2, gridRow : i+2 }}>\n                        <Tile\n                            tileType={this.props.columns[j].control}\n                            tileLabel={this.state.workingDataSet[i][j].value}\n                            mouseDownActions={\n                                [() => this.mouseDownAction(i+2,j+2)]\n                            }\n                            mouseUpActions={\n                                [\n                                    () => this.props.manageParentViews(),\n                                    () => this.mouseUpAction(i+2,j+2, appColumns.getColumns()[j].columnName)\n                                ]\n                            }\n                            selectedClass={this.checkSelected(i+2, j+2)}\n                        />\n                    </div>\n                );\n\n\n                if(this.props.columns[j].control != \"hidden\"){\n                    cells.push(cell);\n                }\n\n                if(j === this.state.workingDataSet[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+2, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"nav-link\"\n                                navPath={`/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.singleProduct()}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    getColumnHeaders(){\n        let columnsHeads : ReactElement[] = [];\n        for(let i=0; i < this.props.columns.length; i++ ){\n            if(i === 0){\n                columnsHeads.push(\n                    <div className=\"cell checkbox-main grid-header\" style={{gridColumn : i+1, gridRow : 1, zIndex : 100 + (this.numRows - i) }}>\n                        <AppButton\n                            OnClick={()=>this.manageCheckbox(i)}\n                            buttonType=\"transparent-bg\"\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.selectRow()}\n                            classes={` `}\n                            iconCenter={(\n                                <CatmanIcon\n                                    iconName={`${this.iconCheck(i)}`}\n                                    width=\"0.5rem\"\n                                    height=\"100%\"\n                                />\n                            )}\n                        />\n                    </div>\n                )\n            }\n            let columnHead = (\n                <div className=\"cell grid-header\" style={{gridColumn : i+2, gridRow : 1, zIndex: this.numRows+10 }}>\n                    <Tile\n                        tileType=\"text-input\"\n                        tileLabel={this.props.columns[i].columnLabel}\n                        mouseDownActions={\n                            [ ]\n                        }\n                        mouseUpActions={\n                            [\n                                () => this.props.manageParentViews()\n                            ]\n                        }\n                        selectedClass={\"\"}\n                    />\n                </div>\n            );\n\n            if(this.props.columns[i].control != \"hidden\"){\n                columnsHeads.push(columnHead);\n            }\n\n\n            //final column head action\n            if(i === this.props.columns.length-1){\n                columnsHeads.push(\n                    <div className=\"cell details grid-header\"\n                         style={{gridColumn : this.props.columns.length+2, gridRow : 1, zIndex : 100 + (this.numRows - i) }}\n                        >\n                        <AppButton\n                            buttonType=\"nav-link\"\n                            navPath={`/catalog/spreadsheet`}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.singleProduct()}\n                            iconCenter={(\n                                <CatmanIcon\n                                    iconName=\"go-arrow\"\n                                    width=\"1rem\"\n                                    height=\"100%\"\n                                />\n                            )}\n                        />\n                    </div>\n                )\n            }\n\n\n\n        }\n\n\n\n        return( columnsHeads );\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let columnHeaders : ReactElement[] = this.getColumnHeaders();\n\n\n        //having some trouble with layout of grid and checkboxes\n        // style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}\n        let constructedGrid : ReactElement = (\n            <>\n                <div className={`data-grid ${this.props.classes}`}>\n                    <div className=\"viewport\">\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}