{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx\";\nimport React from \"react\";\nimport { MainHeaderArea } from \"../_common/main-header-area/main-header-area\";\nimport { Navigation } from \"../../view-components/list-menu/intra-app-navigation\";\nimport { mainNavConfig } from \"../_catman-configuration/common-app-configuration\";\nimport { toolTipContent } from \"../tool-tip-content/content-tool-tips\";\nimport { TitleArea } from \"../../view-components/title-area/title-area\";\nimport { CardArea } from \"../../view-components/cards-area/card-area\";\nimport { Card } from \"../../view-components/card/card\";\nimport { dataManagerMain } from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport { SingleMediaDetailsView } from \"./media-details-view\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport { DataGrid } from \"../../view-components/data-grid/data-grid\";\nexport class MediaLibraryView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectedMediaIndex = 0;\n    this.dataGridRef = React.createRef();\n    this.editDrawerRef = React.createRef();\n\n    this.manageMediaDetailsPage = mediaIndex => {\n      console.log(\"mediaIndex\", mediaIndex);\n      this.selectedMediaIndex = mediaIndex;\n      this.setState({\n        mediaDetailsOpen: !this.state.mediaDetailsOpen\n      });\n    };\n\n    this.state = {\n      mediaDetailsOpen: false,\n      viewMode: \"cards-view\",\n      editDrawerOpen: false\n    };\n  }\n\n  manageViewModes(desiredState) {\n    this.setState({\n      viewMode: desiredState\n    });\n  }\n\n  getMediaDetailsView() {\n    if (this.state.mediaDetailsOpen === true) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SingleMediaDetailsView, {\n        mediaData: dataManagerMain.getMediaData()[this.selectedMediaIndex],\n        closeSingleMediaView: () => this.manageMediaDetailsPage(0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getCardArea() {\n    if (this.state.mediaDetailsOpen === false) {\n      return /*#__PURE__*/React.createElement(CardArea, {\n        containerClasses: \"catman-media-cards\",\n        cards: /*#__PURE__*/React.createElement(Card, {\n          cardType: \"media\",\n          mediaData: dataManagerMain.getMediaData(),\n          getDetailsFunctions: this.manageMediaDetailsPage,\n          actionToolTip: toolTipContent.mediaRelatedTooltips(\"media-details\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  openEditDrawer() {\n    this.drawerFirstOpen = true;\n    this.setState({\n      editDrawerOpen: true\n    });\n  }\n\n  getGridArea() {\n    return /*#__PURE__*/React.createElement(DataGrid, {\n      ref: this.dataGridRef,\n      data: this.state.workingData,\n      manageParentViews: () => this.openEditDrawer(),\n      selectionCallback: this.manageSelectionSet,\n      columnsData: this.state.columnsData,\n      classes: this.conditionClasses(),\n      addAction: this.addAction,\n      focusedItem: this.state.focusedInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    });\n  }\n\n  getContentArea() {\n    switch (this.state.viewMode) {\n      case \"grid-view\":\n        return this.getGridArea();\n\n      case \"cards-view\":\n        return this.getCardArea();\n    }\n  }\n\n  getToggleBar() {\n    //determine class\n    const selectedClass = stateName => {\n      if (stateName == this.state.viewMode) {\n        return \"active\";\n      } else {\n        return \"\";\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"grid-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"grid-view\")}`,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-list-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"cards-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"cards-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-card-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"mosaic-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"mosaic-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-mosaic-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MainHeaderArea, {\n      addItemAction: () => {},\n      sectionTitle: \"Media Library\",\n      mainButtonLabel: \"Add Media\",\n      navigationElement: /*#__PURE__*/React.createElement(Navigation, {\n        menuHelpStyle: \"panel\",\n        navElements: mainNavConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 40\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TitleArea, {\n      mainTitle: \"Media Library\",\n      subTitle: \"Manage media to describe your products\",\n      titleType: \"subtitle-above\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"view-switch-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, this.getToggleBar()), this.getContentArea(), this.getMediaDetailsView());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx"],"names":["React","MainHeaderArea","Navigation","mainNavConfig","toolTipContent","TitleArea","CardArea","Card","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGrid","MediaLibraryView","Component","constructor","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","manageMediaDetailsPage","mediaIndex","console","log","setState","mediaDetailsOpen","state","viewMode","editDrawerOpen","manageViewModes","desiredState","getMediaDetailsView","getMediaData","getCardArea","mediaRelatedTooltips","openEditDrawer","drawerFirstOpen","getGridArea","workingData","manageSelectionSet","columnsData","conditionClasses","addAction","focusedInput","getContentArea","getToggleBar","selectedClass","stateName","goBackWizard","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {MainHeaderArea} from \"../_common/main-header-area/main-header-area\";\nimport {Navigation} from \"../../view-components/list-menu/intra-app-navigation\";\nimport {mainNavConfig} from \"../_catman-configuration/common-app-configuration\";\nimport {toolTipContent} from \"../tool-tip-content/content-tool-tips\";\nimport {TitleArea} from \"../../view-components/title-area/title-area\";\nimport {CardArea} from \"../../view-components/cards-area/card-area\";\nimport {Card} from \"../../view-components/card/card\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"./media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../view-components/data-grid/data-types-for-data-grid\";\n\ninterface iPROPS {\n    message?: string;\n    workingDataSet : iDataGridItem[][];\n}\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\ninterface iSTATE{\n    mediaDetailsOpen : boolean;\n    viewMode : viewState;\n    editDrawerOpen : boolean;\n}\n\nexport class MediaLibraryView extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.state={\n            mediaDetailsOpen : false,\n            viewMode : \"cards-view\",\n            editDrawerOpen : false\n        }\n    }\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        console.log(\"mediaIndex\", mediaIndex );\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({mediaDetailsOpen : !this.state.mediaDetailsOpen})\n    };\n\n    manageViewModes(desiredState : viewState){\n        this.setState({viewMode : desiredState});\n    }\n\n    getMediaDetailsView(){\n        if(this.state.mediaDetailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n    getCardArea() {\n        if (this.state.mediaDetailsOpen === false) {\n            return (<CardArea\n                containerClasses=\"catman-media-cards\"\n                cards={\n                    <Card\n                        cardType=\"media\"\n                        mediaData={dataManagerMain.getMediaData()}\n                        getDetailsFunctions={this.manageMediaDetailsPage}\n                        actionToolTip={toolTipContent.mediaRelatedTooltips(\"media-details\")}\n                    />\n                }\n            />)\n        } else {\n            return (<></>)\n        }\n    }\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n\n    getGridArea(){\n        return (\n            <DataGrid\n                ref={this.dataGridRef}\n                data={this.state.workingData}\n                manageParentViews={()=>this.openEditDrawer()}\n                selectionCallback={this.manageSelectionSet}\n                columnsData={this.state.columnsData}\n                classes={this.conditionClasses()}\n                addAction={this.addAction}\n                focusedItem={this.state.focusedInput}\n            />\n        )\n\n    }\n\n    getContentArea(){\n        switch (this.state.viewMode) {\n            case \"grid-view\":\n                return this.getGridArea();\n            case \"cards-view\":\n                return this.getCardArea();\n        }\n    }\n\n    getToggleBar(){\n\n        //determine class\n        const selectedClass = (stateName : viewState)=>{\n          if(stateName == this.state.viewMode)\n          {\n              return \"active\";\n          }\n          else\n          {\n              return \"\";\n          }\n        };\n\n        return(\n            <div className=\"button-bar\">\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"grid-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"grid-view\")}`}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-list-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"cards-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"cards-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-card-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"mosaic-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={ toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"mosaic-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-mosaic-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <>\n                <MainHeaderArea\n                    addItemAction={()=>{}}\n                    sectionTitle=\"Media Library\"\n                    mainButtonLabel=\"Add Media\"\n                    navigationElement={<Navigation menuHelpStyle=\"panel\" navElements={mainNavConfig} />}\n                />\n                <TitleArea\n                    mainTitle=\"Media Library\"\n                    subTitle=\"Manage media to describe your products\"\n                    titleType=\"subtitle-above\"\n                />\n                <div className=\"view-switch-container\">{this.getToggleBar()}</div>\n                {this.getContentArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}