{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\";\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectionSet = [];\n    this.numCols = void 0;\n    this.numRows = void 0;\n    this.startSelectionRow = void 0;\n    this.startSelectionCell = void 0;\n    this.cellRange = void 0;\n    this.numCols = this.getNumColumns();\n    this.numRows = this.getNumRows();\n    this.state = {\n      selectionSet: []\n    };\n    this.startSelectionRow = 0;\n    this.startSelectionCell = 0;\n    this.cellRange = {\n      startCell: 0,\n      endCell: 0,\n      startRow: 0,\n      endRow: 0\n    };\n  }\n\n  manageSelection(row, cell, clearSelection) {\n    if (clearSelection) {\n      this.selectionSet = [];\n    }\n\n    if (this.startSelectionRow > row) {\n      this.cellRange.startRow = row;\n      this.cellRange.endRow = this.startSelectionRow;\n    } else {\n      this.cellRange.startRow = this.startSelectionRow;\n      this.cellRange.endRow = row;\n    }\n\n    if (this.startSelectionCell > cell) {\n      this.cellRange.startCell = cell;\n      this.cellRange.endCell = this.startSelectionCell;\n    } else {\n      this.cellRange.startCell = this.startSelectionCell;\n      this.cellRange.endCell = cell;\n    } // let found : boolean = false;\n    // for(let i=0; i < this.selectionSet.length; i++){\n    //     if( this.selectionSet[i].cell === cell && this.selectionSet[i].row === row ){\n    //         this.selectionSet.splice(i, 1);\n    //         found = true;\n    //     }\n    // }\n\n\n    if (row === this.startSelectionRow && cell === this.startSelectionCell) {\n      this.selectionSet.push({\n        row: row,\n        cell: cell,\n        selected: true\n      });\n    }\n\n    console.log(\"start row: \", this.startSelectionRow, \"end row: \", row);\n    console.log(\"start cell: \", this.startSelectionCell, \"end cell: \", cell);\n\n    for (let i = this.cellRange.startRow; i < this.cellRange.endRow + 1; i++) {\n      for (let j = this.cellRange.startCell; j < this.cellRange.endCell + 1; j++) {\n        this.selectionSet.push({\n          row: i,\n          cell: j,\n          selected: true\n        });\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet\n    });\n\n    if (this.props.selectionCallback !== undefined && this.props.selectionCallback !== null) {\n      this.props.selectionCallback(this.state.selectionSet);\n    }\n  }\n\n  checkSelected(row, cell) {\n    for (let i = 0; i < this.state.selectionSet.length; i++) {\n      if (this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell) {\n        return \"selected\";\n      }\n    } //if nothing is found, return false because it isn't selected\n\n\n    return \"\";\n  }\n\n  getNumColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return this.props.data[0].length;\n  }\n\n  getNumRows() {\n    return this.props.data.length;\n  }\n\n  getProductUniqueID(index) {\n    for (let j = 0; j < this.props.data[index].length; j++) {\n      if (this.props.data[index][j].column === \"uniqueID\") {\n        return this.props.data[index][j].value;\n      }\n    }\n  }\n\n  mouseDownAction(row, cell) {\n    this.startSelectionCell = cell;\n    this.startSelectionRow = row;\n    console.log(this.selectionSet);\n    console.log(\"mouse down: \", row, \" \", cell);\n  }\n\n  mouseUpAction(row, cell) {\n    this.manageSelection(row, cell, true);\n    console.log(\"mouse up:\");\n    console.log(\"row: \", row, \"cell: \", cell);\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.props.data.length; i++) {\n      for (let j = 0; j < this.props.data[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell checkbox-main\",\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"checkbox-unchecked\",\n              width: \"0.5rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell\",\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: \"edit-cell\",\n          tileLabel: this.props.data[i][j].value,\n          mouseDownActions: [() => this.mouseDownAction(i + 1, j + 2)],\n          mouseUpActions: [() => this.props.manageParentViews(), () => this.mouseUpAction(i + 1, j + 2)],\n          selectedClass: this.checkSelected(i + 1, j + 2),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }\n        }));\n        cells.push(cell);\n\n        if (j === this.props.data[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"nav-link\",\n            navPath: `/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`,\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  render() {\n    let gridItems = [];\n    let columnHeaders = [];\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      style: {\n        gridTemplateColumns: `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","DataGrid","Component","constructor","props","selectionSet","numCols","numRows","startSelectionRow","startSelectionCell","cellRange","getNumColumns","getNumRows","state","startCell","endCell","startRow","endRow","manageSelection","row","cell","clearSelection","push","selected","console","log","i","j","setState","selectionCallback","undefined","checkSelected","length","data","getProductUniqueID","index","column","value","mouseDownAction","mouseUpAction","getGridItems","cells","gridColumn","gridRow","zIndex","mainNav","manageParentViews","render","gridItems","columnHeaders","constructedGrid","gridTemplateColumns","toString"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {selectedStateType, Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport camelcase from \"camelcase\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][];\n    manageParentViews : Function;\n    selectionCallback? : Function\n}\n\ninterface iSTATE {\n    selectionSet : selectionObject[];\n}\n\nexport type selectionObject = {\n    row : number;\n    cell : number;\n    selected : boolean;\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.numCols = this.getNumColumns();\n        this.numRows = this.getNumRows();\n        this.state = {\n            selectionSet : []\n        };\n        this.startSelectionRow = 0;\n        this.startSelectionCell = 0;\n\n        this.cellRange = {\n            startCell : 0,\n            endCell : 0,\n            startRow : 0,\n            endRow : 0,\n        }\n    }\n    selectionSet : selectionObject[] = [];\n    numCols : number;\n    numRows: number;\n    startSelectionRow : number;\n    startSelectionCell : number;\n\n    cellRange : any;\n\n\n    manageSelection(row:number, cell:number, clearSelection : boolean){\n\n        if(clearSelection){\n            this.selectionSet = [];\n        }\n\n        if(this.startSelectionRow > row){\n            this.cellRange.startRow = row;\n            this.cellRange.endRow = this.startSelectionRow\n        }else{\n            this.cellRange.startRow = this.startSelectionRow;\n            this.cellRange.endRow = row;\n        }\n\n        if(this.startSelectionCell > cell){\n            this.cellRange.startCell = cell;\n            this.cellRange.endCell = this.startSelectionCell;\n        }else {\n            this.cellRange.startCell = this.startSelectionCell;\n            this.cellRange.endCell = cell;\n        }\n\n\n        // let found : boolean = false;\n        // for(let i=0; i < this.selectionSet.length; i++){\n        //     if( this.selectionSet[i].cell === cell && this.selectionSet[i].row === row ){\n        //         this.selectionSet.splice(i, 1);\n        //         found = true;\n        //     }\n        // }\n\n        if(row === this.startSelectionRow && cell === this.startSelectionCell){\n            this.selectionSet.push(\n                {\n                    row: row,\n                    cell: cell,\n                    selected : true\n                }\n            );\n        }\n        console.log( \"start row: \", this.startSelectionRow, \"end row: \", row);\n        console.log( \"start cell: \", this.startSelectionCell, \"end cell: \", cell);\n        for( let i = this.cellRange.startRow; i < this.cellRange.endRow+1; i++){\n            for(let j= this.cellRange.startCell; j < this.cellRange.endCell+1; j++){\n                this.selectionSet.push(\n                    {\n                        row: i,\n                        cell: j,\n                        selected : true\n                    }\n                );\n            }\n        }\n\n        this.setState({selectionSet : this.selectionSet});\n        if(this.props.selectionCallback !== undefined && this.props.selectionCallback !== null){\n            this.props.selectionCallback(this.state.selectionSet);\n        }\n    }\n\n    checkSelected(row:number, cell:number):selectedStateType{\n        for(let i=0; i<this.state.selectionSet.length; i++){\n            if( this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell){\n                return \"selected\";\n            }\n        }\n        //if nothing is found, return false because it isn't selected\n        return \"\";\n    }\n\n    getNumColumns(){\n        //TODO swap this out to calculating total normalized columns\n        return this.props.data[0].length;\n    }\n\n    getNumRows(){\n        return this.props.data.length;\n    }\n\n    getProductUniqueID(index : number){\n        for(let j=0; j < this.props.data[index].length; j++){\n            if(this.props.data[index][j].column === \"uniqueID\"){\n                return this.props.data[index][j].value;\n            }\n        }\n    }\n\n    mouseDownAction(row : number, cell:number){\n        this.startSelectionCell = cell;\n        this.startSelectionRow = row;\n        console.log(this.selectionSet);\n        console.log(\"mouse down: \", row, \" \",cell);\n    }\n\n    mouseUpAction(row:number, cell:number){\n        this.manageSelection(row, cell, true);\n        console.log(\"mouse up:\");\n        console.log(\"row: \",  row, \"cell: \", cell);\n    }\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.props.data.length; i++){\n            for(let j=0; j < this.props.data[i].length; j++){\n                if(j === 0){\n                    cells.push(\n                        <div className=\"cell checkbox-main\" style={{gridColumn : j+1, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"checkbox-unchecked\"\n                                        width=\"0.5rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className=\"cell\" style={{gridColumn : j+2, gridRow : i+1 }}>\n                        <Tile\n                            tileType=\"edit-cell\"\n                            tileLabel={this.props.data[i][j].value}\n                            mouseDownActions={\n                                [() => this.mouseDownAction(i+1,j+2)]\n                            }\n                            mouseUpActions={\n                                [\n                                    () => this.props.manageParentViews(),\n                                    () => this.mouseUpAction(i+1,j+2)\n                                ]\n                            }\n                            selectedClass={this.checkSelected(i+1, j+2)}\n                        />\n                    </div>\n                );\n\n                cells.push(cell);\n\n                if(j === this.props.data[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"nav-link\"\n                                navPath={`/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n            }\n        }\n\n\n\n        return cells;\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let gridItems : ReactElement[] = [];\n        let columnHeaders : ReactElement[]=[];\n\n        let constructedGrid : ReactElement = (\n            <>\n                <div className=\"data-grid\">\n                    <div className=\"viewport\" style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}>\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}