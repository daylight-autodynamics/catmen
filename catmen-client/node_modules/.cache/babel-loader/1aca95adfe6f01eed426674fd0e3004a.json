{"ast":null,"code":"import _classCallCheck from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{toolTipContent}from\"../../views/tool-tip-content/content-tool-tips\";import{dataManagerMain}from\"../../index\";import StickyThing from\"../../view-components/sticky-panel/sticky-panel\";import{SingleMediaDetailsView}from\"../../views/media-library/media-details-view\";import{CatmanIcon}from\"../../svg/icons/icons\";import AppButton from\"../../view-components/button/app-button\";import{DataGrid}from\"../../view-components/data-grid/data-grid\";import{TextInput}from\"../../view-components/text-input/text-input\";export var DataGridWithEditDrawer=/*#__PURE__*/function(_React$Component){_inherits(DataGridWithEditDrawer,_React$Component);var _super=_createSuper(DataGridWithEditDrawer);function DataGridWithEditDrawer(props){var _this;_classCallCheck(this,DataGridWithEditDrawer);_this=_super.call(this,props);_this.selectedMediaIndex=0;_this.dataGridRef=React.createRef();_this.editDrawerRef=React.createRef();_this.drawerFirstOpen=false;_this.columnDefs=void 0;_this.initialized=false;_this.selectionSet=[];_this.drawerInputsLength=0;_this.manageMediaDetailsPage=function(mediaIndex){_this.selectedMediaIndex=mediaIndex;_this.setState({detailsOpen:!_this.state.detailsOpen});};_this.updateValues=function(row,cell,value,colName){if(_this.dataGridRef.current!=null&&_this.dataGridRef.current!=undefined){_this.selectionSet=_this.dataGridRef.current.selectionSet;}//console.log(\"inside drawer\", value, \" col name:\", colName);\n//the minus 2 is the offset for the extra columns checkbox and edit\nfor(var i=0;i<_this.selectionSet.length;i++){if(_this.selectionSet[i].columnName===colName){var myRow=_this.selectionSet[i].row-2;var myCell=_this.selectionSet[i].cell-2;//this.workingDataSet[ myRow-2][myCell-2].value = value;\nvar updateSet={row:myRow,cell:myCell,newData:value};if(_this.props.targetDataSet===\"custom-data\"){//if it's custom we need to pass along the grid data package\n_this.props.dataManager.setData(_this.props.targetDataSet,updateSet,_this.props.gridData);}else{_this.props.dataManager.setData(_this.props.targetDataSet,updateSet);}}}_this.setState({workingData:_this.props.dataManager.getProductData()});};_this.inputFocusAction=function(row,cell){if(_this.state.editDrawerOpen===true){_this.setState({focusedInput:{row:row,cell:cell,editDrawerOpen:_this.state.editDrawerOpen}});}};_this.manageSelectionSet=function(selectionSet,checkBoxSelections,message,row,cell){if(checkBoxSelections.length>0||_this.initialized===false&&checkBoxSelections.length===0&&message===\"checkbox-launched\"){if(checkBoxSelections.length<=1){_this.setState({editDrawerOpen:false,footerOpen:true,footerMode:\"default\"});}else if(checkBoxSelections.length>1){_this.setState({editDrawerOpen:false,footerOpen:true,footerMode:\"multiple-selected\"});}_this.initialized=true;}else{_this.setState({footerOpen:false});}//this is a catch all for parent objects to do something when...\n//... a selection has occurred\nif(_this.props.selectionActions!=undefined){for(var i=0;i<_this.props.selectionActions.length;i++){_this.props.selectionActions[i]();}}//manage focus events\n//we'll use the row & cell data here to manage the focus widget\nif(_this.state.editDrawerOpen===true){_this.setState({focusedInput:{row:row,cell:cell,editDrawerOpen:true}});}};_this.columnDefs=_this.props.columnsData;_this.state={detailsOpen:false,editDrawerOpen:false,//TODO need to adjust data manager\ncolumnsData:_this.props.columnsData,workingData:_this.props.gridData,focusedInput:{row:0,cell:0,editDrawerOpen:false},footerOpen:false,footerMode:\"default\",editDrawerMaximized:false};return _this;}_createClass(DataGridWithEditDrawer,[{key:\"getMediaDetailsView\",value:function getMediaDetailsView(){var _this2=this;if(this.state.detailsOpen===true){return/*#__PURE__*/React.createElement(StickyThing,{enterFromThisSide:\"right\",lastResortClasses:\"product-view\",animateIn:true,heightIncludeUnits:\"100vh\",widthIncludeUnits:\"100vw\",stickyOpen:true,bgColor:\"#CECECE\",doAnimation:true},/*#__PURE__*/React.createElement(SingleMediaDetailsView,{mediaData:dataManagerMain.getMediaObjectData()[this.selectedMediaIndex],closeSingleMediaView:function closeSingleMediaView(){return _this2.manageMediaDetailsPage(0);}}));}}},{key:\"getColumnLabel\",value:function getColumnLabel(colName){//utility method for getting column data obj from\nvar columnLabel=\"\";for(var i=0;i<this.columnDefs.length;i++){if(this.columnDefs[i].columnName===colName){columnLabel=this.columnDefs[i].columnLabel;}}return columnLabel;}},{key:\"openEditDrawer\",value:function openEditDrawer(){this.drawerFirstOpen=true;this.setState({editDrawerOpen:true});}//DRAWER RELATED\n},{key:\"maximizeEditDrawer\",value:function maximizeEditDrawer(){this.setState({editDrawerMaximized:!this.state.editDrawerMaximized});}},{key:\"closeEditDrawer\",value:function closeEditDrawer(){this.setState({editDrawerOpen:false,editDrawerMaximized:false,focusedInput:{row:0,cell:0,editDrawerOpen:false}});if(this.dataGridRef.current!=null&&this.dataGridRef.current!=undefined){this.dataGridRef.current.clearSelection();}this.drawerFirstOpen=false;}},{key:\"shiftFocus\",value:function shiftFocus(shiftIndex){var inputs=document.getElementsByClassName(\"InputBox\");if(inputs[0]!=undefined){if(shiftIndex===inputs.length-1){// @ts-ignore\ninputs[0].focus();// @ts-ignore\ninputs[0].select();}}}},{key:\"getEditDrawer\",value:function getEditDrawer(){var _this3=this;if(this.state.editDrawerOpen===false){return/*#__PURE__*/React.createElement(React.Fragment,null);}if(this.dataGridRef.current!=null&&this.dataGridRef.current!=undefined){this.selectionSet=this.dataGridRef.current.selectionSet;}var inputs=[];var selectedItems=[];//Create list of selection items that need inputs (i.e. one input per column)\ni:for(var i=0;i<this.selectionSet.length;i++){j:for(var j=0;j<selectedItems.length;j++){if(this.selectionSet[i].columnName===selectedItems[j].columnName){continue i;}}var row=this.selectionSet[i].row;var cell=this.selectionSet[i].cell;//TODO this needs to be genericized\n//let productDataItem = catmanData.productData[row-2][cell-2];\nvar productDataItem=this.props.gridData[row-2][cell-2];selectedItems.push(productDataItem);}//Store number of inputs for later use\nthis.drawerInputsLength=selectedItems.length;//CREATE INPUTS for DRAWER\nvar checkValue=\"\";var _loop=function _loop(_i){//check for duplicate values\n//make a list of all the items that match column name\nvar sameColumn=[];j:for(var _j=0;_j<_this3.selectionSet.length;_j++){if(selectedItems[_i].columnName===_this3.selectionSet[_j].columnName){sameColumn.push(_this3.state.workingData[_this3.selectionSet[_j].row-2][_this3.selectionSet[_j].cell-2]);}}//go over each item in the selection set and compare its corresponding value\nk:for(var k=0;k<sameColumn.length;k++){if(k==0){checkValue=sameColumn[k].value;continue k;}if(checkValue==sameColumn[k].value){continue k;}else{checkValue=\"--multiple values selected\";break k;}}console.log(\"sameColumn\",sameColumn);console.log(\"selectedItems\",selectedItems);console.log(\"checkValue\",checkValue);var input=/*#__PURE__*/React.createElement(TextInput,{row:_this3.selectionSet[_i].row,cell:_this3.selectionSet[_i].cell,columnName:_this3.selectionSet[_i].columnName,label:_this3.getColumnLabel(selectedItems[_i].columnName),currentValue:checkValue,onChangeAction:_this3.updateValues,onFocusAction:_this3.inputFocusAction,onBlurActions:[function(){return _this3.shiftFocus(_i);}]});inputs.push(input);};for(var _i=0;_i<selectedItems.length;_i++){_loop(_i);}var maximize=function maximize(valueCheck){if(valueCheck===true){return\"maximized\";}else{return\"catman-edit-default restored\";}};var restoreAndMaximizeTooltip=function restoreAndMaximizeTooltip(valueCheck){if(valueCheck===false){return toolTipContent.maximizeDrawer();}else{return toolTipContent.restoreDrawer();}};var restoreAndMaximizeBtnIcon=function restoreAndMaximizeBtnIcon(valueCheck){if(valueCheck===false){return\"icon-maximize\";}else{return\"icon-restore-btn\";}};var drawer=/*#__PURE__*/React.createElement(React.Fragment,null);if(this.state.editDrawerOpen===true&&this.selectionSet.length>0){drawer=/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(StickyThing,{ref:this.editDrawerRef,enterFromThisSide:\"bottom\",lastResortClasses:\"catman-edit-drawer \".concat(maximize(this.state.editDrawerMaximized)),animateIn:true,heightIncludeUnits:\"\",widthIncludeUnits:\"\",stickyOpen:true,bgColor:\"#CECECE\",doAnimation:true,toolBar:\"none\"},/*#__PURE__*/React.createElement(\"div\",{className:\"tool-bar\"},/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"drawer-controls\"},/*#__PURE__*/React.createElement(AppButton,{buttonType:\"secondary-action\",buttonLabel:\"\",OnClick:function OnClick(){return _this3.maximizeEditDrawer();},tooltipType:\"custom\",tooltip:restoreAndMaximizeTooltip(this.state.editDrawerMaximized),toolTipTimeOutInMS:10000,classes:\"tool-bar-btn icon-only-btn\",iconLeft:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"\".concat(restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)),classes:\" \",height:\"100%\",width:\"100%\"})}),/*#__PURE__*/React.createElement(AppButton,{buttonType:\"secondary-action\",buttonLabel:\"\",OnClick:function OnClick(){return _this3.closeEditDrawer();},tooltipType:\"custom\",tooltip:toolTipContent.closeDrawer(),toolTipTimeOutInMS:10000,classes:\"icon-only-btn\",iconLeft:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"icon-close\",classes:\" \",height:\"100%\",width:\"100%\"})}))),/*#__PURE__*/React.createElement(\"div\",{className:\"drawer-edit-area\"},inputs)));}return drawer;}},{key:\"notifySelectionSetUpdate\",value:function notifySelectionSetUpdate(){if(this.dataGridRef.current!=null&&this.dataGridRef.current!=undefined){this.selectionSet=this.dataGridRef.current.selectionSet;}//TODO move this drawer logic out\nif(this.selectionSet.length>0){this.setState({editDrawerOpen:true});}else{this.setState({editDrawerOpen:false});}}//GRID MANAGEMENT\n},{key:\"getGridArea\",value:function getGridArea(){var _this4=this;return/*#__PURE__*/React.createElement(DataGrid,{ref:this.dataGridRef,data:this.state.workingData,manageParentViews:function manageParentViews(){return _this4.openEditDrawer();},selectionCallback:this.manageSelectionSet,notifySelections:function notifySelections(){return _this4.notifySelectionSetUpdate();},columnsData:this.state.columnsData,classes:this.conditionClasses(),addAction:this.addAction,focusedItem:this.state.focusedInput,hasDetailsActionButton:this.props.gridHasDetailsButton});}},{key:\"conditionClasses\",value:function conditionClasses(){if(this.state.editDrawerOpen===true){return\"drawer-open\";}}},{key:\"addAction\",value:function addAction(addType){switch(addType){case\"add-attribute\":return/*#__PURE__*/React.createElement(React.Fragment,null);case\"add-products\":return/*#__PURE__*/React.createElement(React.Fragment,null);}}},{key:\"switchToEditMode\",value:function switchToEditMode(){if(this.dataGridRef.current!==null&&this.dataGridRef.current!==undefined){this.dataGridRef.current.switchToEditModeFromCheckBoxMode();this.openEditDrawer();this.initialized=false;this.setState({footerOpen:false});}}// Grid\n},{key:\"clearSelection\",value:function clearSelection(){if(this.dataGridRef.current!==null&&this.dataGridRef.current!==undefined){this.dataGridRef.current.clearSelection();}}},{key:\"getCheckedRows\",value:function getCheckedRows(){if(this.dataGridRef.current!=undefined){return this.dataGridRef.current._checkedRows;}}},{key:\"switchToEditModeFromCheckBoxMode\",value:function switchToEditModeFromCheckBoxMode(){if(this.dataGridRef.current!==null&&this.dataGridRef.current!==undefined){this.dataGridRef.current.switchToEditModeFromCheckBoxMode();this.openEditDrawer();this.initialized=false;this.setState({footerOpen:false});}}//Life Cycle\n},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var inputs=document.getElementsByClassName(\"InputBox\");if(this.drawerFirstOpen===true){if(inputs[0]!=undefined){inputs[0].focus();inputs[0].select();this.drawerFirstOpen=false;}}}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(React.Fragment,null,this.getEditDrawer(),this.getGridArea(),this.getMediaDetailsView());}}]);return DataGridWithEditDrawer;}(React.Component);","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid-with-edit-drawer.tsx"],"names":["React","toolTipContent","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGrid","TextInput","DataGridWithEditDrawer","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","drawerFirstOpen","columnDefs","initialized","selectionSet","drawerInputsLength","manageMediaDetailsPage","mediaIndex","setState","detailsOpen","state","updateValues","row","cell","value","colName","current","undefined","i","length","columnName","myRow","myCell","updateSet","newData","targetDataSet","dataManager","setData","gridData","workingData","getProductData","inputFocusAction","editDrawerOpen","focusedInput","manageSelectionSet","checkBoxSelections","message","footerOpen","footerMode","selectionActions","columnsData","editDrawerMaximized","getMediaObjectData","columnLabel","clearSelection","shiftIndex","inputs","document","getElementsByClassName","focus","select","selectedItems","j","productDataItem","push","checkValue","sameColumn","k","console","log","input","getColumnLabel","shiftFocus","maximize","valueCheck","restoreAndMaximizeTooltip","maximizeDrawer","restoreDrawer","restoreAndMaximizeBtnIcon","drawer","maximizeEditDrawer","closeEditDrawer","closeDrawer","openEditDrawer","notifySelectionSetUpdate","conditionClasses","addAction","gridHasDetailsButton","addType","switchToEditModeFromCheckBoxMode","_checkedRows","getEditDrawer","getGridArea","getMediaDetailsView","Component"],"mappings":"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","sourcesContent":["import React, {ReactElement} from \"react\";\n\nimport {toolTipContent} from \"../../views/tool-tip-content/content-tool-tips\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"../../views/media-library/media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../_catman-data-types\";\nimport {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\nimport {iColumn} from \"../../_catman-data-types\";\nimport {focusInputType} from \"../../views/catalog-views/catalog-details/catalog-details-view\";\nimport {TextInput} from \"../../view-components/text-input/text-input\";\nimport {dataSetType} from \"../../data-components/data-manager/data-manager\";\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\n\ninterface iPROPS {\n    message?: string;\n    gridData : iDataGridItem[][];\n    columnsData : iColumn[];\n    dataManager : DataManager;\n    targetDataSet : dataSetType;\n    selectionActions? : Function[];\n    gridHasDetailsButton : boolean;\n}\n\ninterface iSTATE{\n    detailsOpen : boolean;\n    editDrawerOpen : boolean;\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n    focusedInput : focusInputType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    editDrawerMaximized : boolean;\n}\n\nexport class DataGridWithEditDrawer extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.columnDefs = this.props.columnsData;\n        this.state={\n            detailsOpen : false,\n            editDrawerOpen : false,\n            //TODO need to adjust data manager\n            columnsData : this.props.columnsData,\n            workingData : this.props.gridData,\n            focusedInput : { row:0, cell:0, editDrawerOpen : false},\n            footerOpen : false,\n            footerMode : \"default\",\n            editDrawerMaximized : false\n        }\n    }\n\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n    drawerFirstOpen : boolean = false;\n    //COLUMN DEFINITIONS:\n    columnDefs : iColumn[];\n\n    //just for the fist launch of checkbox editing\n    initialized : boolean = false;\n\n    selectionSet : selectionObject[] = [];\n    drawerInputsLength = 0;\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({detailsOpen : !this.state.detailsOpen})\n    };\n\n    getMediaDetailsView(){\n        if(this.state.detailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n    getColumnLabel(colName : string) : string{\n        //utility method for getting column data obj from\n        let columnLabel = \"\";\n        for(let i = 0; i < this.columnDefs.length; i++){\n            if(this.columnDefs[i].columnName === colName){\n                columnLabel = this.columnDefs[i].columnLabel;\n            }\n        }\n        return columnLabel;\n    }\n\n    updateValues=(row : number, cell:number, value:string, colName : string)=>{\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n\n        }\n        //console.log(\"inside drawer\", value, \" col name:\", colName);\n        //the minus 2 is the offset for the extra columns checkbox and edit\n        for(let i =0; i < this.selectionSet.length; i++){\n            if(this.selectionSet[i].columnName === colName){\n                let myRow = this.selectionSet[i].row-2;\n                let myCell = this.selectionSet[i].cell-2;\n\n                //this.workingDataSet[ myRow-2][myCell-2].value = value;\n                const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n                if(this.props.targetDataSet === \"custom-data\"){\n                    //if it's custom we need to pass along the grid data package\n                    this.props.dataManager.setData(this.props.targetDataSet, updateSet, this.props.gridData);\n                }else{\n                    this.props.dataManager.setData(this.props.targetDataSet, updateSet);\n                }\n            }\n        }\n        this.setState({workingData : this.props.dataManager.getProductData()});\n    };\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n\n    //DRAWER RELATED\n    maximizeEditDrawer(){\n        this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n    }\n\n    closeEditDrawer(){\n        this.setState({\n            editDrawerOpen : false,\n            editDrawerMaximized : false,\n            focusedInput : {row:0, cell:0, editDrawerOpen:false}\n        });\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n        this.drawerFirstOpen = false;\n    }\n\n    shiftFocus(shiftIndex: number){\n        let inputs: HTMLCollection = document.getElementsByClassName(\"InputBox\");\n\n        if(inputs[0] != undefined){\n            if(shiftIndex === inputs.length-1){\n                // @ts-ignore\n                inputs[0].focus();\n                // @ts-ignore\n                inputs[0].select();\n            }\n        }\n    };\n\n    inputFocusAction=(row : number, cell:number)=>{\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n        }\n    };\n\n    getEditDrawer():ReactElement{\n\n        if(this.state.editDrawerOpen === false){\n            return(<></>);\n        }\n\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n        }\n\n        let inputs : ReactElement[] = [];\n        let selectedItems : iDataGridItem[] = [];\n\n        //Create list of selection items that need inputs (i.e. one input per column)\n        i: for(let i=0; i < this.selectionSet.length; i++){\n\n            j: for(let j=0; j < selectedItems.length; j++){\n                if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n                    continue i;\n                }\n            }\n            let row = this.selectionSet[i].row;\n            let cell = this.selectionSet[i].cell;\n            //TODO this needs to be genericized\n            //let productDataItem = catmanData.productData[row-2][cell-2];\n            let productDataItem = this.props.gridData[row-2][cell-2];\n            selectedItems.push(productDataItem);\n        }\n\n        //Store number of inputs for later use\n        this.drawerInputsLength = selectedItems.length;\n\n        //CREATE INPUTS for DRAWER\n\n        let checkValue = \"\";\n        for( let i=0; i < selectedItems.length; i++){\n            //check for duplicate values\n            //make a list of all the items that match column name\n            let sameColumn : iDataGridItem[] = [];\n            j: for(let j = 0; j < this.selectionSet.length; j++)\n            {\n                    if(selectedItems[i].columnName === this.selectionSet[j].columnName)\n                    {\n                        sameColumn.push( this.state.workingData[this.selectionSet[j].row-2][this.selectionSet[j].cell-2]);\n                    }\n            }\n            //go over each item in the selection set and compare its corresponding value\n\n            k: for(let k = 0; k < sameColumn.length; k++)\n            {\n                if(k == 0)\n                {\n                    checkValue = sameColumn[k].value;\n                    continue k;\n                }\n\n                if(checkValue == sameColumn[k].value)\n                {\n                    continue k;\n                }\n                else\n                {\n                    checkValue = \"--multiple values selected\";\n                    break k;\n                }\n\n            }\n            console.log(\"sameColumn\",sameColumn);\n            console.log(\"selectedItems\",selectedItems);\n            console.log(\"checkValue\",checkValue);\n\n            let input = (\n                <TextInput\n                    row={this.selectionSet[i].row}\n                    cell={this.selectionSet[i].cell}\n                    columnName={this.selectionSet[i].columnName}\n                    label={this.getColumnLabel( selectedItems[i].columnName )}\n                    currentValue={ checkValue}\n                    onChangeAction={this.updateValues}\n                    onFocusAction={this.inputFocusAction}\n                    onBlurActions={[ ()=>this.shiftFocus(i) ]}\n                />\n            );\n            inputs.push(input)\n        }\n\n        let maximize = (valueCheck : boolean)=>{\n            if(valueCheck === true){\n                return \"maximized\"\n            }else{\n                return \"catman-edit-default restored\"\n            }\n        };\n\n        let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return toolTipContent.maximizeDrawer();\n            }else{\n                return toolTipContent.restoreDrawer();\n            }\n        };\n\n        let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return \"icon-maximize\"\n            }else{\n                return \"icon-restore-btn\"\n            }\n        };\n\n\n        let drawer = (<></>);\n        if(this.state.editDrawerOpen === true && this.selectionSet.length > 0){\n            drawer = (\n                <>\n                    <StickyThing\n                        ref = {this.editDrawerRef}\n                        enterFromThisSide=\"bottom\"\n                        lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n                        animateIn={true}\n                        heightIncludeUnits=\"\"\n                        widthIncludeUnits={\"\"}\n                        stickyOpen={true}\n                        bgColor={\"#CECECE\"}\n                        doAnimation={true}\n                        toolBar=\"none\"\n                    >\n                        <div className={\"tool-bar\"}>\n                            <div></div>\n                            <div className=\"drawer-controls\">\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.maximizeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"tool-bar-btn icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.closeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={toolTipContent.closeDrawer()}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName=\"icon-close\"\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n\n                            </div>\n                        </div>\n                        <div className=\"drawer-edit-area\">\n                            {inputs}\n                        </div>\n                    </StickyThing>\n                </>\n            );\n        }\n        return drawer;\n    }\n\n    notifySelectionSetUpdate(){\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n        }\n\n        //TODO move this drawer logic out\n        if(this.selectionSet.length > 0){\n            this.setState({ editDrawerOpen : true } );\n        }else {\n            this.setState({ editDrawerOpen : false } );\n        }\n    }\n\n    //GRID MANAGEMENT\n    getGridArea(){\n        return (\n            <DataGrid\n                ref={this.dataGridRef}\n                data={this.state.workingData}\n                manageParentViews={()=>this.openEditDrawer()}\n                selectionCallback={this.manageSelectionSet}\n                notifySelections={()=>this.notifySelectionSetUpdate()}\n                columnsData={this.state.columnsData}\n                classes={this.conditionClasses()}\n                addAction={this.addAction}\n                focusedItem={this.state.focusedInput}\n                hasDetailsActionButton={this.props.gridHasDetailsButton}\n            />\n        )\n    }\n\n    manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string, row:number, cell:number )=>{\n        if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n            if(checkBoxSelections.length <= 1){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n            }else if(checkBoxSelections.length > 1 ){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n            }\n            this.initialized = true;\n        }else{\n            this.setState({footerOpen : false});\n        }\n\n        //this is a catch all for parent objects to do something when...\n        //... a selection has occurred\n\n        if(this.props.selectionActions != undefined){\n            for(let i=0; i < this.props.selectionActions.length; i++){\n                this.props.selectionActions[i]();\n            }\n        }\n\n        //manage focus events\n        //we'll use the row & cell data here to manage the focus widget\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen:true}})\n        }\n\n    };\n\n    conditionClasses(){\n        if(this.state.editDrawerOpen === true){\n            return \"drawer-open\";\n        }\n    }\n\n    addAction(addType:string){\n\n        switch (addType) {\n            case \"add-attribute\":\n\n                return(<></>);\n            case \"add-products\":\n\n                return(<></>);\n        }\n    }\n\n    switchToEditMode(){\n        if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n            this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n            this.openEditDrawer();\n            this.initialized = false;\n            this.setState({footerOpen : false})\n        }\n    }\n\n    // Grid\n    clearSelection(){\n        if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n    }\n    getCheckedRows(){\n        if(this.dataGridRef.current != undefined)\n        {\n            return this.dataGridRef.current._checkedRows\n        }\n    }\n    switchToEditModeFromCheckBoxMode(){\n        if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n            this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n            this.openEditDrawer();\n            this.initialized = false;\n            this.setState({footerOpen : false})\n        }\n    }\n\n    //Life Cycle\n    componentDidUpdate(): void {\n        let inputs : any = document.getElementsByClassName(\"InputBox\");\n\n        if(this.drawerFirstOpen === true ){\n            if(inputs[0] != undefined){\n                inputs[0].focus();\n                inputs[0].select();\n                this.drawerFirstOpen = false;\n            }\n        }\n    }\n\n    render(){\n        return(\n            <>\n                {this.getEditDrawer()}\n                {this.getGridArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}