{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\";\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectionSet = [];\n    this.numCols = void 0;\n    this.numRows = void 0;\n    this.startSelectionRow = void 0;\n    this.startSelectionCell = void 0;\n    this.cellRange = void 0;\n    this._checkedRows = [];\n\n    this.iconCheck = row => {\n      for (let i = 0; i < this.state.checkedRows.length; i++) {\n        if (row === this.state.checkedRows[i]) {\n          return \"checkbox-checked\";\n        }\n      }\n\n      return \"checkbox-unchecked\";\n    };\n\n    this.numCols = this.getNumColumns();\n    this.numRows = this.getNumRows();\n    this.state = {\n      selectionSet: [],\n      checkedRows: []\n    };\n    this.startSelectionRow = 0;\n    this.startSelectionCell = 0;\n    this.cellRange = {\n      startCell: 0,\n      endCell: 0,\n      startRow: 0,\n      endRow: 0\n    };\n  }\n\n  manageSelection(row, cell, clearSelection) {\n    if (clearSelection) {\n      this.selectionSet = [];\n    }\n\n    if (this.startSelectionRow > row) {\n      this.cellRange.startRow = row;\n      this.cellRange.endRow = this.startSelectionRow;\n    } else {\n      this.cellRange.startRow = this.startSelectionRow;\n      this.cellRange.endRow = row;\n    }\n\n    if (this.startSelectionCell > cell) {\n      this.cellRange.startCell = cell;\n      this.cellRange.endCell = this.startSelectionCell;\n    } else {\n      this.cellRange.startCell = this.startSelectionCell;\n      this.cellRange.endCell = cell;\n    }\n\n    if (row === this.startSelectionRow && cell === this.startSelectionCell) {\n      this.selectionSet.push({\n        row: row,\n        cell: cell,\n        selected: true\n      });\n    }\n\n    for (let i = this.cellRange.startRow; i < this.cellRange.endRow + 1; i++) {\n      for (let j = this.cellRange.startCell; j < this.cellRange.endCell + 1; j++) {\n        this.selectionSet.push({\n          row: i,\n          cell: j,\n          selected: true\n        });\n      }\n    } // handle single cell as start and end\n\n\n    if (this.selectionSet.length === 2) {\n      if (this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell) {\n        this.selectionSet.splice(1, 1);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet\n    });\n    console.log(\"seke/:\", this.state.selectionSet);\n\n    if (this.props.selectionCallback !== undefined && this.props.selectionCallback !== null) {\n      let selectedItems = [{\n        row: 0,\n        productFields: []\n      }];\n      this.props.selectionCallback(selectedItems);\n    }\n  }\n\n  checkSelected(row, cell) {\n    for (let i = 0; i < this.state.selectionSet.length; i++) {\n      if (this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell) {\n        return \"selected\";\n      }\n    } //if nothing is found, return false because it isn't selected\n\n\n    return \"\";\n  }\n\n  getNumColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return this.props.data[0].length;\n  }\n\n  getNumRows() {\n    return this.props.data.length;\n  }\n\n  getProductUniqueID(index) {\n    for (let j = 0; j < this.props.data[index].length; j++) {\n      if (this.props.data[index][j].column === \"uniqueID\") {\n        return this.props.data[index][j].value;\n      }\n    }\n  }\n\n  mouseDownAction(row, cell) {\n    this.startSelectionCell = cell;\n    this.startSelectionRow = row;\n  }\n\n  mouseUpAction(row, cell) {\n    this.manageSelection(row, cell, true);\n  }\n\n  manageCheckbox(row) {\n    //find if this number is in the list\n    let found = false;\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      if (this._checkedRows[i] === row) {\n        //if it is in the list remove it which unchecks\n        this._checkedRows.splice(i, 1);\n\n        this.setState({\n          checkedRows: this._checkedRows\n        });\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      this._checkedRows.push(row);\n\n      this.setState({\n        checkedRows: this._checkedRows\n      });\n    } //handle selecting the checked\n\n\n    this.selectionSet = [];\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      for (let j = 0; j < this.props.data[this._checkedRows[i]].length; j++) {\n        let selectedCell = {\n          row: this._checkedRows[i],\n          cell: j,\n          selected: true\n        };\n        this.selectionSet.push(selectedCell);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet\n    });\n    console.log(\"selection state: \", this.state.selectionSet);\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.props.data.length; i++) {\n      for (let j = 0; j < this.props.data[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell checkbox-main\",\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            OnClick: () => this.manageCheckbox(i),\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            classes: `${this.iconCheck(i)}`,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: `${this.iconCheck(i)}`,\n              width: \"0.5rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell\",\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: \"edit-cell\",\n          tileLabel: this.props.data[i][j].value,\n          mouseDownActions: [() => this.mouseDownAction(i + 1, j + 2)],\n          mouseUpActions: [() => this.props.manageParentViews(), () => this.mouseUpAction(i + 1, j + 2)],\n          selectedClass: this.checkSelected(i + 1, j + 2),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }\n        }));\n        cells.push(cell);\n\n        if (j === this.props.data[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"nav-link\",\n            navPath: `/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`,\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  render() {\n    let gridItems = [];\n    let columnHeaders = [];\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      style: {\n        gridTemplateColumns: `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","DataGrid","Component","constructor","props","selectionSet","numCols","numRows","startSelectionRow","startSelectionCell","cellRange","_checkedRows","iconCheck","row","i","state","checkedRows","length","getNumColumns","getNumRows","startCell","endCell","startRow","endRow","manageSelection","cell","clearSelection","push","selected","j","splice","setState","console","log","selectionCallback","undefined","selectedItems","productFields","checkSelected","data","getProductUniqueID","index","column","value","mouseDownAction","mouseUpAction","manageCheckbox","found","selectedCell","getGridItems","cells","gridColumn","gridRow","zIndex","mainNav","manageParentViews","render","gridItems","columnHeaders","constructedGrid","gridTemplateColumns","toString"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {selectedStateType, Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport camelcase from \"camelcase\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][];\n    manageParentViews : Function;\n    selectionCallback? : Function\n}\n\ninterface iSTATE {\n    selectionSet : selectionObject[];\n    checkedRows :number[];\n}\n\nexport type selectionObject = {\n    row : number;\n    cell : number;\n    selected : boolean;\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.numCols = this.getNumColumns();\n        this.numRows = this.getNumRows();\n        this.state = {\n            selectionSet : [],\n            checkedRows : []\n        };\n        this.startSelectionRow = 0;\n        this.startSelectionCell = 0;\n\n        this.cellRange = {\n            startCell : 0,\n            endCell : 0,\n            startRow : 0,\n            endRow : 0,\n        }\n    }\n    selectionSet : selectionObject[] = [];\n    numCols : number;\n    numRows: number;\n    startSelectionRow : number;\n    startSelectionCell : number;\n\n    cellRange : any;\n    _checkedRows : number[] = [];\n\n    manageSelection(row:number, cell:number, clearSelection : boolean){\n\n        if(clearSelection){\n            this.selectionSet = [];\n        }\n\n        if(this.startSelectionRow > row){\n            this.cellRange.startRow = row;\n            this.cellRange.endRow = this.startSelectionRow\n        }else{\n            this.cellRange.startRow = this.startSelectionRow;\n            this.cellRange.endRow = row;\n        }\n\n        if(this.startSelectionCell > cell){\n            this.cellRange.startCell = cell;\n            this.cellRange.endCell = this.startSelectionCell;\n        }else {\n            this.cellRange.startCell = this.startSelectionCell;\n            this.cellRange.endCell = cell;\n        }\n\n\n        if(row === this.startSelectionRow && cell === this.startSelectionCell){\n            this.selectionSet.push(\n                {\n                    row: row,\n                    cell: cell,\n                    selected : true\n                }\n            );\n        }\n\n        for( let i = this.cellRange.startRow; i < this.cellRange.endRow+1; i++){\n            for(let j= this.cellRange.startCell; j < this.cellRange.endCell+1; j++){\n                this.selectionSet.push(\n                    {\n                        row: i,\n                        cell: j,\n                        selected : true\n                    }\n                );\n            }\n        }\n\n        // handle single cell as start and end\n\n        if(this.selectionSet.length === 2){\n            if( this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell  ){\n                this.selectionSet.splice(1,1);\n            }\n        }\n\n\n        this.setState({selectionSet : this.selectionSet});\n        console.log(\"seke/:\", this.state.selectionSet);\n\n\n        if(this.props.selectionCallback !== undefined && this.props.selectionCallback !== null){\n           type iSelectedItems = { row : number,  productFields : iDataGridItem[][] };\n            let selectedItems : iSelectedItems[] = [ { row: 0, productFields : [] } ];\n\n            this.props.selectionCallback(selectedItems);\n        }\n    }\n\n    checkSelected(row:number, cell:number):selectedStateType{\n        for(let i=0; i<this.state.selectionSet.length; i++){\n            if( this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell){\n                return \"selected\";\n            }\n        }\n        //if nothing is found, return false because it isn't selected\n        return \"\";\n    }\n\n    getNumColumns(){\n        //TODO swap this out to calculating total normalized columns\n        return this.props.data[0].length;\n    }\n\n    getNumRows(){\n        return this.props.data.length;\n    }\n\n    getProductUniqueID(index : number){\n        for(let j=0; j < this.props.data[index].length; j++){\n            if(this.props.data[index][j].column === \"uniqueID\"){\n                return this.props.data[index][j].value;\n            }\n        }\n    }\n\n    mouseDownAction(row : number, cell:number){\n        this.startSelectionCell = cell;\n        this.startSelectionRow = row;\n    }\n\n    mouseUpAction(row:number, cell:number){\n        this.manageSelection(row, cell, true);\n    }\n\n    manageCheckbox(row : number){\n\n        //find if this number is in the list\n        let found : boolean = false;\n        for(let i=0; i < this._checkedRows.length; i++){\n            if(this._checkedRows[i] === row){\n                //if it is in the list remove it which unchecks\n                this._checkedRows.splice(i, 1);\n                this.setState({checkedRows : this._checkedRows});\n                found = true;\n            }\n        }\n        if(found === false){\n            this._checkedRows.push(row);\n            this.setState({checkedRows : this._checkedRows});\n        }\n\n\n        //handle selecting the checked\n        this.selectionSet = [];\n\n        for(let i=0; i < this._checkedRows.length; i++){\n            for(let j=0; j < this.props.data[this._checkedRows[i]].length; j++ ){\n                let selectedCell : selectionObject = {\n                    row : this._checkedRows[i],\n                    cell : j,\n                    selected : true\n                };\n                this.selectionSet.push(selectedCell);\n            }\n        }\n\n        this.setState({selectionSet : this.selectionSet});\n        console.log(\"selection state: \", this.state.selectionSet);\n    }\n\n    iconCheck = (row : number):string=>{\n        for(let i=0; i < this.state.checkedRows.length; i++){\n            if(row === this.state.checkedRows[i]){\n                return \"checkbox-checked\"\n            }\n        }\n        return \"checkbox-unchecked\"\n    };\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.props.data.length; i++){\n            for(let j=0; j < this.props.data[i].length; j++){\n                if(j === 0){\n\n                    cells.push(\n                        <div className=\"cell checkbox-main\" style={{gridColumn : j+1, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                OnClick={()=>this.manageCheckbox(i)}\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                classes={`${this.iconCheck(i)}`}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName={`${this.iconCheck(i)}`}\n                                        width=\"0.5rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className=\"cell\" style={{gridColumn : j+2, gridRow : i+1 }}>\n                        <Tile\n                            tileType=\"edit-cell\"\n                            tileLabel={this.props.data[i][j].value}\n                            mouseDownActions={\n                                [() => this.mouseDownAction(i+1,j+2)]\n                            }\n                            mouseUpActions={\n                                [\n                                    () => this.props.manageParentViews(),\n                                    () => this.mouseUpAction(i+1,j+2)\n                                ]\n                            }\n                            selectedClass={this.checkSelected(i+1, j+2)}\n                        />\n                    </div>\n                );\n\n                cells.push(cell);\n\n                if(j === this.props.data[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"nav-link\"\n                                navPath={`/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n            }\n        }\n\n\n\n        return cells;\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let gridItems : ReactElement[] = [];\n        let columnHeaders : ReactElement[]=[];\n\n        let constructedGrid : ReactElement = (\n            <>\n                <div className=\"data-grid\">\n                    <div className=\"viewport\" style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}>\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}