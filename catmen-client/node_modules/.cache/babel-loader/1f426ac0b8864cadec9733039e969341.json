{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/toggle-menu/toggle-component.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nexport class ToggleMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuType: \"nav\",\n      currentActive: 0\n    };\n  }\n\n  checkActive(index) {\n    if (index === this.state.currentActive) {\n      return \"active\";\n    }\n  }\n\n  actions(index) {\n    this.checkActive(index);\n\n    if (this.props.buttons[index].function != undefined) {\n      // @ts-ignore\n      this.props.buttons[index].function();\n    }\n  }\n\n  createButtonBar() {\n    let buttons = [];\n\n    for (let i = 0; i < this.props.buttons.length; i++) {\n      let newButton = /*#__PURE__*/React.createElement(AppButton, {\n        OnClick: () => this.pro,\n        buttonType: \"transparent-bg\",\n        tooltipType: \"custom\",\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 31\n          }\n        }, \"Tooltip\"),\n        classes: `${this.checkActive(i)}`,\n        iconCenter: this.props.buttons[i].icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 18\n        }\n      });\n      buttons.push(newButton);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toggle-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 16\n      }\n    }, buttons);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toggle-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, this.createButtonBar());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/toggle-menu/toggle-component.tsx"],"names":["React","AppButton","ToggleMenu","Component","constructor","props","state","menuType","currentActive","checkActive","index","actions","buttons","function","undefined","createButtonBar","i","length","newButton","pro","icon","push","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,SAAP,MAAsB,sBAAtB;AAyBA,OAAO,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAwD;AAC3DC,EAAAA,WAAW,CAACC,KAAD,EAAiB;AACxB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAG,KADF;AAETC,MAAAA,aAAa,EAAG;AAFP,KAAb;AAIH;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAgB;AACvB,QAAIA,KAAK,KAAK,KAAKJ,KAAL,CAAWE,aAAzB,EAAuC;AACnC,aAAO,QAAP;AACH;AACJ;;AAEDG,EAAAA,OAAO,CAACD,KAAD,EAAgB;AACnB,SAAKD,WAAL,CAAiBC,KAAjB;;AACA,QAAG,KAAKL,KAAL,CAAWO,OAAX,CAAmBF,KAAnB,EAA0BG,QAA1B,IAAsCC,SAAzC,EAAmD;AAC/C;AACA,WAAKT,KAAL,CAAWO,OAAX,CAAmBF,KAAnB,EAA0BG,QAA1B;AACH;AACJ;;AAEDE,EAAAA,eAAe,GAAe;AAC1B,QAAIH,OAAwB,GAAG,EAA/B;;AAEA,SAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,KAAKX,KAAL,CAAWO,OAAX,CAAmBK,MAApC,EAA4CD,CAAC,EAA7C,EAAgD;AAC3C,UAAIE,SAAS,gBACT,oBAAC,SAAD;AACI,QAAA,OAAO,EAAE,MAAI,KAAKC,GADtB;AAEI,QAAA,UAAU,EAAC,gBAFf;AAGI,QAAA,WAAW,EAAC,QAHhB;AAII,QAAA,OAAO,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJb;AAKI,QAAA,OAAO,EAAG,GAAE,KAAKV,WAAL,CAAiBO,CAAjB,CAAoB,EALpC;AAMI,QAAA,UAAU,EAAE,KAAKX,KAAL,CAAWO,OAAX,CAAmBI,CAAnB,EAAsBI,IANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAUAR,MAAAA,OAAO,CAACS,IAAR,CAAaH,SAAb;AACJ;;AACD,wBAAO;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCN,OAAnC,CAAP;AACH;;AAEDU,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKP,eAAL,EADL,CADJ;AAKH;;AAhD0D","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../button/app-button\";\n\n\nexport interface iToggleItem{\n    elements : ReactElement[]\n}\n\ninterface iPROPS {\n    buttons: iToggleMenuItem[];\n    containerClasses : string;\n}\n\ninterface iSTATE{\n    menuType : \"nav\";\n    currentActive : number;\n}\n\nexport interface iToggleMenuItem{\n    element : ReactElement;\n    label : string;\n    toggleItemType : \"nav\" | \"static\";\n    function? : Function;\n    icon? : ReactElement;\n}\n\nexport class ToggleMenu extends React.Component<iPROPS, iSTATE>{\n    constructor(props : iPROPS) {\n        super(props);\n        this.state = {\n            menuType : \"nav\",\n            currentActive : 0\n        }\n    }\n\n    checkActive(index : number){\n        if (index === this.state.currentActive){\n            return \"active\";\n        }\n    }\n\n    actions(index : number){\n        this.checkActive(index);\n        if(this.props.buttons[index].function != undefined){\n            // @ts-ignore\n            this.props.buttons[index].function();\n        }\n    }\n\n    createButtonBar():ReactElement{\n        let buttons : ReactElement[] = [];\n\n        for(let i=0; i < this.props.buttons.length; i++){\n             let newButton = (\n                 <AppButton\n                     OnClick={()=>this.pro}\n                     buttonType=\"transparent-bg\"\n                     tooltipType=\"custom\"\n                     tooltip={<div>Tooltip</div>}\n                     classes={`${this.checkActive(i)}`}\n                     iconCenter={this.props.buttons[i].icon}\n                 />\n             );\n             buttons.push(newButton);\n        }\n        return <div className=\"toggle-container\">{buttons}</div>;\n    }\n\n    render(){\n        return(\n            <div className=\"toggle-container\">\n                {this.createButtonBar()}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}