{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/wizards/create-product-group/add-variants-wizard.tsx\";\nimport * as React from \"react\";\nimport { toolTipContent } from \"../../_common/tool-tip-content/content-tool-tips\";\nimport { CatmanIcon } from \"../../../svg/icons/icons\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport { dataManagerMain } from \"../../../index\";\nimport { StandardTextInput } from \"../../../view-components/text-input/standard-text-input\";\nexport class AddVariantsWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numberOfVariants = 0;\n\n    this.getInputValue = (row, cell, value) => {\n      console.log(\"input value\", row, \" \", cell, \" \", value);\n      this.numberOfVariants = parseInt(value);\n    };\n\n    this.state = {\n      wizardPanel: \"start\"\n    };\n  }\n\n  addVariants() {\n    console.log(this.props.selectedCheckBoxes);\n    let newItem = [];\n\n    if (this.props.selectedCheckBoxes !== undefined) {\n      if (this.props.selectedCheckBoxes.length === 1) {\n        newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[this.props.selectedCheckBoxes[0]]));\n        let newItems = [];\n\n        for (let i = 0; i < this.numberOfVariants - 1; i++) {\n          newItems.push(JSON.parse(JSON.stringify(newItem)));\n        }\n\n        dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0, ...newItems);\n      } else {}\n    }\n\n    console.log(\"added variant\", dataManagerMain.productData);\n    this.props.manageModal();\n  }\n\n  wizardNavigation(panelName) {}\n\n  element() {\n    switch (this.state.wizardPanel) {\n      case \"closed\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"start\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"wizard-content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }\n        }, \"Add Products Variants\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"interaction-area\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }\n        }, \"Add\"), /*#__PURE__*/React.createElement(StandardTextInput, {\n          label: \"Number of variants\",\n          onChangeAction: this.getInputValue,\n          currentValue: \"1\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }\n        }, \"New blank product stubs as variants: \"), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Go\",\n          OnClick: () => this.addVariants(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.addBlankStubs(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add-invert\",\n            classes: \"reverse\",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footer-btn-bar catman-footer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Cancel\",\n          OnClick: () => {},\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCancel(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"cancel\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Continue\",\n          OnClick: () => this.wizardNavigation(\"staging-area\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }\n        })));\n\n      case \"upload-2\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  render() {\n    return this.element();\n  }\n\n} // export let uploadWizard : iWizardStep[] = [\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard  wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     }\n// ];","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/wizards/create-product-group/add-variants-wizard.tsx"],"names":["React","toolTipContent","CatmanIcon","AppButton","dataManagerMain","StandardTextInput","AddVariantsWizard","Component","constructor","props","numberOfVariants","getInputValue","row","cell","value","console","log","parseInt","state","wizardPanel","addVariants","selectedCheckBoxes","newItem","undefined","length","JSON","parse","stringify","productData","newItems","i","push","splice","manageModal","wizardNavigation","panelName","element","addBlankStubs","footerCancel","footerDelete","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {iWizardStep} from \"../../../view-components/wizard/wizard\";\nimport {ReactElement} from \"react\";\nimport {toolTipContent} from \"../../_common/tool-tip-content/content-tool-tips\";\nimport {CatmanIcon} from \"../../../svg/icons/icons\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport {DividerLine} from \"../../../view-components/divider-line/divider-line\";\nimport {TextInput} from \"../../../view-components/text-input/text-input\";\nimport {Illustration} from \"../../../svg/illustrations/illustrations\";\nimport {dataManagerMain} from \"../../../index\";\nimport {iDataGridItem} from \"../../../view-components/data-grid/data-types-for-data-grid\";\nimport {StandardTextInput} from \"../../../view-components/text-input/standard-text-input\";\n\ninterface iPROPS{\n    addAction : Function\n    selectedCheckBoxes? : number[];\n    groups : string[];\n    manageModal : Function;\n}\n\ninterface iSTATE{\n    wizardPanel : \"closed\" | \"start\" | \"upload-2\" | \"upload-3\";\n}\n\nexport class AddVariantsWizard extends React.Component<iPROPS, iSTATE>{\n\n    constructor(props:iPROPS) {\n        super(props);\n        this.state={\n            wizardPanel : \"start\"\n        }\n    }\n\n    numberOfVariants = 0;\n\n    addVariants(){\n        console.log(this.props.selectedCheckBoxes);\n        let newItem : iDataGridItem[] = [];\n        if(this.props.selectedCheckBoxes !== undefined){\n            if(this.props.selectedCheckBoxes.length === 1){\n                newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[ this.props.selectedCheckBoxes[0]]) );\n                let newItems = [];\n\n                for(let i=0; i < this.numberOfVariants-1; i++){\n                    newItems.push( JSON.parse(JSON.stringify(newItem)) );\n\n                }\n\n                dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0,...newItems);\n            }else{\n\n            }\n        }\n        console.log(\"added variant\",dataManagerMain.productData);\n        this.props.manageModal();\n    }\n\n    getInputValue = (row:number, cell:number, value:string )=>{\n        console.log(\"input value\", row, \" \", cell, \" \", value);\n        this.numberOfVariants = parseInt(value);\n    };\n\n    wizardNavigation(panelName : string){\n\n    }\n\n    element(){\n        switch (this.state.wizardPanel) {\n            case \"closed\":\n                return(<></>);\n            case \"start\":\n                return(\n                    <div className=\"wizard-content\">\n                        <h3>Add Products Variants</h3>\n                        <div className={\"interaction-area\"}>\n                            <p>Add</p>\n                            <StandardTextInput\n                                label={\"Number of variants\"}\n                                onChangeAction={this.getInputValue}\n                                currentValue={\"1\"}\n                            />\n                            <p>New blank product stubs as variants: </p>\n                            <AppButton\n                                buttonType={\"secondary-action\"}\n                                buttonLabel=\"Go\"\n                                OnClick={()=>this.addVariants()}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.addBlankStubs()}\n                                toolTipTimeOutInMS={10000}\n                                tooltipXOffset={0}\n                                tooltipYOffset={20}\n                                iconLeft={\n                                    <CatmanIcon\n                                        iconName=\"icon-add-invert\"\n                                        classes=\"reverse\"\n                                        height=\"100%\"\n                                        width=\"100%\"\n                                    />\n                                }\n                            />\n                        </div>\n\n                        <div className=\"footer-btn-bar catman-footer\">\n                            <AppButton\n                                buttonType=\"secondary-action\"\n                                buttonLabel=\"Cancel\"\n                                OnClick={ ()=>{} }\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.footerCancel()}\n                                toolTipTimeOutInMS={10000}\n                                iconLeft={\n                                    <CatmanIcon\n                                        iconName=\"cancel\"\n                                        classes=\" \"\n                                        height=\"100%\"\n                                        width=\"100%\"\n                                    />\n                                }\n                            />\n\n                            <AppButton\n                                buttonType={\"secondary-action\"}\n                                buttonLabel=\"Continue\"\n                                OnClick={()=>this.wizardNavigation(\"staging-area\")}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.footerDelete()}\n                                toolTipTimeOutInMS={10000}\n                                iconLeft={\n                                    <CatmanIcon\n                                        iconName=\"icon-delete\"\n                                        classes=\" \"\n                                        height=\"100%\"\n                                        width=\"100%\"\n                                    />\n                                }\n                            />\n\n                        </div>\n                    </div>\n                );\n            case \"upload-2\":\n                return(<></>)\n        }\n    }\n\n    render(){\n        return(this.element())\n    }\n}\n\n// export let uploadWizard : iWizardStep[] = [\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard  wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     }\n// ];"]},"metadata":{},"sourceType":"module"}