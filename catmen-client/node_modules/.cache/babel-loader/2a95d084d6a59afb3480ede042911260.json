{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx\";\nimport React from \"react\";\nimport { MainHeaderArea } from \"../_common/main-header-area/main-header-area\";\nimport { Navigation } from \"../../view-components/list-menu/intra-app-navigation\";\nimport { mainNavConfig } from \"../_catman-configuration/common-app-configuration\";\nimport { toolTipContent } from \"../tool-tip-content/content-tool-tips\";\nimport { TitleArea } from \"../../view-components/title-area/title-area\";\nimport { CardArea } from \"../../view-components/cards-area/card-area\";\nimport { Card } from \"../../view-components/card/card\";\nimport { dataManagerMain } from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport { SingleMediaDetailsView } from \"./media-details-view\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport { DataGridWithEditDrawer } from \"../../view-components/data-grid/data-grid-with-edit-drawer\";\nimport { ToggleMenu } from \"../../view-components/toggle-menu/toggle-component\";\nexport class MediaLibraryView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectedMediaIndex = 0;\n    this.dataGridRef = React.createRef();\n    this.editDrawerRef = React.createRef();\n    this.drawerFirstOpen = false;\n    this.columnDefs = void 0;\n    this.initialized = false;\n    this.selectionSet = [];\n    this.drawerInputsLength = 0;\n\n    this.manageMediaDetailsPage = mediaIndex => {\n      console.log(\"mediaIndex\", mediaIndex);\n      this.selectedMediaIndex = mediaIndex;\n      this.setState({\n        mediaDetailsOpen: !this.state.mediaDetailsOpen\n      });\n    };\n\n    this.updateValues = (row, cell, value, colName) => {\n      if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n        this.selectionSet = this.dataGridRef.current.selectionSet;\n        console.log(\"cat details view selection set: \", this.selectionSet);\n      }\n\n      console.log(\"inside drawer\", value, \" col name:\", colName); //the minus 2 is the offset for the extra columns checkbox and edit\n\n      for (let i = 0; i < this.selectionSet.length; i++) {\n        if (this.selectionSet[i].columnName === colName) {\n          let myRow = this.selectionSet[i].row - 2;\n          let myCell = this.selectionSet[i].cell - 2; //this.workingDataSet[ myRow-2][myCell-2].value = value;\n\n          const updateSet = {\n            row: myRow,\n            cell: myCell,\n            newData: value\n          };\n          this.props.dataManager.setData(\"media-data\", updateSet);\n        }\n      }\n\n      this.setState({\n        workingData: this.props.dataManager.getProductData()\n      });\n      console.log(\"working data set:\", this.state.workingData);\n    };\n\n    this.inputFocusAction = (row, cell) => {\n      //console.log(\"row: \", row, \" cell:\", cell);\n      if (this.state.editDrawerOpen === true) {\n        this.setState({\n          focusedInput: {\n            row: row,\n            cell: cell,\n            editDrawerOpen: this.state.editDrawerOpen\n          }\n        });\n      }\n    };\n\n    this.columnDefs = this.props.columnsData;\n    this.state = {\n      mediaDetailsOpen: false,\n      viewMode: \"grid-view\",\n      editDrawerOpen: false,\n      //TODO need to adjust data manager\n      columnsData: this.props.columnsData,\n      workingData: this.props.gridData,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      },\n      footerOpen: false,\n      footerMode: \"default\",\n      editDrawerMaximized: false\n    };\n  }\n\n  manageViewModes(desiredState) {\n    this.setState({\n      viewMode: desiredState\n    });\n  }\n\n  getMediaDetailsView() {\n    if (this.state.mediaDetailsOpen === true) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SingleMediaDetailsView, {\n        mediaData: dataManagerMain.getMediaObjectData()[this.selectedMediaIndex],\n        closeSingleMediaView: () => this.manageMediaDetailsPage(0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getCardArea() {\n    if (this.state.mediaDetailsOpen === false) {\n      return /*#__PURE__*/React.createElement(CardArea, {\n        containerClasses: \"catman-media-cards\",\n        cards: /*#__PURE__*/React.createElement(Card, {\n          cardType: \"media\",\n          mediaData: dataManagerMain.getMediaObjectData(),\n          getDetailsFunctions: this.manageMediaDetailsPage,\n          actionToolTip: toolTipContent.mediaRelatedTooltips(\"media-details\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  getColumnLabel(colName) {\n    //utility method for getting column data obj from\n    let columnLabel = \"\";\n\n    for (let i = 0; i < this.columnDefs.length; i++) {\n      if (this.columnDefs[i].columnName === colName) {\n        columnLabel = this.columnDefs[i].columnLabel;\n      }\n    }\n\n    return columnLabel;\n  }\n\n  openEditDrawer() {\n    this.drawerFirstOpen = true;\n    this.setState({\n      editDrawerOpen: true\n    });\n  } //DRAWER RELATED\n\n\n  maximizeEditDrawer() {\n    this.setState({\n      editDrawerMaximized: !this.state.editDrawerMaximized\n    });\n  }\n\n  closeEditDrawer() {\n    this.setState({\n      editDrawerOpen: false,\n      editDrawerMaximized: false,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      }\n    });\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.dataGridRef.current.clearSelection();\n    }\n\n    this.drawerFirstOpen = false;\n  }\n\n  //MANAGE GRID\n  //GRID MANAGEMENT\n  conditionClasses() {\n    if (this.state.editDrawerOpen === true) {\n      return \"drawer-open\";\n    }\n  }\n\n  getGridArea() {\n    return /*#__PURE__*/React.createElement(DataGridWithEditDrawer, {\n      gridData: dataManagerMain.getMediaDataForGrid(),\n      columnsData: dataManagerMain.getMediaColumnsForGrid(),\n      dataManager: dataManagerMain,\n      targetDataSet: \"media-data\",\n      gridHasDetailsButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    });\n  }\n\n  getContentArea() {\n    switch (this.state.viewMode) {\n      case \"grid-view\":\n        return this.getGridArea();\n\n      case \"cards-view\":\n        return this.getCardArea();\n    }\n  }\n\n  getToggleBar() {\n    //determine class\n    const selectedClass = stateName => {\n      if (stateName == this.state.viewMode) {\n        return \"active\";\n      } else {\n        return \"\";\n      }\n    };\n\n    let bla = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"grid-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 30\n        }\n      }, \"Tooltip\"),\n      classes: `${selectedClass(\"grid-view\")}`,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-list-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"cards-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"cards-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-card-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AppButton, {\n      OnClick: () => this.manageViewModes(\"mosaic-view\"),\n      buttonType: \"transparent-bg\",\n      tooltipType: \"custom\",\n      tooltip: toolTipContent.goBackWizard(),\n      classes: `${selectedClass(\"mosaic-view\")} `,\n      iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-mosaic-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    }));\n    let buttonBarConfig = [{\n      element: /*#__PURE__*/React.createElement(React.Fragment, null),\n      label: \"\",\n      toggleItemType: \"nav\",\n      function: () => this.manageViewModes(\"grid-view\"),\n      icon: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-list-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }\n      }),\n      toolTip: toolTipContent.goBackWizard(),\n      classes: \"\"\n    }, {\n      element: /*#__PURE__*/React.createElement(React.Fragment, null),\n      label: \"\",\n      toggleItemType: \"nav\",\n      function: () => this.manageViewModes(\"cards-view\"),\n      toolTip: toolTipContent.cardView(),\n      icon: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-card-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }\n      }),\n      classes: \"\"\n    }, {\n      element: /*#__PURE__*/React.createElement(React.Fragment, null),\n      label: \"\",\n      toggleItemType: \"nav\",\n      function: () => this.manageViewModes(\"mosaic-view\"),\n      toolTip: toolTipContent.goBackWizard(),\n      icon: /*#__PURE__*/React.createElement(CatmanIcon, {\n        iconName: `icon-mosaic-view`,\n        width: \"1rem\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }\n      }),\n      classes: \"\"\n    }];\n    let buttonBar = /*#__PURE__*/React.createElement(ToggleMenu, {\n      buttons: buttonBarConfig,\n      containerClasses: \"view-switcher\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }\n    });\n    return buttonBar;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MainHeaderArea, {\n      addItemAction: () => {},\n      sectionTitle: \"Media Library\",\n      mainButtonLabel: \"Add Media\",\n      navigationElement: /*#__PURE__*/React.createElement(Navigation, {\n        menuHelpStyle: \"panel\",\n        navElements: mainNavConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 40\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"base-grid-8 menu-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TitleArea, {\n      mainTitle: \"Media Library\",\n      subTitle: \"Manage media to describe your products\",\n      titleType: \"subtitle-above\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }\n    }), this.getToggleBar()), this.getContentArea(), this.getMediaDetailsView());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx"],"names":["React","MainHeaderArea","Navigation","mainNavConfig","toolTipContent","TitleArea","CardArea","Card","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGridWithEditDrawer","ToggleMenu","MediaLibraryView","Component","constructor","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","drawerFirstOpen","columnDefs","initialized","selectionSet","drawerInputsLength","manageMediaDetailsPage","mediaIndex","console","log","setState","mediaDetailsOpen","state","updateValues","row","cell","value","colName","current","undefined","i","length","columnName","myRow","myCell","updateSet","newData","dataManager","setData","workingData","getProductData","inputFocusAction","editDrawerOpen","focusedInput","columnsData","viewMode","gridData","footerOpen","footerMode","editDrawerMaximized","manageViewModes","desiredState","getMediaDetailsView","getMediaObjectData","getCardArea","mediaRelatedTooltips","getColumnLabel","columnLabel","openEditDrawer","maximizeEditDrawer","closeEditDrawer","clearSelection","conditionClasses","getGridArea","getMediaDataForGrid","getMediaColumnsForGrid","getContentArea","getToggleBar","selectedClass","stateName","bla","goBackWizard","buttonBarConfig","element","label","toggleItemType","function","icon","toolTip","classes","cardView","buttonBar","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAAQC,cAAR,QAA6B,8CAA7B;AACA,SAAQC,UAAR,QAAyB,sDAAzB;AACA,SAAQC,aAAR,QAA4B,mDAA5B;AACA,SAAQC,cAAR,QAA6B,uCAA7B;AACA,SAAQC,SAAR,QAAwB,6CAAxB;AACA,SAAQC,QAAR,QAAuB,4CAAvB;AACA,SAAQC,IAAR,QAAmB,iCAAnB;AACA,SAAQC,eAAR,QAA8B,aAA9B;AACA,OAAOC,WAAP,MAAwB,iDAAxB;AACA,SAAQC,sBAAR,QAAqC,sBAArC;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AASA,SAAQC,sBAAR,QAAqC,4DAArC;AACA,SAAyBC,UAAzB,QAA0C,oDAA1C;AA0BA,OAAO,MAAMC,gBAAN,SAA+Bf,KAAK,CAACgB,SAArC,CAA8D;AACjEC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;AADsB,SAgB1BC,kBAhB0B,GAgBI,CAhBJ;AAAA,SAiB1BC,WAjB0B,GAiBZpB,KAAK,CAACqB,SAAN,EAjBY;AAAA,SAkB1BC,aAlB0B,GAkBVtB,KAAK,CAACqB,SAAN,EAlBU;AAAA,SAmB1BE,eAnB0B,GAmBE,KAnBF;AAAA,SAqB1BC,UArB0B;AAAA,SAwB1BC,WAxB0B,GAwBF,KAxBE;AAAA,SA0B1BC,YA1B0B,GA0BS,EA1BT;AAAA,SA2B1BC,kBA3B0B,GA2BL,CA3BK;;AAAA,SA6B1BC,sBA7B0B,GA6BFC,UAAD,IAAuB;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;AACA,WAAKV,kBAAL,GAA0BU,UAA1B;AACA,WAAKG,QAAL,CAAc;AAACC,QAAAA,gBAAgB,EAAG,CAAC,KAAKC,KAAL,CAAWD;AAAhC,OAAd;AACH,KAjCyB;;AAAA,SA0F1BE,YA1F0B,GA0Fb,CAACC,GAAD,EAAeC,IAAf,EAA4BC,KAA5B,EAA0CC,OAA1C,KAA6D;AACtE,UAAG,KAAKnB,WAAL,CAAiBoB,OAAjB,IAA4B,IAA5B,IAAoC,KAAKpB,WAAL,CAAiBoB,OAAjB,IAA4BC,SAAnE,EAA8E;AAC1E,aAAKf,YAAL,GAAoB,KAAKN,WAAL,CAAiBoB,OAAjB,CAAyBd,YAA7C;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD,KAAKL,YAArD;AACH;;AACDI,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BO,KAA7B,EAAoC,YAApC,EAAkDC,OAAlD,EALsE,CAMtE;;AACA,WAAI,IAAIG,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAG,KAAKhB,YAAL,CAAkBiB,MAApC,EAA4CD,CAAC,EAA7C,EAAgD;AAC5C,YAAG,KAAKhB,YAAL,CAAkBgB,CAAlB,EAAqBE,UAArB,KAAoCL,OAAvC,EAA+C;AAC3C,cAAIM,KAAK,GAAG,KAAKnB,YAAL,CAAkBgB,CAAlB,EAAqBN,GAArB,GAAyB,CAArC;AACA,cAAIU,MAAM,GAAG,KAAKpB,YAAL,CAAkBgB,CAAlB,EAAqBL,IAArB,GAA0B,CAAvC,CAF2C,CAI3C;;AACA,gBAAMU,SAAsB,GAAG;AAAEX,YAAAA,GAAG,EAACS,KAAN;AAAaR,YAAAA,IAAI,EAACS,MAAlB;AAA0BE,YAAAA,OAAO,EAACV;AAAlC,WAA/B;AACA,eAAKpB,KAAL,CAAW+B,WAAX,CAAuBC,OAAvB,CAA+B,YAA/B,EAA6CH,SAA7C;AACH;AACJ;;AAED,WAAKf,QAAL,CAAc;AAACmB,QAAAA,WAAW,EAAG,KAAKjC,KAAL,CAAW+B,WAAX,CAAuBG,cAAvB;AAAf,OAAd;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAa,mBAAb,EAAkC,KAAKG,KAAL,CAAWiB,WAA7C;AACH,KA9GyB;;AAAA,SAsI1BE,gBAtI0B,GAsIT,CAACjB,GAAD,EAAeC,IAAf,KAA6B;AAC1C;AACA,UAAG,KAAKH,KAAL,CAAWoB,cAAX,KAA8B,IAAjC,EAAsC;AAClC,aAAKtB,QAAL,CAAc;AAACuB,UAAAA,YAAY,EAAG;AAAEnB,YAAAA,GAAG,EAAGA,GAAR;AAAaC,YAAAA,IAAI,EAAGA,IAApB;AAA0BiB,YAAAA,cAAc,EAAE,KAAKpB,KAAL,CAAWoB;AAArD;AAAhB,SAAd;AACH;AACJ,KA3IyB;;AAEtB,SAAK9B,UAAL,GAAkB,KAAKN,KAAL,CAAWsC,WAA7B;AACA,SAAKtB,KAAL,GAAW;AACPD,MAAAA,gBAAgB,EAAG,KADZ;AAEPwB,MAAAA,QAAQ,EAAG,WAFJ;AAGPH,MAAAA,cAAc,EAAG,KAHV;AAIP;AACAE,MAAAA,WAAW,EAAG,KAAKtC,KAAL,CAAWsC,WALlB;AAMPL,MAAAA,WAAW,EAAG,KAAKjC,KAAL,CAAWwC,QANlB;AAOPH,MAAAA,YAAY,EAAG;AAAEnB,QAAAA,GAAG,EAAC,CAAN;AAASC,QAAAA,IAAI,EAAC,CAAd;AAAiBiB,QAAAA,cAAc,EAAG;AAAlC,OAPR;AAQPK,MAAAA,UAAU,EAAG,KARN;AASPC,MAAAA,UAAU,EAAG,SATN;AAUPC,MAAAA,mBAAmB,EAAG;AAVf,KAAX;AAYH;;AAoBDC,EAAAA,eAAe,CAACC,YAAD,EAA0B;AACrC,SAAK/B,QAAL,CAAc;AAACyB,MAAAA,QAAQ,EAAGM;AAAZ,KAAd;AACH;;AAEDC,EAAAA,mBAAmB,GAAE;AACjB,QAAG,KAAK9B,KAAL,CAAWD,gBAAX,KAAgC,IAAnC,EAAwC;AACpC,0BACI,oBAAC,WAAD;AACI,QAAA,iBAAiB,EAAC,OADtB;AAEI,QAAA,iBAAiB,EAAE,cAFvB;AAGI,QAAA,SAAS,EAAE,IAHf;AAII,QAAA,kBAAkB,EAAC,OAJvB;AAKI,QAAA,iBAAiB,EAAE,OALvB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAE,SAPb;AAQI,QAAA,WAAW,EAAE,IARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUI,oBAAC,sBAAD;AACI,QAAA,SAAS,EAAEzB,eAAe,CAACyD,kBAAhB,GAAqC,KAAK9C,kBAA1C,CADf;AAEI,QAAA,oBAAoB,EAAE,MAAI,KAAKS,sBAAL,CAA4B,CAA5B,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVJ,CADJ;AAiBH;AACJ;;AAEDsC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKhC,KAAL,CAAWD,gBAAX,KAAgC,KAApC,EAA2C;AACvC,0BAAQ,oBAAC,QAAD;AACJ,QAAA,gBAAgB,EAAC,oBADb;AAEJ,QAAA,KAAK,eACD,oBAAC,IAAD;AACI,UAAA,QAAQ,EAAC,OADb;AAEI,UAAA,SAAS,EAAEzB,eAAe,CAACyD,kBAAhB,EAFf;AAGI,UAAA,mBAAmB,EAAE,KAAKrC,sBAH9B;AAII,UAAA,aAAa,EAAExB,cAAc,CAAC+D,oBAAf,CAAoC,eAApC,CAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AAWH,KAZD,MAYO;AACH,0BAAQ,yCAAR;AACH;AACJ;;AAEDC,EAAAA,cAAc,CAAC7B,OAAD,EAA2B;AACrC;AACA,QAAI8B,WAAW,GAAG,EAAlB;;AACA,SAAI,IAAI3B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKlB,UAAL,CAAgBmB,MAAnC,EAA2CD,CAAC,EAA5C,EAA+C;AAC3C,UAAG,KAAKlB,UAAL,CAAgBkB,CAAhB,EAAmBE,UAAnB,KAAkCL,OAArC,EAA6C;AACzC8B,QAAAA,WAAW,GAAG,KAAK7C,UAAL,CAAgBkB,CAAhB,EAAmB2B,WAAjC;AACH;AACJ;;AACD,WAAOA,WAAP;AACH;;AAwBDC,EAAAA,cAAc,GAAG;AACb,SAAK/C,eAAL,GAAuB,IAAvB;AACA,SAAKS,QAAL,CAAc;AAACsB,MAAAA,cAAc,EAAG;AAAlB,KAAd;AACH,GApHgE,CAsHjE;;;AACAiB,EAAAA,kBAAkB,GAAE;AAChB,SAAKvC,QAAL,CAAc;AAAC6B,MAAAA,mBAAmB,EAAG,CAAC,KAAK3B,KAAL,CAAW2B;AAAnC,KAAd;AACH;;AAEDW,EAAAA,eAAe,GAAE;AACb,SAAKxC,QAAL,CAAc;AACVsB,MAAAA,cAAc,EAAG,KADP;AAEVO,MAAAA,mBAAmB,EAAG,KAFZ;AAGVN,MAAAA,YAAY,EAAG;AAACnB,QAAAA,GAAG,EAAC,CAAL;AAAQC,QAAAA,IAAI,EAAC,CAAb;AAAgBiB,QAAAA,cAAc,EAAC;AAA/B;AAHL,KAAd;;AAKA,QAAG,KAAKlC,WAAL,CAAiBoB,OAAjB,IAA4B,IAA5B,IAAoC,KAAKpB,WAAL,CAAiBoB,OAAjB,IAA4BC,SAAnE,EAA6E;AACzE,WAAKrB,WAAL,CAAiBoB,OAAjB,CAAyBiC,cAAzB;AACH;;AACD,SAAKlD,eAAL,GAAuB,KAAvB;AACH;;AASD;AACA;AAEAmD,EAAAA,gBAAgB,GAAE;AACd,QAAG,KAAKxC,KAAL,CAAWoB,cAAX,KAA8B,IAAjC,EAAsC;AAClC,aAAO,aAAP;AACH;AACJ;;AAGDqB,EAAAA,WAAW,GAAE;AACT,wBACI,oBAAC,sBAAD;AACI,MAAA,QAAQ,EAAEnE,eAAe,CAACoE,mBAAhB,EADd;AAEI,MAAA,WAAW,EAAEpE,eAAe,CAACqE,sBAAhB,EAFjB;AAGI,MAAA,WAAW,EAAErE,eAHjB;AAII,MAAA,aAAa,EAAE,YAJnB;AAKI,MAAA,oBAAoB,EAAE,IAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAUH;;AAEDsE,EAAAA,cAAc,GAAE;AACZ,YAAQ,KAAK5C,KAAL,CAAWuB,QAAnB;AACI,WAAK,WAAL;AACI,eAAO,KAAKkB,WAAL,EAAP;;AACJ,WAAK,YAAL;AACI,eAAO,KAAKT,WAAL,EAAP;AAJR;AAMH;;AAEDa,EAAAA,YAAY,GAAE;AAEV;AACA,UAAMC,aAAa,GAAIC,SAAD,IAAyB;AAC7C,UAAGA,SAAS,IAAI,KAAK/C,KAAL,CAAWuB,QAA3B,EACA;AACI,eAAO,QAAP;AACH,OAHD,MAKA;AACI,eAAO,EAAP;AACH;AACF,KATD;;AAWA,QAAIyB,GAAG,gBACH;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,OAAO,EAAE,MAAI,KAAKpB,eAAL,CAAqB,WAArB,CADjB;AAEI,MAAA,UAAU,EAAC,gBAFf;AAGI,MAAA,WAAW,EAAC,QAHhB;AAII,MAAA,OAAO,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJb;AAKI,MAAA,OAAO,EAAG,GAAEkB,aAAa,CAAC,WAAD,CAAc,EAL3C;AAMI,MAAA,UAAU,eACN,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAG,gBADf;AAEI,QAAA,KAAK,EAAC,MAFV;AAGI,QAAA,MAAM,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAeI,oBAAC,SAAD;AACI,MAAA,OAAO,EAAE,MAAI,KAAKlB,eAAL,CAAqB,YAArB,CADjB;AAEI,MAAA,UAAU,EAAC,gBAFf;AAGI,MAAA,WAAW,EAAC,QAHhB;AAII,MAAA,OAAO,EAAE1D,cAAc,CAAC+E,YAAf,EAJb;AAKI,MAAA,OAAO,EAAG,GAAEH,aAAa,CAAC,YAAD,CAAe,GAL5C;AAMI,MAAA,UAAU,eACN,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAG,gBADf;AAEI,QAAA,KAAK,EAAC,MAFV;AAGI,QAAA,MAAM,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,eA6BI,oBAAC,SAAD;AACI,MAAA,OAAO,EAAE,MAAI,KAAKlB,eAAL,CAAqB,aAArB,CADjB;AAEI,MAAA,UAAU,EAAC,gBAFf;AAGI,MAAA,WAAW,EAAC,QAHhB;AAII,MAAA,OAAO,EAAG1D,cAAc,CAAC+E,YAAf,EAJd;AAKI,MAAA,OAAO,EAAG,GAAEH,aAAa,CAAC,aAAD,CAAgB,GAL7C;AAMI,MAAA,UAAU,eACN,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAG,kBADf;AAEI,QAAA,KAAK,EAAC,MAFV;AAGI,QAAA,MAAM,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BJ,CADJ;AA+CA,QAAII,eAAmC,GAAG,CACtC;AACIC,MAAAA,OAAO,eAAG,yCADd;AAEIC,MAAAA,KAAK,EAAG,EAFZ;AAGIC,MAAAA,cAAc,EAAG,KAHrB;AAIIC,MAAAA,QAAQ,EAAG,MAAI,KAAK1B,eAAL,CAAqB,WAArB,CAJnB;AAKI2B,MAAAA,IAAI,eACA,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAG,gBADf;AAEI,QAAA,KAAK,EAAC,MAFV;AAGI,QAAA,MAAM,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANR;AAYIC,MAAAA,OAAO,EAAGtF,cAAc,CAAC+E,YAAf,EAZd;AAaIQ,MAAAA,OAAO,EAAG;AAbd,KADsC,EAgBtC;AACIN,MAAAA,OAAO,eAAG,yCADd;AAEIC,MAAAA,KAAK,EAAG,EAFZ;AAGIC,MAAAA,cAAc,EAAG,KAHrB;AAIIC,MAAAA,QAAQ,EAAG,MAAI,KAAK1B,eAAL,CAAqB,YAArB,CAJnB;AAKI4B,MAAAA,OAAO,EAAGtF,cAAc,CAACwF,QAAf,EALd;AAMIH,MAAAA,IAAI,eACA,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAG,gBADf;AAEI,QAAA,KAAK,EAAC,MAFV;AAGI,QAAA,MAAM,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPR;AAaIE,MAAAA,OAAO,EAAG;AAbd,KAhBsC,EA+BtC;AACIN,MAAAA,OAAO,eAAG,yCADd;AAEIC,MAAAA,KAAK,EAAG,EAFZ;AAGIC,MAAAA,cAAc,EAAG,KAHrB;AAIIC,MAAAA,QAAQ,EAAG,MAAI,KAAK1B,eAAL,CAAqB,aAArB,CAJnB;AAKI4B,MAAAA,OAAO,EAAGtF,cAAc,CAAC+E,YAAf,EALd;AAMIM,MAAAA,IAAI,eACA,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAG,kBADf;AAEI,QAAA,KAAK,EAAC,MAFV;AAGI,QAAA,MAAM,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPR;AAaIE,MAAAA,OAAO,EAAG;AAbd,KA/BsC,CAA1C;AAgDA,QAAIE,SAAS,gBACT,oBAAC,UAAD;AACI,MAAA,OAAO,EAAET,eADb;AAEI,MAAA,gBAAgB,EAAC,eAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOA,WAAOS,SAAP;AAEH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI,uDACI,oBAAC,cAAD;AACI,MAAA,aAAa,EAAE,MAAI,CAAE,CADzB;AAEI,MAAA,YAAY,EAAC,eAFjB;AAGI,MAAA,eAAe,EAAC,WAHpB;AAII,MAAA,iBAAiB,eAAE,oBAAC,UAAD;AAAY,QAAA,aAAa,EAAC,OAA1B;AAAkC,QAAA,WAAW,EAAE3F,aAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAOI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,SAAS,EAAC,eADd;AAEI,MAAA,QAAQ,EAAC,wCAFb;AAGI,MAAA,SAAS,EAAC,gBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAMM,KAAK4E,YAAL,EANN,CAPJ,EAgBK,KAAKD,cAAL,EAhBL,EAiBK,KAAKd,mBAAL,EAjBL,CADJ;AAqBH;;AA5TgE","sourcesContent":["import React, {ReactElement} from \"react\";\nimport {MainHeaderArea} from \"../_common/main-header-area/main-header-area\";\nimport {Navigation} from \"../../view-components/list-menu/intra-app-navigation\";\nimport {mainNavConfig} from \"../_catman-configuration/common-app-configuration\";\nimport {toolTipContent} from \"../tool-tip-content/content-tool-tips\";\nimport {TitleArea} from \"../../view-components/title-area/title-area\";\nimport {CardArea} from \"../../view-components/cards-area/card-area\";\nimport {Card} from \"../../view-components/card/card\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"./media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../_catman-data-types\";\nimport {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\nimport {iColumn} from \"../../_catman-data-types\";\nimport {focusInputType} from \"../catalog-views/catalog-details/catalog-details-view\";\nimport {TextInput} from \"../../view-components/text-input/text-input\";\nimport {dataSetType} from \"../../data-components/data-manager/data-manager\";\nimport {dataAttributeColumns} from \"../../_sample-data/attributes-data-and-columns\";\nimport {DataGridWithEditDrawer} from \"../../view-components/data-grid/data-grid-with-edit-drawer\";\nimport {iToggleMenuItem, ToggleMenu} from \"../../view-components/toggle-menu/toggle-component\";\n\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\n\ninterface iPROPS {\n    message?: string;\n    gridData : iDataGridItem[][];\n    columnsData : iColumn[];\n    dataManager : DataManager;\n    targetDataSet : dataSetType;\n}\n\ninterface iSTATE{\n    mediaDetailsOpen : boolean;\n    viewMode : viewState;\n    editDrawerOpen : boolean;\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n    focusedInput : focusInputType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    editDrawerMaximized : boolean;\n}\n\nexport class MediaLibraryView extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.columnDefs = this.props.columnsData;\n        this.state={\n            mediaDetailsOpen : false,\n            viewMode : \"grid-view\",\n            editDrawerOpen : false,\n            //TODO need to adjust data manager\n            columnsData : this.props.columnsData,\n            workingData : this.props.gridData,\n            focusedInput : { row:0, cell:0, editDrawerOpen : false},\n            footerOpen : false,\n            footerMode : \"default\",\n            editDrawerMaximized : false\n        }\n    }\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n    drawerFirstOpen : boolean = false;\n    //COLUMN DEFINITIONS:\n    columnDefs : iColumn[];\n\n    //just for the fist launch of checkbox editing\n    initialized : boolean = false;\n\n    selectionSet : selectionObject[] = [];\n    drawerInputsLength = 0;\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        console.log(\"mediaIndex\", mediaIndex );\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({mediaDetailsOpen : !this.state.mediaDetailsOpen})\n    };\n\n    manageViewModes(desiredState : viewState){\n        this.setState({viewMode : desiredState});\n    }\n\n    getMediaDetailsView(){\n        if(this.state.mediaDetailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n    getCardArea() {\n        if (this.state.mediaDetailsOpen === false) {\n            return (<CardArea\n                containerClasses=\"catman-media-cards\"\n                cards={\n                    <Card\n                        cardType=\"media\"\n                        mediaData={dataManagerMain.getMediaObjectData()}\n                        getDetailsFunctions={this.manageMediaDetailsPage}\n                        actionToolTip={toolTipContent.mediaRelatedTooltips(\"media-details\")}\n                    />\n                }\n            />)\n        } else {\n            return (<></>)\n        }\n    }\n\n    getColumnLabel(colName : string) : string{\n        //utility method for getting column data obj from\n        let columnLabel = \"\";\n        for(let i = 0; i < this.columnDefs.length; i++){\n            if(this.columnDefs[i].columnName === colName){\n                columnLabel = this.columnDefs[i].columnLabel;\n            }\n        }\n        return columnLabel;\n    }\n\n    updateValues=(row : number, cell:number, value:string, colName : string)=>{\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n            console.log(\"cat details view selection set: \", this.selectionSet)\n        }\n        console.log(\"inside drawer\", value, \" col name:\", colName);\n        //the minus 2 is the offset for the extra columns checkbox and edit\n        for(let i =0; i < this.selectionSet.length; i++){\n            if(this.selectionSet[i].columnName === colName){\n                let myRow = this.selectionSet[i].row-2;\n                let myCell = this.selectionSet[i].cell-2;\n\n                //this.workingDataSet[ myRow-2][myCell-2].value = value;\n                const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n                this.props.dataManager.setData(\"media-data\", updateSet);\n            }\n        }\n\n        this.setState({workingData : this.props.dataManager.getProductData()});\n        console.log( \"working data set:\", this.state.workingData );\n    };\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n\n    //DRAWER RELATED\n    maximizeEditDrawer(){\n        this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n    }\n\n    closeEditDrawer(){\n        this.setState({\n            editDrawerOpen : false,\n            editDrawerMaximized : false,\n            focusedInput : {row:0, cell:0, editDrawerOpen:false}\n        });\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n        this.drawerFirstOpen = false;\n    }\n\n    inputFocusAction=(row : number, cell:number)=>{\n        //console.log(\"row: \", row, \" cell:\", cell);\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n        }\n    };\n\n    //MANAGE GRID\n    //GRID MANAGEMENT\n\n    conditionClasses(){\n        if(this.state.editDrawerOpen === true){\n            return \"drawer-open\";\n        }\n    }\n\n\n    getGridArea(){\n        return(\n            <DataGridWithEditDrawer\n                gridData={dataManagerMain.getMediaDataForGrid()}\n                columnsData={dataManagerMain.getMediaColumnsForGrid()}\n                dataManager={dataManagerMain}\n                targetDataSet={\"media-data\"}\n                gridHasDetailsButton={true}\n            />\n\n        );\n    }\n\n    getContentArea(){\n        switch (this.state.viewMode) {\n            case \"grid-view\":\n                return this.getGridArea();\n            case \"cards-view\":\n                return this.getCardArea();\n        }\n    }\n\n    getToggleBar(){\n\n        //determine class\n        const selectedClass = (stateName : viewState)=>{\n          if(stateName == this.state.viewMode)\n          {\n              return \"active\";\n          }\n          else\n          {\n              return \"\";\n          }\n        };\n\n        let bla = (\n            <div className=\"button-bar\">\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"grid-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={<div>Tooltip</div>}\n                    classes={`${selectedClass(\"grid-view\")}`}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-list-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"cards-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"cards-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-card-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"mosaic-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={ toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"mosaic-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-mosaic-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n            </div>\n        );\n\n        let buttonBarConfig : iToggleMenuItem[] = [\n            {\n                element : <></>,\n                label : \"\",\n                toggleItemType : \"nav\",\n                function : ()=>this.manageViewModes(\"grid-view\"),\n                icon : (\n                    <CatmanIcon\n                        iconName={`icon-list-view`}\n                        width=\"1rem\"\n                        height=\"100%\"\n                    />\n                ),\n                toolTip : toolTipContent.goBackWizard(),\n                classes : \"\"\n            },\n            {\n                element : <></>,\n                label : \"\",\n                toggleItemType : \"nav\",\n                function : ()=>this.manageViewModes(\"cards-view\"),\n                toolTip : toolTipContent.cardView(),\n                icon : (\n                    <CatmanIcon\n                        iconName={`icon-card-view`}\n                        width=\"1rem\"\n                        height=\"100%\"\n                    />\n                ),\n                classes : \"\"\n            },\n            {\n                element : <></>,\n                label : \"\",\n                toggleItemType : \"nav\",\n                function : ()=>this.manageViewModes(\"mosaic-view\"),\n                toolTip : toolTipContent.goBackWizard(),\n                icon : (\n                    <CatmanIcon\n                        iconName={`icon-mosaic-view`}\n                        width=\"1rem\"\n                        height=\"100%\"\n                    />\n                ),\n                classes : \"\"\n            }\n        ];\n\n        let buttonBar  = (\n            <ToggleMenu\n                buttons={buttonBarConfig}\n                containerClasses=\"view-switcher\"\n            />\n        );\n\n        return buttonBar;\n\n    }\n\n    render(){\n        return(\n            <>\n                <MainHeaderArea\n                    addItemAction={()=>{}}\n                    sectionTitle=\"Media Library\"\n                    mainButtonLabel=\"Add Media\"\n                    navigationElement={<Navigation menuHelpStyle=\"panel\" navElements={mainNavConfig} />}\n                />\n                <div className=\"base-grid-8 menu-area\">\n                    <TitleArea\n                        mainTitle=\"Media Library\"\n                        subTitle=\"Manage media to describe your products\"\n                        titleType=\"subtitle-above\"\n                    />\n                     {this.getToggleBar()}\n                </div>\n\n                {this.getContentArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}