{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/data-components/data-manager/data-manager.tsx\";\nimport * as React from \"react\";\nimport { toolTipContent } from \"../../views/tool-tip-content/content-tool-tips\";\nimport { mediaLibraryData, mediaLibraryDataMediaObjects } from \"../../_sample-data/media-library\";\nimport { dataAttributesLibrary } from \"../../_sample-data/attributes-data-and-columns\";\nimport { attributeGroupsLibrary, attributeGroupsLibraryColumns } from \"../../_sample-data/attribute-groups-library\";\nexport class DataManager {\n  constructor(productData, customGridData) {\n    this.productData = void 0;\n    this.customGridData = void 0;\n    this.productData = productData;\n    this.customGridData = customGridData;\n  } //Main genericized methods\n\n\n  setData(targetDataSet, updatePackage, customGridData) {\n    console.log(\"setData, updatePackag:\", updatePackage, \"target data type: \", targetDataSet);\n\n    switch (targetDataSet) {\n      case \"media-data\":\n        this.setMediaData(updatePackage);\n        break;\n\n      case \"product-data\":\n        this.setProductData(updatePackage);\n        break;\n\n      case \"attributes-data\":\n        console.log(\"attributes-data\", dataAttributesLibrary);\n        this.setAttributesData(updatePackage);\n        break;\n\n      case \"attribute-groups-data\":\n        this.setAttributeGroupsData(updatePackage);\n        break;\n\n      case \"custom-data\":\n        console.log(\"attributes-data\", dataAttributesLibrary);\n        this.setCustomData(updatePackage, customGridData);\n        break;\n    }\n  }\n\n  getData(targetDataSet) {\n    switch (targetDataSet) {\n      case \"media-data\":\n        return this.getMediaObjectData();\n\n      case \"media-grid-data\":\n        return this.getMediaDataForGrid();\n\n      case \"product-grid-data\":\n        return this.getProductData();\n    }\n  }\n\n  getProductColumns() {\n    let testMenu = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"#cecece\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, \"Menu\");\n    return [{\n      validationAction: [],\n      columnName: \"uniqueID\",\n      columnLabel: \" \",\n      columnMenu: testMenu,\n      columnType: \"hidden\",\n      control: \"hidden\",\n      tooltipType: \"custom\",\n      toolTip: \"this is non-editable unique id\"\n    }, {\n      validationAction: [],\n      columnName: \"ReferenceImage\",\n      columnLabel: \"Reference Image\",\n      columnMenu: testMenu,\n      columnType: \"standard\",\n      control: \"media\",\n      tooltipType: \"custom\",\n      toolTip: toolTipContent.columnHeaderToolTips(\"ReferenceImage\")\n    }, {\n      validationAction: [\"no-duplicates\", \"required\"],\n      columnName: \"PartNumber\",\n      columnLabel: \"Part Number \",\n      columnMenu: testMenu,\n      columnType: \"required\",\n      control: \"text-input\",\n      tooltipType: \"custom\",\n      toolTip: toolTipContent.columnHeaderToolTips(\"PartNumber\")\n    }, {\n      validationAction: [],\n      columnName: \"ProductGroup\",\n      columnLabel: \"Product Group\",\n      columnMenu: testMenu,\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"custom\",\n      toolTip: toolTipContent.columnHeaderToolTips(\"ProductGroup\")\n    }, {\n      validationAction: [],\n      columnName: \"ProductName\",\n      columnLabel: \"Product Name\",\n      columnMenu: testMenu,\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"custom\",\n      toolTip: toolTipContent.columnHeaderToolTips(\"ProductName\")\n    }, {\n      validationAction: [],\n      columnName: \"Class\",\n      columnLabel: \"Class\",\n      columnMenu: testMenu,\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"custom\",\n      toolTip: toolTipContent.columnHeaderToolTips(\"Class\")\n    }, {\n      validationAction: [],\n      columnName: \"ProductType\",\n      columnLabel: \"Product Type\",\n      columnMenu: testMenu,\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"OverallDimensions\",\n      columnLabel: \"Overall Dimensions\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"OverallDepth\",\n      columnLabel: \"Overall Depth\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"OverallHeight\",\n      columnLabel: \"Overall Height\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"OverallLength\",\n      columnLabel: \"Overall Length\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"Seat\",\n      columnLabel: \"Seat\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"ArmHeightFloorToArm\",\n      columnLabel: \"Arm Height - Floor to Arm\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"BackHeightSeatToTopOfBack\",\n      columnLabel: \"Back Height - Seat to Top of Back\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"FullyReclinedDepthFrontToBack\",\n      columnLabel: \"Fully Reclined Depth - Front to Back\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"LegHeightTopToBottom\",\n      columnLabel: \"Leg Height - Top to Bottom\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"ClearanceFromFloorToBottomOfSofa\",\n      columnLabel: \"Clearance from Floor to Bottom of Sofa\",\n      columnMenu: testMenu,\n      columnType: \"user-gen\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }];\n  }\n\n  getProductData() {\n    return this.productData;\n  } //ATTRIBUTES\n\n\n  getAttributesData() {\n    return dataAttributesLibrary;\n  } //ATTRIBUTE GROUPS\n\n\n  getAttributeGroupsData() {\n    return attributeGroupsLibrary;\n  }\n\n  getAttributeGroupsColumns() {\n    return attributeGroupsLibraryColumns;\n  }\n\n  setAttributeGroupsData(updatePackage) {\n    attributeGroupsLibrary[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n    console.log(\"setAttributesData\", attributeGroupsLibrary);\n  }\n\n  setAttributesData(updatePackage) {\n    dataAttributesLibrary[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n    console.log(\"setAttributesData\", dataAttributesLibrary);\n  } //update package is type iUpdateSet = {row : number, cell : number, newData:string}\n\n\n  setProductData(updatePackage) {\n    this.productData[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n  }\n\n  setCustomData(updatePackage, customGridData) {\n    if (customGridData != undefined) {\n      customGridData[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n    }\n  }\n\n  setMediaData(updatePackage) {\n    console.log(\"update package: \", updatePackage);\n    mediaLibraryData[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n  } //CONVERT DATAGRID OBJECTS INTO MEDIA GRID OBJECTS\n\n\n  getMediaObjectData() {\n    //TODO replace this with a proper data service\n    let mediaObjects = [];\n    let mediaGridObjects = this.getMediaDataForGrid();\n\n    const findColVal = (row, colName) => {\n      for (let i = 0; i < mediaGridObjects[row].length; i++) {\n        if (mediaGridObjects[row][i].columnName == colName) {\n          return mediaGridObjects[row][i].value;\n        }\n      }\n\n      return \"\";\n    };\n\n    for (let i = 0; i < mediaGridObjects.length; i++) {\n      let mediaObject = {\n        id: findColVal(i, \"uniqueID\"),\n        mediaPath: findColVal(i, \"mediaPath\"),\n        mediaName: findColVal(i, \"mediaName\"),\n        description: findColVal(i, \"description\"),\n        shotType: findColVal(i, \"shotType\"),\n        productAssociations: findColVal(i, \"productAssociations\"),\n        mediaAssociations: findColVal(i, \"mediaAssociations\"),\n        classesAssociated: findColVal(i, \"classesAssociated\"),\n        resolution: findColVal(i, \"resolution\")\n      };\n      mediaObjects.push(mediaObject);\n    }\n\n    return mediaLibraryDataMediaObjects;\n  }\n\n  getMediaColumnsForGrid() {\n    let mediaColumns = [{\n      validationAction: [],\n      columnName: \"uniqueId\",\n      columnLabel: \"Unique ID\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"hidden\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"mediaPath\",\n      columnLabel: \"Media Path\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"mediaName\",\n      columnLabel: \"Media Name\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"description\",\n      columnLabel: \"Description\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"shotType\",\n      columnLabel: \"Shot Type\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"productAssociations\",\n      columnLabel: \"Product Associations\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"mediaAssociations\",\n      columnLabel: \"Media Associations\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"classesAssociated\",\n      columnLabel: \"Classes Associated\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }, {\n      validationAction: [],\n      columnName: \"resolution\",\n      columnLabel: \"Resolution\",\n      columnMenu: /*#__PURE__*/React.createElement(React.Fragment, null),\n      columnType: \"standard\",\n      control: \"text-input\",\n      tooltipType: \"basic\",\n      toolTip: \"\"\n    }];\n    return mediaColumns;\n  }\n\n  getMediaDataForGrid() {\n    return mediaLibraryData;\n  }\n\n  addToProductGroup() {\n    let stub = this.productData[0];\n    this.productData.push(stub);\n  }\n\n  getGroups() {\n    let groupsAll = []; //first walk is extract all the product groups, then we'll remove duplicates\n\n    i: for (let i = 0; i < this.productData.length; i++) {\n      for (let j = 0; j < this.productData[i].length; j++) {\n        if (this.productData[i][j].columnName === \"ProductGroup\") {\n          groupsAll.push(this.productData[i][j].value);\n          continue i;\n        }\n      }\n    } //second walk over groups to remove duplicates\n\n\n    let finalGroups = [];\n\n    i: for (let i = 0; i < groupsAll.length; i++) {\n      if (i === 0) {\n        finalGroups.push(groupsAll[i]);\n        continue i;\n      }\n\n      for (let j = 0; j < finalGroups.length; j++) {\n        if (finalGroups[j] === groupsAll[i]) {\n          continue i;\n        }\n\n        if (j === finalGroups.length - 1) {\n          finalGroups.push(groupsAll[i]);\n        }\n      }\n    }\n\n    console.log(finalGroups);\n    return finalGroups;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/data-components/data-manager/data-manager.tsx"],"names":["React","toolTipContent","mediaLibraryData","mediaLibraryDataMediaObjects","dataAttributesLibrary","attributeGroupsLibrary","attributeGroupsLibraryColumns","DataManager","constructor","productData","customGridData","setData","targetDataSet","updatePackage","console","log","setMediaData","setProductData","setAttributesData","setAttributeGroupsData","setCustomData","getData","getMediaObjectData","getMediaDataForGrid","getProductData","getProductColumns","testMenu","backgroundColor","validationAction","columnName","columnLabel","columnMenu","columnType","control","tooltipType","toolTip","columnHeaderToolTips","getAttributesData","getAttributeGroupsData","getAttributeGroupsColumns","row","cell","value","newData","undefined","mediaObjects","mediaGridObjects","findColVal","colName","i","length","mediaObject","id","mediaPath","mediaName","description","shotType","productAssociations","mediaAssociations","classesAssociated","resolution","push","getMediaColumnsForGrid","mediaColumns","addToProductGroup","stub","getGroups","groupsAll","j","finalGroups"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {iDataGridItem} from \"../../_catman-data-types\";\nimport {iColumn} from \"../../_catman-data-types\";\nimport {toolTipContent} from \"../../views/tool-tip-content/content-tool-tips\";\nimport {mediaLibraryData, mediaLibraryDataMediaObjects, mediaObject, shotType} from \"../../_sample-data/media-library\";\nimport {dataAttributesLibrary, standardAttributes} from \"../../_sample-data/attributes-data-and-columns\";\nimport {attributeGroupsLibrary, attributeGroupsLibraryColumns} from \"../../_sample-data/attribute-groups-library\";\n\nexport type dataSetType =\n    | \"media-data\"\n    | \"media-grid-data\"\n    | \"product-data\"\n    | \"product-grid-data\"\n    | \"attributes-data\"\n    | \"custom-data\"\n    | \"attribute-groups-data\";\n\nexport type validationActions = \"required\" | \"custom\" | \"no-duplicates\";\n\ninterface iDataManager {\n    productData : iDataGridItem[][];\n}\n\nexport type iUpdateSet = {row : number, cell : number, newData:string}\n\nexport class DataManager implements iDataManager{\n    productData : iDataGridItem[][];\n    customGridData : iDataGridItem[][] | undefined;\n\n    constructor(productData : iDataGridItem[][], customGridData? : iDataGridItem[][] | undefined ) {\n        this.productData = productData;\n         this.customGridData = customGridData;\n    }\n    //Main genericized methods\n    setData(targetDataSet : dataSetType, updatePackage : iUpdateSet, customGridData? : iDataGridItem[][]){\n        console.log(\"setData, updatePackag:\",  updatePackage, \"target data type: \", targetDataSet);\n        switch (targetDataSet) {\n            case \"media-data\":\n                this.setMediaData(updatePackage);\n                break;\n            case \"product-data\":\n                this.setProductData(updatePackage);\n                break;\n            case \"attributes-data\":\n                console.log(\"attributes-data\", dataAttributesLibrary);\n                this.setAttributesData(updatePackage);\n                break;\n\n            case \"attribute-groups-data\":\n                this.setAttributeGroupsData(updatePackage);\n                break;\n\n            case \"custom-data\":\n                console.log(\"attributes-data\", dataAttributesLibrary);\n                this.setCustomData(updatePackage, customGridData);\n                break;\n        }\n    }\n\n    getData(targetDataSet:dataSetType){\n        switch (targetDataSet) {\n            case \"media-data\":\n                return this.getMediaObjectData();\n            case \"media-grid-data\":\n                return this.getMediaDataForGrid();\n            case \"product-grid-data\":\n                return this.getProductData();\n        }\n    }\n\n\n\n    getProductColumns():iColumn[]{\n        let testMenu = (<div style={{backgroundColor : \"#cecece\"}}>Menu</div>);\n\n        return [\n            {\n                validationAction : [],\n                columnName : \"uniqueID\",\n                columnLabel : \" \",\n                columnMenu : testMenu,\n                columnType : \"hidden\",\n                control : \"hidden\",\n                tooltipType : \"custom\",\n                toolTip : \"this is non-editable unique id\"\n            },\n            {\n                validationAction : [],\n                columnName : \"ReferenceImage\",\n                columnLabel : \"Reference Image\",\n                columnMenu : testMenu,\n                columnType : \"standard\",\n                control : \"media\",\n                tooltipType : \"custom\",\n                toolTip : toolTipContent.columnHeaderToolTips(\"ReferenceImage\")\n            },\n            {\n                validationAction : [\"no-duplicates\", \"required\"],\n                columnName : \"PartNumber\",\n                columnLabel : \"Part Number \",\n                columnMenu : testMenu,\n                columnType : \"required\",\n                control : \"text-input\",\n                tooltipType : \"custom\",\n                toolTip : toolTipContent.columnHeaderToolTips(\"PartNumber\")\n            },\n            {\n                validationAction : [],\n                columnName : \"ProductGroup\",\n                columnLabel : \"Product Group\",\n                columnMenu : testMenu,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"custom\",\n                toolTip : toolTipContent.columnHeaderToolTips(\"ProductGroup\")\n            },\n            {\n                validationAction : [],\n                columnName : \"ProductName\",\n                columnLabel : \"Product Name\",\n                columnMenu : testMenu,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"custom\",\n                toolTip : toolTipContent.columnHeaderToolTips(\"ProductName\")\n            },\n            {\n                validationAction : [],\n                columnName : \"Class\",\n                columnLabel : \"Class\",\n                columnMenu : testMenu,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"custom\",\n                toolTip : toolTipContent.columnHeaderToolTips(\"Class\")\n            },\n            {\n                validationAction : [],\n                columnName : \"ProductType\",\n                columnLabel : \"Product Type\",\n                columnMenu : testMenu,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"OverallDimensions\",\n                columnLabel : \"Overall Dimensions\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"OverallDepth\",\n                columnLabel : \"Overall Depth\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"OverallHeight\",\n                columnLabel : \"Overall Height\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"OverallLength\",\n                columnLabel : \"Overall Length\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"Seat\",\n                columnLabel : \"Seat\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"ArmHeightFloorToArm\",\n                columnLabel : \"Arm Height - Floor to Arm\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"BackHeightSeatToTopOfBack\",\n                columnLabel : \"Back Height - Seat to Top of Back\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"FullyReclinedDepthFrontToBack\",\n                columnLabel : \"Fully Reclined Depth - Front to Back\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"LegHeightTopToBottom\",\n                columnLabel : \"Leg Height - Top to Bottom\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"ClearanceFromFloorToBottomOfSofa\",\n                columnLabel : \"Clearance from Floor to Bottom of Sofa\",\n                columnMenu : testMenu,\n                columnType : \"user-gen\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            }\n        ]\n    }\n\n    getProductData():iDataGridItem[][]{\n        return this.productData;\n    }\n\n    //ATTRIBUTES\n    getAttributesData():iDataGridItem[][]{\n        return dataAttributesLibrary;\n    }\n\n    //ATTRIBUTE GROUPS\n    getAttributeGroupsData():iDataGridItem[][]{\n        return attributeGroupsLibrary;\n    }\n    getAttributeGroupsColumns():iColumn[]{\n        return attributeGroupsLibraryColumns;\n    }\n\n    setAttributeGroupsData(updatePackage : iUpdateSet){\n        attributeGroupsLibrary[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n        console.log(\"setAttributesData\", attributeGroupsLibrary);\n    }\n\n    setAttributesData(updatePackage : iUpdateSet){\n        dataAttributesLibrary[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n        console.log(\"setAttributesData\", dataAttributesLibrary);\n    }\n\n    //update package is type iUpdateSet = {row : number, cell : number, newData:string}\n    setProductData(updatePackage : iUpdateSet){\n        this.productData[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n    }\n\n    setCustomData(updatePackage : iUpdateSet, customGridData? : iDataGridItem[][]){\n        if(customGridData != undefined){\n            customGridData[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n        }\n    }\n\n    setMediaData(updatePackage : iUpdateSet){\n        console.log(\"update package: \", updatePackage);\n        mediaLibraryData[updatePackage.row][updatePackage.cell].value = updatePackage.newData;\n    }\n\n\n\n//CONVERT DATAGRID OBJECTS INTO MEDIA GRID OBJECTS\n    getMediaObjectData():mediaObject[]{\n        //TODO replace this with a proper data service\n\n        let mediaObjects : mediaObject[] = [];\n        let mediaGridObjects : iDataGridItem[][] = this.getMediaDataForGrid();\n\n        const findColVal = ( row : number, colName : string ):string =>{\n            for(let i=0; i < mediaGridObjects[row].length; i++){\n                if(mediaGridObjects[row][i].columnName == colName){\n                   return mediaGridObjects[row][i].value;\n                }\n            }\n\n            return \"\";\n        };\n\n        for(let i = 0; i < mediaGridObjects.length; i++ ){\n            let mediaObject : mediaObject = {\n                id: findColVal(i, \"uniqueID\"),\n                mediaPath : findColVal(i,\"mediaPath\"),\n                mediaName : findColVal(i, \"mediaName\"),\n                description : findColVal(i, \"description\"),\n                shotType : findColVal(i, \"shotType\") as shotType,\n                productAssociations : findColVal(i, \"productAssociations\"),\n                mediaAssociations : findColVal(i, \"mediaAssociations\"),\n                classesAssociated : findColVal(i, \"classesAssociated\"),\n                resolution : findColVal(i, \"resolution\")\n            };\n\n            mediaObjects.push(mediaObject);\n        }\n        return mediaLibraryDataMediaObjects;\n    }\n\n    getMediaColumnsForGrid():iColumn[]{\n\n        let mediaColumns : iColumn[] = [\n            {\n                validationAction : [],\n                columnName : \"uniqueId\",\n                columnLabel : \"Unique ID\",\n                columnMenu : <></>,\n                columnType : \"hidden\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"mediaPath\",\n                columnLabel : \"Media Path\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"mediaName\",\n                columnLabel : \"Media Name\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"description\",\n                columnLabel : \"Description\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"shotType\",\n                columnLabel : \"Shot Type\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"productAssociations\",\n                columnLabel : \"Product Associations\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"mediaAssociations\",\n                columnLabel : \"Media Associations\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"classesAssociated\",\n                columnLabel : \"Classes Associated\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n            {\n                validationAction : [],\n                columnName : \"resolution\",\n                columnLabel : \"Resolution\",\n                columnMenu : <></>,\n                columnType : \"standard\",\n                control : \"text-input\",\n                tooltipType : \"basic\",\n                toolTip : \"\"\n            },\n\n\n        ];\n\n        return mediaColumns;\n\n    }\n\n    getMediaDataForGrid():iDataGridItem[][]{\n\n        return mediaLibraryData;\n    }\n\n    addToProductGroup(){\n        let stub = this.productData[0];\n        this.productData.push(stub);\n    }\n\n    getGroups():string[]{\n        let groupsAll : string[] = [];\n\n        //first walk is extract all the product groups, then we'll remove duplicates\n        i: for( let i=0; i < this.productData.length; i++){\n                for(let j=0; j < this.productData[i].length; j++){\n                    if(this.productData[i][j].columnName === \"ProductGroup\"){\n                        groupsAll.push(this.productData[i][j].value);\n                        continue i;\n                    }\n                }\n            }\n\n        //second walk over groups to remove duplicates\n        let finalGroups = [];\n        i: for(let i=0; i < groupsAll.length; i++){\n            if(i===0){\n                finalGroups.push(groupsAll[i]);\n                continue i;\n            }\n\n            for(let j=0; j < finalGroups.length; j++){\n                if( finalGroups[j] === groupsAll[i]){\n                    continue i;\n                }\n                if( j === finalGroups.length - 1){\n                    finalGroups.push(groupsAll[i])\n                }\n            }\n        }\n\n        console.log(finalGroups);\n            return finalGroups;\n    }\n\n\n\n}"]},"metadata":{},"sourceType":"module"}