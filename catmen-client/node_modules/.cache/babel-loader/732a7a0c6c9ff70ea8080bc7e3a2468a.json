{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/catalog-views/catalog-details/catalog-details-view.tsx\";\nimport * as React from \"react\";\nimport { CatmanIcon } from \"../../../svg/icons/icons\";\nimport { DataGrid } from \"../../../view-components/data-grid/data-grid\";\nimport { catmanData } from \"../../../_sample-data/products-data\";\nimport { TitleArea } from \"../../../view-components/title-area/title-area\";\nimport StickyThing from \"../../../view-components/sticky-panel/sticky-panel\";\nimport { toolTipContent } from \"../../_common/tool-tip-content/content-tool-tips\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport { appColumns } from \"../../../_sample-data/columns\";\nimport { CatalogSingleProduct } from \"./single-product-view\";\nimport { TextInput } from \"../../../view-components/text-input/text-input\";\nexport class CatalogDetailsView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.workingDataSet = void 0;\n    this.initialized = false;\n    this.dataGridRef = React.createRef();\n    this.editDrawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n    this.selectionSet = [];\n    this.columns = void 0;\n\n    this.closeSingleProductEdit = () => {\n      window.history.back();\n    };\n\n    this.updateValues = (row, cell, value, colName) => {\n      console.log(\"inside drawer\", value, \" col name:\", colName); //the minus 2 is the offset for the extra columns checkbox and edit\n\n      this.workingDataSet[row - 2][cell - 2].value = value;\n      this.setState({\n        workingData: this.workingDataSet\n      });\n      console.log(\"selection set:\", this.state.selectionSet);\n    };\n\n    this.manageSelectionSet = (selectionSet, checkBoxSelections, message) => {\n      if (checkBoxSelections.length > 0 || this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") {\n        if (checkBoxSelections.length <= 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"default\"\n          });\n        } else if (checkBoxSelections.length > 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"multiple-selected\"\n          });\n        }\n\n        this.initialized = true;\n      } else {\n        this.setState({\n          footerOpen: false\n        });\n      }\n    };\n\n    this.columns = appColumns.getColumns();\n    this.state = {\n      workingData: this.props.gridData,\n      productViewOpen: false,\n      editDrawerOpen: false,\n      editDrawerMaximized: false,\n      footerOpen: false,\n      footerMode: \"default\",\n      selectionSet: []\n    };\n    this.workingDataSet = this.props.gridData;\n  }\n\n  getProductViewDrawer() {\n    if (this.props.query != \"none\" && this.props.query != null && this.props.query != undefined) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(CatalogSingleProduct, {\n        uniqueID: this.props.query,\n        productData: this.state.workingData,\n        closeSingleProduct: this.closeSingleProductEdit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getColumnLabel(colName) {\n    let columnLabel = \"\";\n\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].columnName === colName) {\n        columnLabel = this.columns[i].columnLabel;\n      }\n    }\n\n    return columnLabel;\n  }\n\n  getEditDrawer() {\n    if (this.state.editDrawerOpen === false) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.selectionSet = this.dataGridRef.current.selectionSet;\n    }\n\n    let inputs = [];\n    let selectedItems = []; //Create list of selection items that need inputs (i.e. one input per column)\n\n    i: for (let i = 0; i < this.selectionSet.length; i++) {\n      j: for (let j = 0; j < selectedItems.length; j++) {\n        if (this.selectionSet[i].columnName === selectedItems[j].columnName) {\n          continue i;\n        }\n      }\n\n      let row = this.selectionSet[i].row;\n      let cell = this.selectionSet[i].cell;\n      let productDataItem = catmanData.productData[row - 2][cell - 2];\n      selectedItems.push(productDataItem);\n    }\n\n    for (let i = 0; i < selectedItems.length; i++) {\n      let input = /*#__PURE__*/React.createElement(TextInput, {\n        row: this.selectionSet[i].row,\n        cell: this.selectionSet[i].cell,\n        columnName: this.selectionSet[i].columnName,\n        label: this.getColumnLabel(selectedItems[i].columnName),\n        currentValue: selectedItems[i].value,\n        onChangeAction: this.updateValues,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 18\n        }\n      });\n      inputs.push(input);\n    }\n\n    let maximize = valueCheck => {\n      if (valueCheck === true) {\n        return \"maximized\";\n      } else {\n        return \"catman-edit-default restored\";\n      }\n    };\n\n    let restoreAndMaximizeTooltip = valueCheck => {\n      if (valueCheck === false) {\n        return toolTipContent.maximizeDrawer();\n      } else {\n        return toolTipContent.restoreDrawer();\n      }\n    };\n\n    let drawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.state.editDrawerOpen === true) {\n      drawer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: `catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`,\n        animateIn: true,\n        heightIncludeUnits: \"\",\n        widthIncludeUnits: \"\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        toolBar: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tool-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 30\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 34\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 34\n        }\n      }, /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.maximizeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: restoreAndMaximizeTooltip(this.state.editDrawerMaximized),\n        toolTipTimeOutInMS: 10000,\n        classes: \"tool-bar-btn icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: \"icon-maximize\",\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 46\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 39\n        }\n      }), /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.closeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: toolTipContent.closeDrawer(),\n        toolTipTimeOutInMS: 10000,\n        classes: \"icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: \"icon-close\",\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 46\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 38\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-edit-area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 30\n        }\n      }, inputs)));\n    }\n\n    return drawer;\n  }\n\n  maximizeEditDrawer() {\n    this.setState({\n      editDrawerMaximized: !this.state.editDrawerMaximized\n    });\n  }\n\n  closeEditDrawer() {\n    this.setState({\n      editDrawerOpen: false\n    });\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.dataGridRef.current.clearSelection();\n    }\n  }\n\n  openEditDrawer() {\n    this.setState({\n      editDrawerOpen: true\n    });\n  }\n\n  footerActions(action) {\n    switch (action) {\n      case \"cancel\":\n        this.setState({\n          footerOpen: false\n        });\n        this.initialized = false;\n\n        if (this.dataGridRef.current !== null && this.dataGridRef.current !== undefined) {\n          this.dataGridRef.current.clearSelection();\n        }\n\n        break;\n\n      case \"add-group\":\n        break;\n\n      case \"edit\":\n        this.setState({\n          footerOpen: false\n        });\n        this.initialized = false;\n        break;\n    }\n  }\n\n  getFooterMenu() {\n    let footer = /*#__PURE__*/React.createElement(React.Fragment, null);\n    let buttons = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    switch (this.state.footerMode) {\n      case \"default\":\n        buttons = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footer-btn-bar catman-footer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Cancel\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCancel(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"cancel\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 26\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Delete Selected\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 26\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          classes: \"separate-left\",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Edit Selected\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerEditSelection(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-edit\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 26\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          classes: \" \",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Add Variant\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerAddVariant(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 26\n          }\n        }));\n        break;\n\n      case \"multiple-selected\":\n        buttons = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footer-btn-bar catman-footer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Cancel\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCancel(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"cancel\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 26\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Delete Selected\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 26\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          classes: \"separate-left\",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Edit Selected\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerEditSelection(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-edit\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 26\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          classes: \" \",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Make Into a Variant Group\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCreateVariant(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 26\n          }\n        }));\n        break;\n\n      case \"has-group\":\n        buttons = /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"catalog manager\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.mainNav(),\n          toolTipTimeOutInMS: 10000,\n          iconRight: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"down-arrow\",\n            classes: \"ui-icon\",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 26\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 29\n          }\n        });\n    }\n\n    if (this.state.footerOpen === true) {\n      let buttonBar = /*#__PURE__*/React.createElement(React.Fragment, null);\n      footer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: \"catman-footer-container\",\n        animateIn: true,\n        heightIncludeUnits: \"3.75rem\",\n        widthIncludeUnits: \"100%\",\n        stickyOpen: true,\n        bgColor: \"rgba(0,0,0,0)\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 22\n        }\n      }, buttons));\n    }\n\n    return footer;\n  }\n\n  conditionClasses() {\n    if (this.state.editDrawerOpen === true) {\n      return \"drawer-open\";\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TitleArea, {\n      mainTitle: \"Spreadsheet View\",\n      subTitle: \"My Catalog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(DataGrid, {\n      ref: this.dataGridRef,\n      data: this.state.workingData,\n      manageParentViews: () => this.openEditDrawer(),\n      selectionCallback: this.manageSelectionSet,\n      columns: appColumns.getColumns(),\n      classes: this.conditionClasses(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 18\n      }\n    }), this.getEditDrawer(), this.getFooterMenu(), this.getProductViewDrawer());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/catalog-views/catalog-details/catalog-details-view.tsx"],"names":["React","CatmanIcon","DataGrid","catmanData","TitleArea","StickyThing","toolTipContent","AppButton","appColumns","CatalogSingleProduct","TextInput","CatalogDetailsView","Component","constructor","props","workingDataSet","initialized","dataGridRef","createRef","editDrawer","selectionSet","columns","closeSingleProductEdit","window","history","back","updateValues","row","cell","value","colName","console","log","setState","workingData","state","manageSelectionSet","checkBoxSelections","message","length","editDrawerOpen","footerOpen","footerMode","getColumns","gridData","productViewOpen","editDrawerMaximized","getProductViewDrawer","query","undefined","getColumnLabel","columnLabel","i","columnName","getEditDrawer","current","inputs","selectedItems","j","productDataItem","productData","push","input","maximize","valueCheck","restoreAndMaximizeTooltip","maximizeDrawer","restoreDrawer","drawer","maximizeEditDrawer","closeEditDrawer","closeDrawer","clearSelection","openEditDrawer","footerActions","action","getFooterMenu","footer","buttons","footerCancel","footerDelete","footerEditSelection","footerAddVariant","footerCreateVariant","mainNav","buttonBar","conditionClasses","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {Navigation} from \"../../../view-components/list-menu/intra-app-navigation\";\nimport {MainHeaderArea} from \"../../_common/main-header-area/main-header-area\";\n\n//Configuration data:\nimport {mainNavConfig} from \"../../_catman-configuration/common-app-configuration\";\nimport {CatmanIcon} from \"../../../svg/icons/icons\";\nimport {ToolTipContent} from \"../../../view-components/heru-tool-tip/tool-tip-content\";\nimport {DataGrid, selectionObject} from \"../../../view-components/data-grid/data-grid\";\nimport {catmanData} from \"../../../_sample-data/products-data\";\nimport {TitleArea} from \"../../../view-components/title-area/title-area\";\nimport {Route, RouteComponentProps, Switch, useRouteMatch} from \"react-router-dom\";\nimport StickyThing from \"../../../view-components/sticky-panel/sticky-panel\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"../../../view-components/data-grid/data-types-for-data-grid\";\nimport {toolTipContent} from \"../../_common/tool-tip-content/content-tool-tips\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport {appColumns, iColumn} from \"../../../_sample-data/columns\";\nimport {CatalogSingleProduct} from \"./single-product-view\";\nimport {TextInput} from \"../../../view-components/text-input/text-input\";\nimport app from \"../../../../../catmen-server/src/Server\";\n\n\n\ninterface iPROPS   {\n    message: string;\n    query:string | null;\n    gridData : iDataGridItem[][];\n}\n\ninterface iSTATE{\n    productViewOpen : boolean;\n    editDrawerOpen : boolean;\n    editDrawerMaximized : boolean;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    selectionSet : selectionObject[];\n    workingData : iDataGridItem[][];\n\n}\n\nexport class CatalogDetailsView extends React.Component<iPROPS, iSTATE>{\n     constructor(props:iPROPS) {\n         super(props);\n         this.columns = appColumns.getColumns();\n         this.state = {\n             workingData : this.props.gridData,\n             productViewOpen : false,\n             editDrawerOpen : false,\n             editDrawerMaximized : false,\n             footerOpen : false,\n             footerMode : \"default\",\n             selectionSet : [],\n         };\n         this.workingDataSet = this.props.gridData;\n     }\n     workingDataSet : iDataGridItem[][];\n     //just for the fist launch of checkbox editing\n     initialized:boolean = false;\n     dataGridRef = React.createRef<DataGrid>();\n     editDrawer : ReactElement = (<></>);\n     selectionSet : selectionObject[] = [];\n     columns : iColumn[];\n\n\n     closeSingleProductEdit = ()=>{\n        window.history.back();\n    };\n\n     getProductViewDrawer( ){\n         if(this.props.query != \"none\" && this.props.query != null && this.props.query != undefined ){\n\n             return(\n                 <StickyThing\n                     enterFromThisSide=\"right\"\n                     lastResortClasses={\"product-view\"}\n                     animateIn={true}\n                     heightIncludeUnits=\"100vh\"\n                     widthIncludeUnits={\"100vw\"}\n                     stickyOpen={true}\n                     bgColor={\"#CECECE\"}\n                     doAnimation={true}\n                 >\n                    <CatalogSingleProduct\n                        uniqueID={this.props.query}\n                        productData={this.state.workingData}\n                        closeSingleProduct={this.closeSingleProductEdit}\n                    />\n\n                 </StickyThing>\n             )\n         }\n     }\n\n     getColumnLabel(colName : string) : string{\n\n         let columnLabel = \"\";\n         for(let i = 0; i < this.columns.length; i++){\n             if(this.columns[i].columnName === colName){\n                 columnLabel = this.columns[i].columnLabel;\n             }\n         }\n\n         return columnLabel;\n     }\n\n     updateValues=(row : number, cell:number, value:string, colName : string)=>{\n         console.log(\"inside drawer\", value, \" col name:\", colName);\n         //the minus 2 is the offset for the extra columns checkbox and edit\n         this.workingDataSet[row-2][cell-2].value = value;\n\n         this.setState({workingData : this.workingDataSet});\n         console.log( \"selection set:\", this.state.selectionSet );\n     };\n\n     getEditDrawer():ReactElement{\n\n         if(this.state.editDrawerOpen === false){\n             return(<></>);\n         }\n         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n             this.selectionSet = this.dataGridRef.current.selectionSet;\n         }\n\n         let inputs : ReactElement[] = [];\n         let selectedItems : iDataGridItem[] = []; \n\n         //Create list of selection items that need inputs (i.e. one input per column)\n        i: for(let i=0; i < this.selectionSet.length; i++){\n           j: for(let j=0; j < selectedItems.length; j++){\n                if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n                    continue i;\n                }\n            }\n                 let row = this.selectionSet[i].row;\n                 let cell = this.selectionSet[i].cell;\n                 let productDataItem = catmanData.productData[row-2][cell-2];\n                 selectedItems.push(productDataItem);\n        }\n\n         for( let i=0; i < selectedItems.length; i++){\n             let input = (\n                 <TextInput\n                     row={this.selectionSet[i].row}\n                     cell={this.selectionSet[i].cell}\n                     columnName={this.selectionSet[i].columnName}\n                     label={this.getColumnLabel( selectedItems[i].columnName )}\n                     currentValue={ selectedItems[i].value}\n                     onChangeAction={this.updateValues}\n                 />\n             );\n             inputs.push(input)\n         }\n\n        let maximize = (valueCheck : boolean)=>{\n             if(valueCheck === true){\n                 return \"maximized\"\n             }else{\n                 return \"catman-edit-default restored\"\n             }\n        };\n\n         let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return toolTipContent.maximizeDrawer();\n            }else{\n                return toolTipContent.restoreDrawer();\n            }\n         };\n\n         let drawer = (<></>);\n             if(this.state.editDrawerOpen === true){\n                 drawer = (\n                     <>\n                         <StickyThing\n                             enterFromThisSide=\"bottom\"\n                             lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n                             animateIn={true}\n                             heightIncludeUnits=\"\"\n                             widthIncludeUnits={\"\"}\n                             stickyOpen={true}\n                             bgColor={\"#CECECE\"}\n                             doAnimation={true}\n                             toolBar=\"none\"\n                         >\n                             <div className={\"tool-bar\"}>\n                                 <div></div>\n                                 <div className=\"drawer-controls\">\n                                      <AppButton\n                                         buttonType={\"secondary-action\"}\n                                         buttonLabel=\"\"\n                                         OnClick={()=>this.maximizeEditDrawer()}\n                                         tooltipType=\"custom\"\n                                         tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n                                         toolTipTimeOutInMS={10000}\n                                         classes=\"tool-bar-btn icon-only-btn\"\n                                         iconLeft={\n                                             <CatmanIcon\n                                                 iconName=\"icon-maximize\"\n                                                 classes=\" \"\n                                                 height=\"100%\"\n                                                 width=\"100%\"\n                                             />\n                                         }\n                                     />\n                                     <AppButton\n                                         buttonType={\"secondary-action\"}\n                                         buttonLabel=\"\"\n                                         OnClick={()=>this.closeEditDrawer()}\n                                         tooltipType=\"custom\"\n                                         tooltip={toolTipContent.closeDrawer()}\n                                         toolTipTimeOutInMS={10000}\n                                         classes=\"icon-only-btn\"\n                                         iconLeft={\n                                             <CatmanIcon\n                                                 iconName=\"icon-close\"\n                                                 classes=\" \"\n                                                 height=\"100%\"\n                                                 width=\"100%\"\n                                             />\n                                         }\n                                     />\n\n                                 </div>\n                             </div>\n\n                             <div className=\"drawer-edit-area\">\n                                 {inputs}\n                             </div>\n                         </StickyThing>\n                     </>\n                 );\n             }\n         return drawer;\n     }\n\n     maximizeEditDrawer(){\n         this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n     }\n\n     closeEditDrawer(){\n         this.setState({editDrawerOpen : false});\n         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n             this.dataGridRef.current.clearSelection();\n         }\n     }\n\n     openEditDrawer( ){\n         this.setState({editDrawerOpen : true});\n\n\n\n     }\n\n     footerActions(action : \"cancel\" | \"add-group\" | \"edit\"){\n         switch (action) {\n             case \"cancel\":\n\n                 this.setState({footerOpen : false});\n                 this.initialized = false;\n                 if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n                     this.dataGridRef.current.clearSelection();\n                 }\n                 break;\n             case \"add-group\":\n\n                 break;\n             case \"edit\":\n\n                 this.setState({footerOpen : false});\n                 this.initialized = false;\n\n                 break;\n         }\n     }\n\n     getFooterMenu(){\n         let footer = (<></>);\n         let buttons = (<></>);\n\n         switch(this.state.footerMode){\n             case \"default\":\n                 buttons = (\n                     <div className=\"footer-btn-bar catman-footer\">\n                         <AppButton\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Cancel\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerCancel()}\n                             toolTipTimeOutInMS={10000}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"cancel\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                         <AppButton\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Delete Selected\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerDelete()}\n                             toolTipTimeOutInMS={10000}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"icon-delete\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                         <AppButton\n                             classes={\"separate-left\"}\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Edit Selected\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerEditSelection()}\n                             toolTipTimeOutInMS={10000}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"icon-edit\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                         <AppButton\n                             classes={\" \"}\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Add Variant\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerAddVariant()}\n                             toolTipTimeOutInMS={10000}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"icon-add\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                     </div>\n                 );\n                 break;\n\n             case \"multiple-selected\":\n                 buttons = (\n                     <div className=\"footer-btn-bar catman-footer\">\n                         <AppButton\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Cancel\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerCancel()}\n                             toolTipTimeOutInMS={10000}\n                             tooltipXOffset={0}\n                             tooltipYOffset={20}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"cancel\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                         <AppButton\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Delete Selected\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerDelete()}\n                             toolTipTimeOutInMS={10000}\n                             tooltipXOffset={0}\n                             tooltipYOffset={20}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"icon-delete\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                         <AppButton\n                             classes={\"separate-left\"}\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Edit Selected\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerEditSelection()}\n                             toolTipTimeOutInMS={10000}\n                             tooltipXOffset={0}\n                             tooltipYOffset={20}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"icon-edit\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                         <AppButton\n                             classes={\" \"}\n                             buttonType={\"secondary-action\"}\n                             buttonLabel=\"Make Into a Variant Group\"\n                             OnClick={()=>this.footerActions(\"cancel\")}\n                             tooltipType=\"custom\"\n                             tooltip={toolTipContent.footerCreateVariant()}\n                             toolTipTimeOutInMS={10000}\n                             tooltipXOffset={0}\n                             tooltipYOffset={20}\n                             iconLeft={\n                                 <CatmanIcon\n                                     iconName=\"icon-add\"\n                                     classes=\" \"\n                                     height=\"100%\"\n                                     width=\"100%\"\n                                 />\n                             }\n                         />\n                     </div>\n                 );\n                 break;\n\n             case \"has-group\":\n                 buttons = (<AppButton\n                     buttonType={\"secondary-action\"}\n                     buttonLabel=\"catalog manager\"\n                     OnClick={()=>this.footerActions(\"cancel\")}\n                     tooltipType=\"custom\"\n                     tooltip={toolTipContent.mainNav()}\n                     toolTipTimeOutInMS={10000}\n                     iconRight={\n                         <CatmanIcon\n                             iconName=\"down-arrow\"\n                             classes=\"ui-icon\"\n                             height=\"100%\"\n                             width=\"100%\"\n                         />\n                     }\n                 />)\n         }\n\n         if(this.state.footerOpen === true){\n\n             let buttonBar : ReactElement = (<>\n             </>);\n\n             footer = (\n                 <>\n                     <StickyThing\n                         enterFromThisSide=\"bottom\"\n                         lastResortClasses={\"catman-footer-container\"}\n                         animateIn={true}\n                         heightIncludeUnits=\"3.75rem\"\n                         widthIncludeUnits={\"100%\"}\n                         stickyOpen={true}\n                         bgColor={\"rgba(0,0,0,0)\"}\n                         doAnimation={true}\n                     >\n                         {buttons}\n                     </StickyThing>\n                 </>\n             );\n         }\n         return footer;\n     }\n\n     manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )=>{\n        if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n            if(checkBoxSelections.length <= 1){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n            }else if(checkBoxSelections.length > 1 ){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n            }\n            this.initialized = true;\n        }else{\n            this.setState({footerOpen : false});\n        }\n\n     };\n\n     conditionClasses(){\n         if(this.state.editDrawerOpen === true){\n             return \"drawer-open\";\n         }\n     }\n\n     render(){\n\n         return (\n             <>\n                 <TitleArea mainTitle=\"Spreadsheet View\" subTitle=\"My Catalog\" />\n                 <DataGrid\n                     ref={this.dataGridRef}\n                     data={this.state.workingData}\n                     manageParentViews={()=>this.openEditDrawer()}\n                     selectionCallback={this.manageSelectionSet}\n                     columns={appColumns.getColumns()}\n                     classes={this.conditionClasses()}\n                 />\n                 {this.getEditDrawer() }\n                 {this.getFooterMenu() }\n                 {this.getProductViewDrawer()}\n             </>\n         )\n     }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}