{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/wizards/create-product-group/add-variants-wizard.tsx\";\nimport * as React from \"react\";\nimport { Wizard } from \"../../../view-components/wizard/wizard\";\nimport { toolTipContent } from \"../../tool-tip-content/content-tool-tips\";\nimport { CatmanIcon } from \"../../../svg/icons/icons\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport { dataManagerMain } from \"../../../index\";\nimport { StandardTextInput } from \"../../../view-components/text-input/standard-text-input\";\nimport { DataGrid } from \"../../../view-components/data-grid/data-grid\";\nexport class AddVariantsWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.stagingAreaProducts = [];\n    this.numberOfVariants = 1;\n\n    this.getInputValue = (row, cell, value) => {\n      console.log(\"input value\", row, \" \", cell, \" \", value);\n      this.numberOfVariants = parseInt(value);\n    };\n\n    this.state = {\n      wizardPanel: \"start\"\n    };\n  }\n\n  addVariantsStaging() {\n    console.log(this.props.selectedCheckBoxes);\n    let newItem = [];\n\n    if (this.props.selectedCheckBoxes !== undefined) {\n      if (this.props.selectedCheckBoxes.length === 1) {\n        newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[this.props.selectedCheckBoxes[0]]));\n        let newItems = [];\n\n        for (let i = 0; i < this.numberOfVariants; i++) {\n          newItems.push(JSON.parse(JSON.stringify(newItem)));\n        }\n\n        this.stagingAreaProducts = newItems;\n      } else {}\n    }\n\n    console.log(\"added variant\", dataManagerMain.productData); // this.props.manageModal();\n  }\n\n  acceptVariants() {\n    if (this.props.selectedCheckBoxes != null) {\n      dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0, ...this.stagingAreaProducts);\n    }\n\n    this.props.manageModal();\n  }\n\n  wizardNavigation(panelName) {\n    this.setState({\n      wizardPanel: panelName\n    });\n\n    switch (panelName) {\n      case \"staging-area\":\n        this.addVariantsStaging();\n        break;\n    }\n  }\n\n  manageModal() {\n    if (this.props.manageModal !== undefined) {\n      this.props.manageModal();\n    }\n  }\n\n  elements() {\n    switch (this.state.wizardPanel) {\n      case \"start\":\n        const startButtons = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Cancel\",\n          OnClick: () => this.manageModal(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCancel(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"cancel\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Continue\",\n          OnClick: () => this.wizardNavigation(\"staging-area\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.continueWizard(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"continue\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }\n        }));\n        const startSentences = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"sentence-input\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }\n        }, \"Add\"), /*#__PURE__*/React.createElement(StandardTextInput, {\n          controlType: \"no-label\",\n          label: \"Number of variants\",\n          onChangeAction: this.getInputValue,\n          currentValue: \"1\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }\n        }, \"New blank product stubs as variants: \"));\n        return /*#__PURE__*/React.createElement(Wizard, {\n          stepTitle: \"Add Products Variants\",\n          stepSubTitle: \"Variants can be used to quickly set up different colors and sizes of your products.\",\n          wizardButtons: startButtons,\n          sentenceInputs: startSentences,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 21\n          }\n        });\n\n      case \"staging-area\":\n        const stagingButtons = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Back\",\n          OnClick: () => this.wizardNavigation(\"start\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.closeModal(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"cancel\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Delete Selected\",\n          OnClick: () => this.wizardNavigation(\"start\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Confirm & Add to Catalog\",\n          OnClick: () => this.acceptVariants(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.insertFromStagingArea(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }\n        }));\n        const stagingSentences = /*#__PURE__*/React.createElement(DataGrid, {\n          data: this.stagingAreaProducts,\n          manageParentViews: () => {},\n          columnsData: dataManagerMain.getColumns,\n          addAction: () => {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 21\n          }\n        });\n        return /*#__PURE__*/React.createElement(Wizard, {\n          stepTitle: \"Confirm Variants\",\n          stepSubTitle: \"Verify and make changes before adding new product variants to your catalog\",\n          wizardButtons: stagingButtons,\n          sentenceInputs: stagingSentences,\n          classes: \"expand-size\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 24\n          }\n        });\n    }\n  }\n\n  render() {\n    return this.elements();\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/wizards/create-product-group/add-variants-wizard.tsx"],"names":["React","Wizard","toolTipContent","CatmanIcon","AppButton","dataManagerMain","StandardTextInput","DataGrid","AddVariantsWizard","Component","constructor","props","stagingAreaProducts","numberOfVariants","getInputValue","row","cell","value","console","log","parseInt","state","wizardPanel","addVariantsStaging","selectedCheckBoxes","newItem","undefined","length","JSON","parse","stringify","productData","newItems","i","push","acceptVariants","splice","manageModal","wizardNavigation","panelName","setState","elements","startButtons","footerCancel","continueWizard","startSentences","stagingButtons","closeModal","footerDelete","insertFromStagingArea","stagingSentences","getColumns","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAqBC,MAArB,QAAkC,wCAAlC;AAEA,SAAQC,cAAR,QAA6B,0CAA7B;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,SAAP,MAAsB,4CAAtB;AAIA,SAAQC,eAAR,QAA8B,gBAA9B;AAEA,SAAQC,iBAAR,QAAgC,yDAAhC;AACA,SAAQC,QAAR,QAAuB,8CAAvB;AAeA,OAAO,MAAMC,iBAAN,SAAgCR,KAAK,CAACS,SAAtC,CAA+D;AAElEC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;AADsB,SAM1BC,mBAN0B,GAMgB,EANhB;AAAA,SAO1BC,gBAP0B,GAOP,CAPO;;AAAA,SAwC1BC,aAxC0B,GAwCV,CAACC,GAAD,EAAaC,IAAb,EAA0BC,KAA1B,KAA0C;AACtDC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,GAA3B,EAAgC,GAAhC,EAAqCC,IAArC,EAA2C,GAA3C,EAAgDC,KAAhD;AACA,WAAKJ,gBAAL,GAAwBO,QAAQ,CAACH,KAAD,CAAhC;AACH,KA3CyB;;AAEtB,SAAKI,KAAL,GAAW;AACPC,MAAAA,WAAW,EAAG;AADP,KAAX;AAGH;;AAIDC,EAAAA,kBAAkB,GAAE;AAChBL,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWa,kBAAvB;AACA,QAAIC,OAAyB,GAAG,EAAhC;;AACA,QAAG,KAAKd,KAAL,CAAWa,kBAAX,KAAkCE,SAArC,EAA+C;AAC3C,UAAG,KAAKf,KAAL,CAAWa,kBAAX,CAA8BG,MAA9B,KAAyC,CAA5C,EAA8C;AAC1CF,QAAAA,OAAO,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezB,eAAe,CAAC0B,WAAhB,CAA6B,KAAKpB,KAAL,CAAWa,kBAAX,CAA8B,CAA9B,CAA7B,CAAf,CAAX,CAAV;AACA,YAAIQ,QAAQ,GAAG,EAAf;;AAEA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,KAAKpB,gBAAtB,EAAwCoB,CAAC,EAAzC,EAA4C;AACxCD,UAAAA,QAAQ,CAACE,IAAT,CAAeN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,OAAf,CAAX,CAAf;AACH;;AACD,aAAKb,mBAAL,GAA2BoB,QAA3B;AAGH,OAVD,MAUK,CAEJ;AACJ;;AACDd,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4Bd,eAAe,CAAC0B,WAA5C,EAlBgB,CAmBjB;AACF;;AAEDI,EAAAA,cAAc,GAAE;AACZ,QAAG,KAAKxB,KAAL,CAAWa,kBAAX,IAAiC,IAApC,EAAyC;AACrCnB,MAAAA,eAAe,CAAC0B,WAAhB,CAA4BK,MAA5B,CAAmC,KAAKzB,KAAL,CAAWa,kBAAX,CAA8B,CAA9B,CAAnC,EAAqE,CAArE,EAAuE,GAAG,KAAKZ,mBAA/E;AACH;;AACD,SAAKD,KAAL,CAAW0B,WAAX;AACH;;AASDC,EAAAA,gBAAgB,CAACC,SAAD,EAAiC;AAC7C,SAAKC,QAAL,CAAc;AAAClB,MAAAA,WAAW,EAAGiB;AAAf,KAAd;;AACA,YAAQA,SAAR;AACI,WAAK,cAAL;AACI,aAAKhB,kBAAL;AACA;AAHR;AAKH;;AAEDc,EAAAA,WAAW,GAAE;AACT,QAAG,KAAK1B,KAAL,CAAW0B,WAAX,KAA2BX,SAA9B,EAAwC;AACpC,WAAKf,KAAL,CAAW0B,WAAX;AACH;AACJ;;AAEDI,EAAAA,QAAQ,GAAE;AACN,YAAQ,KAAKpB,KAAL,CAAWC,WAAnB;AACI,WAAK,OAAL;AACI,cAAMoB,YAAY,gBACd,uDACI,oBAAC,SAAD;AACI,UAAA,UAAU,EAAC,kBADf;AAEI,UAAA,WAAW,EAAC,QAFhB;AAGI,UAAA,OAAO,EAAG,MAAI,KAAKL,WAAL,EAHlB;AAII,UAAA,WAAW,EAAC,QAJhB;AAKI,UAAA,OAAO,EAAEnC,cAAc,CAACyC,YAAf,EALb;AAMI,UAAA,kBAAkB,EAAE,KANxB;AAOI,UAAA,QAAQ,eACJ,oBAAC,UAAD;AACI,YAAA,QAAQ,EAAC,QADb;AAEI,YAAA,OAAO,EAAC,GAFZ;AAGI,YAAA,MAAM,EAAC,MAHX;AAII,YAAA,KAAK,EAAC,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,eAiBI,oBAAC,SAAD;AACI,UAAA,UAAU,EAAE,kBADhB;AAEI,UAAA,WAAW,EAAC,UAFhB;AAGI,UAAA,OAAO,EAAE,MAAI,KAAKL,gBAAL,CAAsB,cAAtB,CAHjB;AAII,UAAA,WAAW,EAAC,QAJhB;AAKI,UAAA,OAAO,EAAEpC,cAAc,CAAC0C,cAAf,EALb;AAMI,UAAA,kBAAkB,EAAE,KANxB;AAOI,UAAA,QAAQ,eACJ,oBAAC,UAAD;AACI,YAAA,QAAQ,EAAC,UADb;AAEI,YAAA,OAAO,EAAC,GAFZ;AAGI,YAAA,MAAM,EAAC,MAHX;AAII,YAAA,KAAK,EAAC,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAjBJ,CADJ;AAqCA,cAAMC,cAAc,gBAChB;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI,oBAAC,iBAAD;AACI,UAAA,WAAW,EAAC,UADhB;AAEI,UAAA,KAAK,EAAE,oBAFX;AAGI,UAAA,cAAc,EAAE,KAAK/B,aAHzB;AAII,UAAA,YAAY,EAAE,GAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDARJ,CADJ;AAaA,4BACI,oBAAC,MAAD;AACI,UAAA,SAAS,EAAE,uBADf;AAEI,UAAA,YAAY,EAAE,qFAFlB;AAGI,UAAA,aAAa,EAAE4B,YAHnB;AAII,UAAA,cAAc,EAAEG,cAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;;AAQJ,WAAK,cAAL;AACI,cAAMC,cAAc,gBAChB,uDACI,oBAAC,SAAD;AACI,UAAA,UAAU,EAAC,kBADf;AAEI,UAAA,WAAW,EAAC,MAFhB;AAGI,UAAA,OAAO,EAAG,MAAI,KAAKR,gBAAL,CAAsB,OAAtB,CAHlB;AAII,UAAA,WAAW,EAAC,QAJhB;AAKI,UAAA,OAAO,EAAEpC,cAAc,CAAC6C,UAAf,EALb;AAMI,UAAA,kBAAkB,EAAE,KANxB;AAOI,UAAA,QAAQ,eACJ,oBAAC,UAAD;AACI,YAAA,QAAQ,EAAC,QADb;AAEI,YAAA,OAAO,EAAC,GAFZ;AAGI,YAAA,MAAM,EAAC,MAHX;AAII,YAAA,KAAK,EAAC,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,eAiBI,oBAAC,SAAD;AACI,UAAA,UAAU,EAAC,kBADf;AAEI,UAAA,WAAW,EAAC,iBAFhB;AAGI,UAAA,OAAO,EAAG,MAAI,KAAKT,gBAAL,CAAsB,OAAtB,CAHlB;AAII,UAAA,WAAW,EAAC,QAJhB;AAKI,UAAA,OAAO,EAAEpC,cAAc,CAAC8C,YAAf,EALb;AAMI,UAAA,kBAAkB,EAAE,KANxB;AAOI,UAAA,QAAQ,eACJ,oBAAC,UAAD;AACI,YAAA,QAAQ,EAAC,aADb;AAEI,YAAA,OAAO,EAAC,GAFZ;AAGI,YAAA,MAAM,EAAC,MAHX;AAII,YAAA,KAAK,EAAC,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAjBJ,eAiCI,oBAAC,SAAD;AACI,UAAA,UAAU,EAAE,kBADhB;AAEI,UAAA,WAAW,EAAC,0BAFhB;AAGI,UAAA,OAAO,EAAE,MAAI,KAAKb,cAAL,EAHjB;AAII,UAAA,WAAW,EAAC,QAJhB;AAKI,UAAA,OAAO,EAAEjC,cAAc,CAAC+C,qBAAf,EALb;AAMI,UAAA,kBAAkB,EAAE,KANxB;AAOI,UAAA,QAAQ,eACJ,oBAAC,UAAD;AACI,YAAA,QAAQ,EAAC,UADb;AAEI,YAAA,OAAO,EAAC,GAFZ;AAGI,YAAA,MAAM,EAAC,MAHX;AAII,YAAA,KAAK,EAAC,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAjCJ,CADJ;AAqDA,cAAMC,gBAAgB,gBAClB,oBAAC,QAAD;AACI,UAAA,IAAI,EAAE,KAAKtC,mBADf;AAEI,UAAA,iBAAiB,EAAE,MAAI,CAAE,CAF7B;AAGI,UAAA,WAAW,EAAEP,eAAe,CAAC8C,UAHjC;AAII,UAAA,SAAS,EAAE,MAAI,CAAE,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQA,4BAAO,oBAAC,MAAD;AACH,UAAA,SAAS,EAAE,kBADR;AAEH,UAAA,YAAY,EAAE,4EAFX;AAGH,UAAA,aAAa,EAAEL,cAHZ;AAIH,UAAA,cAAc,EAAEI,gBAJb;AAKH,UAAA,OAAO,EAAC,aALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AA1HR;AAkIH;;AAEDE,EAAAA,MAAM,GAAE;AACJ,WAAO,KAAKX,QAAL,EAAP;AACH;;AArMiE","sourcesContent":["import * as React from \"react\";\nimport {iWizardStep, Wizard} from \"../../../view-components/wizard/wizard\";\nimport {ReactElement} from \"react\";\nimport {toolTipContent} from \"../../tool-tip-content/content-tool-tips\";\nimport {CatmanIcon} from \"../../../svg/icons/icons\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport {DividerLine} from \"../../../view-components/divider-line/divider-line\";\nimport {TextInput} from \"../../../view-components/text-input/text-input\";\nimport {Illustration} from \"../../../svg/illustrations/illustrations\";\nimport {dataManagerMain} from \"../../../index\";\nimport {iDataGridItem} from \"../../../view-components/data-grid/data-types-for-data-grid\";\nimport {StandardTextInput} from \"../../../view-components/text-input/standard-text-input\";\nimport {DataGrid} from \"../../../view-components/data-grid/data-grid\";\n\ninterface iPROPS{\n    addAction : Function\n    selectedCheckBoxes? : number[];\n    groups : string[];\n    manageModal : Function;\n}\n\ntype addVariantWizardNav = \"closed\" | \"start\" | \"staging-area\" | \"upload-3\";\n\ninterface iSTATE{\n    wizardPanel : addVariantWizardNav;\n}\n\nexport class AddVariantsWizard extends React.Component<iPROPS, iSTATE>{\n\n    constructor(props:iPROPS) {\n        super(props);\n        this.state={\n            wizardPanel : \"start\"\n        }\n    }\n    stagingAreaProducts : iDataGridItem[][] = [];\n    numberOfVariants = 1;\n\n    addVariantsStaging(){\n        console.log(this.props.selectedCheckBoxes);\n        let newItem : iDataGridItem[] = [];\n        if(this.props.selectedCheckBoxes !== undefined){\n            if(this.props.selectedCheckBoxes.length === 1){\n                newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[ this.props.selectedCheckBoxes[0]]) );\n                let newItems = [];\n\n                for(let i=0; i < this.numberOfVariants; i++){\n                    newItems.push( JSON.parse(JSON.stringify(newItem)) );\n                }\n                this.stagingAreaProducts = newItems;\n\n\n            }else{\n\n            }\n        }\n        console.log(\"added variant\",dataManagerMain.productData);\n       // this.props.manageModal();\n    }\n\n    acceptVariants(){\n        if(this.props.selectedCheckBoxes != null){\n            dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0,...this.stagingAreaProducts);\n        }\n        this.props.manageModal();\n    }\n\n\n\n    getInputValue = (row:number, cell:number, value:string )=>{\n        console.log(\"input value\", row, \" \", cell, \" \", value);\n        this.numberOfVariants = parseInt(value);\n    };\n\n    wizardNavigation(panelName : addVariantWizardNav){\n        this.setState({wizardPanel : panelName});\n        switch (panelName) {\n            case \"staging-area\":\n                this.addVariantsStaging();\n                break;\n        }\n    }\n\n    manageModal(){\n        if(this.props.manageModal !== undefined){\n            this.props.manageModal();\n        }\n    }\n\n    elements(){\n        switch (this.state.wizardPanel) {\n            case \"start\":\n                const startButtons = (\n                    <>\n                        <AppButton\n                            buttonType=\"secondary-action\"\n                            buttonLabel=\"Cancel\"\n                            OnClick={ ()=>this.manageModal() }\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerCancel()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"cancel\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Continue\"\n                            OnClick={()=>this.wizardNavigation(\"staging-area\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.continueWizard()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"continue\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                    </>\n                );\n\n                const startSentences = (\n                    <div className=\"sentence-input\">\n                        <p>Add</p>\n                        <StandardTextInput\n                            controlType=\"no-label\"\n                            label={\"Number of variants\"}\n                            onChangeAction={this.getInputValue}\n                            currentValue={\"1\"}\n                        />\n                        <p>New blank product stubs as variants: </p>\n\n                    </div>\n                );\n                return(\n                    <Wizard\n                        stepTitle={\"Add Products Variants\"}\n                        stepSubTitle={\"Variants can be used to quickly set up different colors and sizes of your products.\"}\n                        wizardButtons={startButtons}\n                        sentenceInputs={startSentences}\n                    />\n                );\n            case \"staging-area\":\n                const stagingButtons = (\n                    <>\n                        <AppButton\n                            buttonType=\"secondary-action\"\n                            buttonLabel=\"Back\"\n                            OnClick={ ()=>this.wizardNavigation(\"start\") }\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.closeModal()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"cancel\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType=\"secondary-action\"\n                            buttonLabel=\"Delete Selected\"\n                            OnClick={ ()=>this.wizardNavigation(\"start\") }\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerDelete()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-delete\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Confirm & Add to Catalog\"\n                            OnClick={()=>this.acceptVariants()}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.insertFromStagingArea()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-add\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                    </>\n                );\n\n                const stagingSentences = (\n                    <DataGrid\n                        data={this.stagingAreaProducts}\n                        manageParentViews={()=>{}}\n                        columnsData={dataManagerMain.getColumns}\n                        addAction={()=>{}}\n                    />\n                );\n                return(<Wizard\n                    stepTitle={\"Confirm Variants\"}\n                    stepSubTitle={\"Verify and make changes before adding new product variants to your catalog\"}\n                    wizardButtons={stagingButtons}\n                    sentenceInputs={stagingSentences}\n                    classes=\"expand-size\"\n                />)\n        }\n    }\n\n    render(){\n        return(this.elements())\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}