{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport { appColumns } from \"../../_sample-data/columns\"; //data grid data should be an array of arrays\n//each product is an array of attributes\n\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectionSet = [];\n    this.numCols = void 0;\n    this.numRows = void 0;\n    this.startSelectionRow = void 0;\n    this.startSelectionCell = void 0;\n    this.cellRange = void 0;\n    this._checkedRows = [];\n\n    this.iconCheck = row => {\n      for (let i = 0; i < this.state.checkedRows.length; i++) {\n        if (row === this.state.checkedRows[i]) {\n          return \"checkbox-checked\";\n        }\n      }\n\n      return \"checkbox-unchecked\";\n    };\n\n    this.updateSelectionState = () => {\n      this.setState({\n        selectionSet: this.selectionSet\n      });\n      console.log(\"selection state: \", this.state.selectionSet);\n    };\n\n    this.numCols = this.getNumColumns();\n    this.numRows = this.getNumRows();\n    this.state = {\n      selectionSet: [],\n      checkedRows: []\n    };\n    this.startSelectionRow = 0;\n    this.startSelectionCell = 0;\n    this.cellRange = {\n      startCell: 0,\n      endCell: 0,\n      startRow: 0,\n      endRow: 0\n    };\n  }\n\n  manageSelection(row, cell, clearSelection) {\n    if (clearSelection) {\n      this.selectionSet = [];\n      this._checkedRows = [];\n    }\n\n    if (this.startSelectionRow > row) {\n      this.cellRange.startRow = row;\n      this.cellRange.endRow = this.startSelectionRow;\n    } else {\n      this.cellRange.startRow = this.startSelectionRow;\n      this.cellRange.endRow = row;\n    }\n\n    if (this.startSelectionCell > cell) {\n      this.cellRange.startCell = cell;\n      this.cellRange.endCell = this.startSelectionCell;\n    } else {\n      this.cellRange.startCell = this.startSelectionCell;\n      this.cellRange.endCell = cell;\n    }\n\n    if (row === this.startSelectionRow && cell === this.startSelectionCell) {\n      this.selectionSet.push({\n        row: row,\n        cell: cell,\n        selected: true\n      });\n    }\n\n    for (let i = this.cellRange.startRow; i < this.cellRange.endRow + 1; i++) {\n      for (let j = this.cellRange.startCell; j < this.cellRange.endCell + 1; j++) {\n        this.selectionSet.push({\n          row: i,\n          cell: j,\n          selected: true\n        });\n      }\n    } // handle single cell as start and end\n\n\n    if (this.selectionSet.length === 2) {\n      if (this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell) {\n        this.selectionSet.splice(1, 1);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet,\n      checkedRows: this._checkedRows\n    });\n    console.log(\"seke/:\", this.state.selectionSet);\n\n    if (this.props.selectionCallback !== undefined && this.props.selectionCallback !== null) {\n      let selectedItems = [];\n      let lastRow = 0; // work through the selection set to organize things\n\n      i: for (let i = 0; i < this.state.selectionSet.length; i++) {\n        if (i === 0) {\n          //if it's the first one let's create a new entry\n          lastRow = this.state.selectionSet[0].row;\n          let newItem = {\n            row: lastRow,\n            cells: [],\n            productFields: []\n          };\n          selectedItems.push(newItem);\n        } //loop over the existing list of rows to create new ones\n\n\n        if (this.state.selectionSet[i].row === lastRow) {\n          //one more loop over the list to grab all the cells that belong to the row\n          if (selectedItems[selectedItems.length - 1].cells.length === 0) {\n            for (let j = 0; j < this.state.selectionSet.length; j++) {\n              if (this.state.selectionSet[j].row === lastRow) {\n                //if the row matches the last row, then push in the selected cell\n                selectedItems[selectedItems.length - 1].cells.push(this.state.selectionSet[j].cell);\n              }\n            }\n          }\n        } else {\n          lastRow = this.state.selectionSet[i].row;\n          let newItem = {\n            row: lastRow,\n            cells: [],\n            productFields: []\n          };\n          selectedItems.push(newItem);\n        }\n      }\n\n      console.log(\"inner callback\", selectedItems);\n\n      for (let x = 0; x < selectedItems.length; x++) {\n        console.log(selectedItems[x]);\n\n        for (let y = 0; y < this.props.data[selectedItems[x].row].length; y++) {\n          selectedItems[x].productFields.push(this.props.data[selectedItems[x].row][y]);\n        }\n      }\n\n      this.props.selectionCallback(selectedItems, this._checkedRows, \"standard-launch\");\n    }\n  }\n\n  clearSelection() {\n    this.setState({\n      selectionSet: [],\n      checkedRows: []\n    });\n    this._checkedRows = [];\n    this.selectionSet = [];\n  }\n\n  checkSelected(row, cell) {\n    for (let i = 0; i < this.state.selectionSet.length; i++) {\n      if (this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell) {\n        return \"selected\";\n      }\n    } //if nothing is found, return false because it isn't selected\n\n\n    return \"\";\n  }\n\n  getNumColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return appColumns.getColumns().length;\n  }\n\n  getNumRows() {\n    return this.props.data.length;\n  }\n\n  getProductUniqueID(index) {\n    for (let j = 0; j < this.props.data[index].length; j++) {\n      if (this.props.data[index][j].column === \"uniqueID\") {\n        return this.props.data[index][j].value;\n      }\n    }\n  }\n\n  mouseDownAction(row, cell) {\n    this.startSelectionCell = cell;\n    this.startSelectionRow = row;\n  }\n\n  mouseUpAction(row, cell) {\n    this.manageSelection(row, cell, true);\n  }\n\n  manageCheckbox(row) {\n    //find if this number is in the list\n    let found = false;\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      if (this._checkedRows[i] === row) {\n        //if it is in the list remove it which unchecks\n        this._checkedRows.splice(i, 1);\n\n        this.setState({\n          checkedRows: this._checkedRows\n        });\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      this._checkedRows.push(row);\n\n      this.setState({\n        checkedRows: this._checkedRows\n      });\n    } //handle selecting the checked\n\n\n    this.selectionSet = [];\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      for (let j = 0; j < this.props.data[this._checkedRows[i]].length; j++) {\n        let selectedCell = {\n          row: this._checkedRows[i] + 1,\n          cell: j,\n          selected: true\n        };\n        this.selectionSet.push(selectedCell);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet\n    });\n\n    if (this.props.selectionCallback !== undefined) {\n      this.props.selectionCallback(this.state.selectionSet, this.state.checkedRows, \"checkbox-launched\");\n    } //once people use the tool, we can hide the tool tip\n\n\n    toolTipContent.showSelectRow = false;\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.props.data.length; i++) {\n      for (let j = 0; j < this.props.data[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell checkbox-main\",\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            OnClick: () => this.manageCheckbox(i),\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.selectRow(),\n            classes: `${this.iconCheck(i)}`,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: `${this.iconCheck(i)}`,\n              width: \"0.5rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell\",\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: \"edit-cell\",\n          tileLabel: this.props.data[i][j].value,\n          mouseDownActions: [() => this.mouseDownAction(i + 1, j + 2)],\n          mouseUpActions: [() => this.props.manageParentViews(), () => this.mouseUpAction(i + 1, j + 2)],\n          selectedClass: this.checkSelected(i + 1, j + 2),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }\n        }));\n        cells.push(cell);\n\n        if (j === this.props.data[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"nav-link\",\n            navPath: `/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`,\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.singleProduct(),\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  render() {\n    let gridItems = [];\n    let columnHeaders = []; //having some trouble with layout of grid and checkboxes\n    // style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}\n\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","appColumns","DataGrid","Component","constructor","props","selectionSet","numCols","numRows","startSelectionRow","startSelectionCell","cellRange","_checkedRows","iconCheck","row","i","state","checkedRows","length","updateSelectionState","setState","console","log","getNumColumns","getNumRows","startCell","endCell","startRow","endRow","manageSelection","cell","clearSelection","push","selected","j","splice","selectionCallback","undefined","selectedItems","lastRow","newItem","cells","productFields","x","y","data","checkSelected","getColumns","getProductUniqueID","index","column","value","mouseDownAction","mouseUpAction","manageCheckbox","found","selectedCell","showSelectRow","getGridItems","gridColumn","gridRow","zIndex","selectRow","manageParentViews","singleProduct","render","gridItems","columnHeaders","constructedGrid"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {selectedStateType, Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport camelcase from \"camelcase\";\nimport {appColumns, iColumn} from \"../../_sample-data/columns\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][];\n    manageParentViews : Function;\n    selectionCallback? : Function;\n    columns : iColumn[];\n}\n\ninterface iSTATE {\n    selectionSet : selectionObject[];\n    checkedRows :number[];\n}\n\nexport type selectionObject = {\n    row : number;\n    cell : number;\n    selected : boolean;\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.numCols = this.getNumColumns();\n        this.numRows = this.getNumRows();\n        this.state = {\n            selectionSet : [],\n            checkedRows : []\n        };\n        this.startSelectionRow = 0;\n        this.startSelectionCell = 0;\n\n        this.cellRange = {\n            startCell : 0,\n            endCell : 0,\n            startRow : 0,\n            endRow : 0,\n        }\n    }\n    selectionSet : selectionObject[] = [];\n    numCols : number;\n    numRows: number;\n    startSelectionRow : number;\n    startSelectionCell : number;\n\n    cellRange : any;\n    _checkedRows : number[] = [];\n\n    manageSelection(row:number, cell:number, clearSelection : boolean){\n\n        if(clearSelection){\n            this.selectionSet = [];\n            this._checkedRows = [];\n        }\n\n        if(this.startSelectionRow > row){\n            this.cellRange.startRow = row;\n            this.cellRange.endRow = this.startSelectionRow\n        }else{\n            this.cellRange.startRow = this.startSelectionRow;\n            this.cellRange.endRow = row;\n        }\n\n        if(this.startSelectionCell > cell){\n            this.cellRange.startCell = cell;\n            this.cellRange.endCell = this.startSelectionCell;\n        }else {\n            this.cellRange.startCell = this.startSelectionCell;\n            this.cellRange.endCell = cell;\n        }\n\n        if(row === this.startSelectionRow && cell === this.startSelectionCell){\n            this.selectionSet.push(\n                {\n                    row: row,\n                    cell: cell,\n                    selected : true\n                }\n            );\n        }\n\n        for( let i = this.cellRange.startRow; i < this.cellRange.endRow+1; i++){\n            for(let j= this.cellRange.startCell; j < this.cellRange.endCell+1; j++){\n                this.selectionSet.push(\n                    {\n                        row: i,\n                        cell: j,\n                        selected : true\n                    }\n                );\n            }\n        }\n\n        // handle single cell as start and end\n\n        if(this.selectionSet.length === 2){\n            if( this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell  ){\n                this.selectionSet.splice(1,1);\n            }\n        }\n\n        this.setState({\n            selectionSet : this.selectionSet,\n            checkedRows : this._checkedRows\n        });\n        console.log(\"seke/:\", this.state.selectionSet);\n\n\n        if(this.props.selectionCallback !== undefined && this.props.selectionCallback !== null){\n           type iSelectedItems = { row : number, cells : number[], productFields : iDataGridItem[] };\n            let selectedItems : iSelectedItems[] = [  ];\n            let lastRow : number = 0;\n\n            // work through the selection set to organize things\n           i: for(let i=0; i < this.state.selectionSet.length; i++){\n                if(i===0){\n                    //if it's the first one let's create a new entry\n                    lastRow = this.state.selectionSet[0].row;\n                    let newItem : iSelectedItems = { row : lastRow, cells:[], productFields : []};\n                    selectedItems.push(newItem);\n                }\n\n                //loop over the existing list of rows to create new ones\n                    if(this.state.selectionSet[i].row === lastRow){\n                        //one more loop over the list to grab all the cells that belong to the row\n                        if(selectedItems[selectedItems.length-1].cells.length === 0){\n                            for(let j=0; j < this.state.selectionSet.length; j++){\n                                if(this.state.selectionSet[j].row === lastRow){\n                                    //if the row matches the last row, then push in the selected cell\n                                    selectedItems[selectedItems.length-1].cells.push( this.state.selectionSet[j].cell );\n                                }\n                            }\n                        }\n\n                    }else{\n                        lastRow = this.state.selectionSet[i].row;\n                        let newItem : iSelectedItems = { row : lastRow, cells:[], productFields : []};\n                        selectedItems.push(newItem);\n                    }\n            }\n\n            console.log(\"inner callback\", selectedItems);\n\n           for(let x=0; x < selectedItems.length; x++){\n                console.log(selectedItems[x]);\n                for(let y=0; y < this.props.data[selectedItems[x].row].length; y++){\n                    selectedItems[x].productFields.push(this.props.data[selectedItems[x].row][y] )\n                }\n           }\n\n            this.props.selectionCallback(selectedItems, this._checkedRows, \"standard-launch\");\n        }\n    }\n\n    clearSelection(){\n        this.setState({selectionSet:[], checkedRows:[]});\n        this._checkedRows = [];\n        this.selectionSet = [];\n    }\n\n    checkSelected(row:number, cell:number):selectedStateType{\n        for(let i=0; i<this.state.selectionSet.length; i++){\n            if( this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell){\n                return \"selected\";\n            }\n        }\n        //if nothing is found, return false because it isn't selected\n        return \"\";\n    }\n\n    getNumColumns(){\n        //TODO swap this out to calculating total normalized columns\n\n        return appColumns.getColumns().length;\n    }\n\n    getNumRows(){\n        return this.props.data.length;\n    }\n\n    getProductUniqueID(index : number){\n        for(let j=0; j < this.props.data[index].length; j++){\n            if(this.props.data[index][j].column === \"uniqueID\"){\n                return this.props.data[index][j].value;\n            }\n        }\n    }\n\n    mouseDownAction(row : number, cell:number){\n        this.startSelectionCell = cell;\n        this.startSelectionRow = row;\n    }\n\n    mouseUpAction(row:number, cell:number){\n        this.manageSelection(row, cell, true);\n    }\n\n    manageCheckbox(row : number){\n\n        //find if this number is in the list\n        let found : boolean = false;\n        for(let i=0; i < this._checkedRows.length; i++){\n            if(this._checkedRows[i] === row){\n                //if it is in the list remove it which unchecks\n                this._checkedRows.splice(i, 1);\n                this.setState({checkedRows : this._checkedRows});\n                found = true;\n            }\n        }\n        if(found === false){\n            this._checkedRows.push(row);\n            this.setState({checkedRows : this._checkedRows});\n        }\n\n        //handle selecting the checked\n        this.selectionSet = [];\n\n        for(let i=0; i < this._checkedRows.length; i++){\n            for(let j=0; j < this.props.data[this._checkedRows[i]].length; j++ ){\n                let selectedCell : selectionObject = {\n                    row : this._checkedRows[i]+1,\n                    cell : j,\n                    selected : true\n                };\n                this.selectionSet.push(selectedCell);\n            }\n        }\n\n        this.setState({selectionSet : this.selectionSet});\n        if(this.props.selectionCallback !== undefined){\n            this.props.selectionCallback(this.state.selectionSet, this.state.checkedRows, \"checkbox-launched\");\n        }\n        //once people use the tool, we can hide the tool tip\n        toolTipContent.showSelectRow = false;\n    }\n\n    iconCheck = (row : number):string=>{\n        for(let i=0; i < this.state.checkedRows.length; i++){\n            if(row === this.state.checkedRows[i]){\n                return \"checkbox-checked\"\n            }\n        }\n        return \"checkbox-unchecked\"\n    };\n\n    updateSelectionState = ()=>{\n        this.setState({selectionSet : this.selectionSet});\n        console.log(\"selection state: \", this.state.selectionSet);\n    };\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.props.data.length; i++){\n            for(let j=0; j < this.props.data[i].length; j++){\n                if(j === 0){\n                    cells.push(\n                        <div className=\"cell checkbox-main\" style={{gridColumn : j+1, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                OnClick={()=>this.manageCheckbox(i)}\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.selectRow()}\n                                classes={`${this.iconCheck(i)}`}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName={`${this.iconCheck(i)}`}\n                                        width=\"0.5rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className=\"cell\" style={{gridColumn : j+2, gridRow : i+1 }}>\n                        <Tile\n                            tileType=\"edit-cell\"\n                            tileLabel={this.props.data[i][j].value}\n                            mouseDownActions={\n                                [() => this.mouseDownAction(i+1,j+2)]\n                            }\n                            mouseUpActions={\n                                [\n                                    () => this.props.manageParentViews(),\n                                    () => this.mouseUpAction(i+1,j+2)\n                                ]\n                            }\n                            selectedClass={this.checkSelected(i+1, j+2)}\n                        />\n                    </div>\n                );\n\n                cells.push(cell);\n\n                if(j === this.props.data[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"nav-link\"\n                                navPath={`/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.singleProduct()}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n            }\n        }\n\n\n\n        return cells;\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let gridItems : ReactElement[] = [];\n        let columnHeaders : ReactElement[]=[];\n        //having some trouble with layout of grid and checkboxes\n        // style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}\n        let constructedGrid : ReactElement = (\n            <>\n                <div className=\"data-grid\">\n                    <div className=\"viewport\">\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}