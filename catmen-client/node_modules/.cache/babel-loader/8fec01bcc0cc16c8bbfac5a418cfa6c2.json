{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/sticky-panel/sticky-panel.tsx\";\nimport * as React from \"react\";\nexport class StickyThing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMaximized: false,\n      isOpen: this.props.stickyOpen,\n      doAnimation: this.props.doAnimation\n    };\n  }\n\n  openSticky() {\n    this.setState({\n      isOpen: true\n    });\n  }\n\n  closeSticky() {\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  toggleAnimations() {\n    this.setState({\n      doAnimation: !this.state.doAnimation\n    });\n  }\n\n  toolBar() {\n    let toolBar = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.props.toolBar != null) {\n      toolBar = this.props.toolBar;\n    }\n\n    return toolBar;\n  }\n\n  classes() {\n    let classes = \"\";\n\n    let checkAnimationToggle = classIfTrue => {\n      if (this.state.doAnimation === true) {\n        return classIfTrue;\n      }\n\n      return \"\";\n    };\n\n    switch (this.props.enterFromThisSide) {\n      case \"top\":\n        classes += \"from-top\";\n        classes += checkAnimationToggle(\" anim-top\");\n        break;\n\n      case \"bottom\":\n        classes += \"from-bottom\";\n        classes += checkAnimationToggle(\" anim-bottom\");\n        break;\n\n      case \"left\":\n        classes += \"from-left\";\n        classes += checkAnimationToggle(\" anim-left\");\n        break;\n\n      case \"right\":\n        classes += \"from-right\";\n        classes += checkAnimationToggle(\" anim-right\");\n        break;\n    }\n\n    classes += ` ${this.props.lastResortClasses}`;\n    return classes;\n  }\n\n  render() {\n    let baseSticky = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.state.isOpen === true) {\n      let style = {\n        height: this.props.heightIncludeUnits,\n        width: this.props.widthIncludeUnits,\n        backgroundColor: this.props.bgColor\n      };\n      baseSticky = /*#__PURE__*/React.createElement(\"div\", {\n        style: style,\n        className: `wf-sticky-drawer ${this.classes()}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: 'tool-bar',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, this.toolBar()), this.props.children);\n    }\n\n    return baseSticky;\n  }\n\n}\nexport default StickyThing;","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/sticky-panel/sticky-panel.tsx"],"names":["React","StickyThing","Component","constructor","props","state","isMaximized","isOpen","stickyOpen","doAnimation","openSticky","setState","closeSticky","toggleAnimations","toolBar","classes","checkAnimationToggle","classIfTrue","enterFromThisSide","lastResortClasses","render","baseSticky","style","height","heightIncludeUnits","width","widthIncludeUnits","backgroundColor","bgColor","children"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAsBA,OAAO,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAAqE;AACxEC,EAAAA,WAAW,CAACC,KAAD,EAAuB;AAC9B,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAG,KADL;AAETC,MAAAA,MAAM,EAAG,KAAKH,KAAL,CAAWI,UAFX;AAGTC,MAAAA,WAAW,EAAG,KAAKL,KAAL,CAAWK;AAHhB,KAAb;AAKH;;AAEDC,EAAAA,UAAU,GAAE;AACR,SAAKC,QAAL,CAAc;AACVJ,MAAAA,MAAM,EAAG;AADC,KAAd;AAGH;;AAEDK,EAAAA,WAAW,GAAE;AACT,SAAKD,QAAL,CAAc;AACVJ,MAAAA,MAAM,EAAG;AADC,KAAd;AAGH;;AAEDM,EAAAA,gBAAgB,GAAE;AACd,SAAKF,QAAL,CAAc;AACVF,MAAAA,WAAW,EAAG,CAAC,KAAKJ,KAAL,CAAWI;AADhB,KAAd;AAGH;;AAEDK,EAAAA,OAAO,GAAE;AACL,QAAIA,OAAsB,gBAAI,yCAA9B;;AACA,QAAG,KAAKV,KAAL,CAAWU,OAAX,IAAsB,IAAzB,EAA8B;AAC1BA,MAAAA,OAAO,GAAI,KAAKV,KAAL,CAAWU,OAAtB;AACH;;AACD,WAAOA,OAAP;AACH;;AAEDC,EAAAA,OAAO,GAAE;AACL,QAAIA,OAAgB,GAAG,EAAvB;;AACA,QAAIC,oBAAoB,GAAIC,WAAD,IAAwB;AAC/C,UAAG,KAAKZ,KAAL,CAAWI,WAAX,KAA2B,IAA9B,EAAmC;AAC/B,eAAOQ,WAAP;AACH;;AACD,aAAO,EAAP;AACH,KALD;;AAMA,YAAQ,KAAKb,KAAL,CAAWc,iBAAnB;AACI,WAAK,KAAL;AACIH,QAAAA,OAAO,IAAI,UAAX;AACAA,QAAAA,OAAO,IAAIC,oBAAoB,CAAC,WAAD,CAA/B;AACA;;AACJ,WAAK,QAAL;AACID,QAAAA,OAAO,IAAI,aAAX;AACAA,QAAAA,OAAO,IAAIC,oBAAoB,CAAC,cAAD,CAA/B;AACA;;AACJ,WAAK,MAAL;AACID,QAAAA,OAAO,IAAI,WAAX;AACAA,QAAAA,OAAO,IAAIC,oBAAoB,CAAC,YAAD,CAA/B;AACA;;AACJ,WAAK,OAAL;AACID,QAAAA,OAAO,IAAI,YAAX;AACAA,QAAAA,OAAO,IAAIC,oBAAoB,CAAC,aAAD,CAA/B;AACA;AAhBR;;AAmBAD,IAAAA,OAAO,IAAM,IAAG,KAAKX,KAAL,CAAWe,iBAAkB,EAA7C;AACA,WAAOJ,OAAP;AACH;;AAEDK,EAAAA,MAAM,GAAE;AACJ,QAAIC,UAAyB,gBAAI,yCAAjC;;AACA,QAAG,KAAKhB,KAAL,CAAWE,MAAX,KAAsB,IAAzB,EAA8B;AAC1B,UAAIe,KAAK,GAAG;AACRC,QAAAA,MAAM,EAAG,KAAKnB,KAAL,CAAWoB,kBADZ;AAERC,QAAAA,KAAK,EAAG,KAAKrB,KAAL,CAAWsB,iBAFX;AAGRC,QAAAA,eAAe,EAAG,KAAKvB,KAAL,CAAWwB;AAHrB,OAAZ;AAMAP,MAAAA,UAAU,gBACN;AAAK,QAAA,KAAK,EAAEC,KAAZ;AAAoB,QAAA,SAAS,EAAG,oBAAmB,KAAKP,OAAL,EAAe,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,KAAKD,OAAL,EAA7B,CADJ,EAEK,KAAKV,KAAL,CAAWyB,QAFhB,CADJ;AAMH;;AACD,WAAOR,UAAP;AACH;;AApFuE;AAuF5E,eAAepB,WAAf","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nexport type stickyPosition = \"top\" | \"bottom\" | \"left\" | \"right\";\n\ninterface iStickyPROPS{\n    enterFromThisSide : stickyPosition;\n    lastResortClasses : string;\n    animateIn : boolean;\n    toolBar? : ReactElement;\n    heightIncludeUnits : string;\n    widthIncludeUnits : string;\n    stickyOpen : boolean\n    bgColor : string;\n    doAnimation : boolean;\n}\n\ninterface iStickySTATE{\n    isOpen : boolean;\n    isMaximized : boolean;\n    doAnimation : boolean;\n}\n\nexport class StickyThing extends React.Component<iStickyPROPS, iStickySTATE>{\n    constructor(props : iStickyPROPS) {\n        super(props);\n        this.state = {\n            isMaximized : false,\n            isOpen : this.props.stickyOpen,\n            doAnimation : this.props.doAnimation\n        }\n    }\n\n    openSticky(){\n        this.setState({\n            isOpen : true\n        })\n    }\n\n    closeSticky(){\n        this.setState({\n            isOpen : false\n        })\n    };\n\n    toggleAnimations(){\n        this.setState({\n            doAnimation : !this.state.doAnimation\n        })\n    }\n\n    toolBar(){\n        let toolBar : ReactElement = (<></>);\n        if(this.props.toolBar != null){\n            toolBar = (this.props.toolBar);\n        }\n        return toolBar;\n    }\n\n    classes(){\n        let classes : string = \"\";\n        let checkAnimationToggle = (classIfTrue : string)=>{\n            if(this.state.doAnimation === true){\n                return classIfTrue;\n            }\n            return \"\";\n        };\n        switch (this.props.enterFromThisSide) {\n            case \"top\":\n                classes += \"from-top\";\n                classes += checkAnimationToggle(\" anim-top\");\n                break;\n            case \"bottom\":\n                classes += \"from-bottom\";\n                classes += checkAnimationToggle(\" anim-bottom\");\n                break;\n            case \"left\":\n                classes += \"from-left\";\n                classes += checkAnimationToggle(\" anim-left\");\n                break;\n            case \"right\":\n                classes += \"from-right\";\n                classes += checkAnimationToggle(\" anim-right\");\n                break;\n        }\n\n        classes += (` ${this.props.lastResortClasses}`);\n        return classes;\n    }\n\n    render(){\n        let baseSticky : ReactElement = (<></>);\n        if(this.state.isOpen === true){\n            let style = {\n                height : this.props.heightIncludeUnits,\n                width : this.props.widthIncludeUnits,\n                backgroundColor : this.props.bgColor\n            };\n\n            baseSticky = (\n                <div style={style}  className={`wf-sticky-drawer ${this.classes()}`}>\n                    <div className={'tool-bar'}>{this.toolBar()}</div>\n                    {this.props.children}\n                </div>\n            );\n        }\n        return(baseSticky)\n    }\n}\n\nexport default StickyThing;"]},"metadata":{},"sourceType":"module"}