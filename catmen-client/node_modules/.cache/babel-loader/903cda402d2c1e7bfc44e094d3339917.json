{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid-with-edit-drawer.tsx\";\nimport React from \"react\";\nimport { toolTipContent } from \"../../views/tool-tip-content/content-tool-tips\";\nimport { dataManagerMain } from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport { SingleMediaDetailsView } from \"../../views/media-library/media-details-view\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport { DataGrid } from \"../../view-components/data-grid/data-grid\";\nimport { TextInput } from \"../../view-components/text-input/text-input\";\nexport class DataGridWithEditDrawer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectedMediaIndex = 0;\n    this.dataGridRef = React.createRef();\n    this.editDrawerRef = React.createRef();\n    this.drawerFirstOpen = false;\n    this.columnDefs = void 0;\n    this.initialized = false;\n    this.selectionSet = [];\n    this.drawerInputsLength = 0;\n\n    this.manageMediaDetailsPage = mediaIndex => {\n      console.log(\"mediaIndex\", mediaIndex);\n      this.selectedMediaIndex = mediaIndex;\n      this.setState({\n        detailsOpen: !this.state.detailsOpen\n      });\n    };\n\n    this.updateValues = (row, cell, value, colName) => {\n      if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n        this.selectionSet = this.dataGridRef.current.selectionSet;\n        console.log(\"cat details view selection set: \", this.selectionSet);\n      } //console.log(\"inside drawer\", value, \" col name:\", colName);\n      //the minus 2 is the offset for the extra columns checkbox and edit\n\n\n      for (let i = 0; i < this.selectionSet.length; i++) {\n        if (this.selectionSet[i].columnName === colName) {\n          let myRow = this.selectionSet[i].row - 2;\n          let myCell = this.selectionSet[i].cell - 2; //this.workingDataSet[ myRow-2][myCell-2].value = value;\n\n          const updateSet = {\n            row: myRow,\n            cell: myCell,\n            newData: value\n          };\n          this.props.dataManager.setData(this.props.targetDataSet, updateSet);\n        }\n      }\n\n      this.setState({\n        workingData: this.props.dataManager.getProductData()\n      });\n      console.log(\"working data set:\", this.state.workingData);\n    };\n\n    this.inputFocusAction = (row, cell) => {\n      //console.log(\"row: \", row, \" cell:\", cell);\n      if (this.state.editDrawerOpen === true) {\n        this.setState({\n          focusedInput: {\n            row: row,\n            cell: cell,\n            editDrawerOpen: this.state.editDrawerOpen\n          }\n        });\n      }\n    };\n\n    this.manageSelectionSet = (selectionSet, checkBoxSelections, message) => {\n      if (checkBoxSelections.length > 0 || this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") {\n        if (checkBoxSelections.length <= 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"default\"\n          });\n        } else if (checkBoxSelections.length > 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"multiple-selected\"\n          });\n        }\n\n        this.initialized = true;\n      } else {\n        this.setState({\n          footerOpen: false\n        });\n      }\n    };\n\n    this.columnDefs = this.props.columnsData;\n    this.state = {\n      detailsOpen: false,\n      editDrawerOpen: false,\n      //TODO need to adjust data manager\n      columnsData: this.props.columnsData,\n      workingData: this.props.gridData,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      },\n      footerOpen: false,\n      footerMode: \"default\",\n      editDrawerMaximized: false\n    };\n  }\n\n  getMediaDetailsView() {\n    if (this.state.detailsOpen === true) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SingleMediaDetailsView, {\n        mediaData: dataManagerMain.getMediaObjectData()[this.selectedMediaIndex],\n        closeSingleMediaView: () => this.manageMediaDetailsPage(0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getColumnLabel(colName) {\n    //utility method for getting column data obj from\n    let columnLabel = \"\";\n\n    for (let i = 0; i < this.columnDefs.length; i++) {\n      if (this.columnDefs[i].columnName === colName) {\n        columnLabel = this.columnDefs[i].columnLabel;\n      }\n    }\n\n    return columnLabel;\n  }\n\n  openEditDrawer() {\n    this.drawerFirstOpen = true;\n    this.setState({\n      editDrawerOpen: true\n    });\n  } //DRAWER RELATED\n\n\n  maximizeEditDrawer() {\n    this.setState({\n      editDrawerMaximized: !this.state.editDrawerMaximized\n    });\n  }\n\n  closeEditDrawer() {\n    this.setState({\n      editDrawerOpen: false,\n      editDrawerMaximized: false,\n      focusedInput: {\n        row: 0,\n        cell: 0,\n        editDrawerOpen: false\n      }\n    });\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.dataGridRef.current.clearSelection();\n    }\n\n    this.drawerFirstOpen = false;\n  }\n\n  shiftFocus(shiftIndex) {\n    console.log(\"shifted focus: \", shiftIndex);\n    let inputs = document.getElementsByClassName(\"InputBox\");\n\n    if (inputs[0] != undefined) {\n      if (shiftIndex === inputs.length - 1) {\n        console.log(\"shifted focus on end\"); // @ts-ignore\n\n        inputs[0].focus(); // @ts-ignore\n\n        inputs[0].select();\n      }\n    }\n  }\n\n  getEditDrawer() {\n    if (this.state.editDrawerOpen === false) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.selectionSet = this.dataGridRef.current.selectionSet; // console.log(\"cat details view selection set: \", this.selectionSet)\n    }\n\n    let inputs = [];\n    let selectedItems = []; //Create list of selection items that need inputs (i.e. one input per column)\n\n    i: for (let i = 0; i < this.selectionSet.length; i++) {\n      j: for (let j = 0; j < selectedItems.length; j++) {\n        if (this.selectionSet[i].columnName === selectedItems[j].columnName) {\n          continue i;\n        }\n      }\n\n      let row = this.selectionSet[i].row;\n      let cell = this.selectionSet[i].cell; //TODO this needs to be genericized\n      //let productDataItem = catmanData.productData[row-2][cell-2];\n\n      let productDataItem = this.props.gridData[row - 2][cell - 2];\n      selectedItems.push(productDataItem);\n    } //Store number of inputs for later use\n\n\n    this.drawerInputsLength = selectedItems.length; //CREATE INPUTS for DRAWER\n\n    for (let i = 0; i < selectedItems.length; i++) {\n      let input = /*#__PURE__*/React.createElement(TextInput, {\n        row: this.selectionSet[i].row,\n        cell: this.selectionSet[i].cell,\n        columnName: this.selectionSet[i].columnName,\n        label: this.getColumnLabel(selectedItems[i].columnName),\n        currentValue: selectedItems[i].value,\n        onChangeAction: this.updateValues,\n        onFocusAction: this.inputFocusAction,\n        onBlurActions: [() => this.shiftFocus(i)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }\n      });\n      inputs.push(input);\n    }\n\n    let maximize = valueCheck => {\n      if (valueCheck === true) {\n        return \"maximized\";\n      } else {\n        return \"catman-edit-default restored\";\n      }\n    };\n\n    let restoreAndMaximizeTooltip = valueCheck => {\n      if (valueCheck === false) {\n        return toolTipContent.maximizeDrawer();\n      } else {\n        return toolTipContent.restoreDrawer();\n      }\n    };\n\n    let restoreAndMaximizeBtnIcon = valueCheck => {\n      if (valueCheck === false) {\n        return \"icon-maximize\";\n      } else {\n        return \"icon-restore-btn\";\n      }\n    };\n\n    let drawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.state.editDrawerOpen === true) {\n      drawer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        ref: this.editDrawerRef,\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: `catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`,\n        animateIn: true,\n        heightIncludeUnits: \"\",\n        widthIncludeUnits: \"\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        toolBar: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tool-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.maximizeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: restoreAndMaximizeTooltip(this.state.editDrawerMaximized),\n        toolTipTimeOutInMS: 10000,\n        classes: \"tool-bar-btn icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: `${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`,\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.closeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: toolTipContent.closeDrawer(),\n        toolTipTimeOutInMS: 10000,\n        classes: \"icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: \"icon-close\",\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-edit-area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 25\n        }\n      }, inputs)));\n    }\n\n    return drawer;\n  } //MANAGE GRID\n  //GRID MANAGEMENT\n\n\n  conditionClasses() {\n    if (this.state.editDrawerOpen === true) {\n      return \"drawer-open\";\n    }\n  }\n\n  addAction(addType) {\n    console.log(\"added item or items: \", addType);\n\n    switch (addType) {\n      case \"add-attribute\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"add-products\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  getGridArea() {\n    return /*#__PURE__*/React.createElement(DataGrid, {\n      ref: this.dataGridRef,\n      data: this.state.workingData,\n      manageParentViews: () => this.openEditDrawer(),\n      selectionCallback: this.manageSelectionSet,\n      columnsData: this.state.columnsData,\n      classes: this.conditionClasses(),\n      addAction: this.addAction,\n      focusedItem: this.state.focusedInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.getEditDrawer(), this.getGridArea(), this.getMediaDetailsView());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid-with-edit-drawer.tsx"],"names":["React","toolTipContent","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGrid","TextInput","DataGridWithEditDrawer","Component","constructor","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","drawerFirstOpen","columnDefs","initialized","selectionSet","drawerInputsLength","manageMediaDetailsPage","mediaIndex","console","log","setState","detailsOpen","state","updateValues","row","cell","value","colName","current","undefined","i","length","columnName","myRow","myCell","updateSet","newData","dataManager","setData","targetDataSet","workingData","getProductData","inputFocusAction","editDrawerOpen","focusedInput","manageSelectionSet","checkBoxSelections","message","footerOpen","footerMode","columnsData","gridData","editDrawerMaximized","getMediaDetailsView","getMediaObjectData","getColumnLabel","columnLabel","openEditDrawer","maximizeEditDrawer","closeEditDrawer","clearSelection","shiftFocus","shiftIndex","inputs","document","getElementsByClassName","focus","select","getEditDrawer","selectedItems","j","productDataItem","push","input","maximize","valueCheck","restoreAndMaximizeTooltip","maximizeDrawer","restoreDrawer","restoreAndMaximizeBtnIcon","drawer","closeDrawer","conditionClasses","addAction","addType","getGridArea","render"],"mappings":"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","sourcesContent":["import React, {ReactElement} from \"react\";\n\nimport {toolTipContent} from \"../../views/tool-tip-content/content-tool-tips\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"../../views/media-library/media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../_catman-data-types\";\nimport {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\nimport {iColumn} from \"../../_sample-data/product-columns\";\nimport {focusInputType} from \"../../views/catalog-views/catalog-details/catalog-details-view\";\nimport {TextInput} from \"../../view-components/text-input/text-input\";\nimport {dataSetType} from \"../../data-components/data-manager/data-manager\";\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\n\ninterface iPROPS {\n    message?: string;\n    gridData : iDataGridItem[][];\n    columnsData : iColumn[];\n    dataManager : DataManager;\n    targetDataSet : dataSetType;\n}\n\ninterface iSTATE{\n    detailsOpen : boolean;\n    editDrawerOpen : boolean;\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n    focusedInput : focusInputType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    editDrawerMaximized : boolean;\n}\n\nexport class DataGridWithEditDrawer extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.columnDefs = this.props.columnsData;\n        this.state={\n            detailsOpen : false,\n            editDrawerOpen : false,\n            //TODO need to adjust data manager\n            columnsData : this.props.columnsData,\n            workingData : this.props.gridData,\n            focusedInput : { row:0, cell:0, editDrawerOpen : false},\n            footerOpen : false,\n            footerMode : \"default\",\n            editDrawerMaximized : false\n        }\n    }\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n    drawerFirstOpen : boolean = false;\n    //COLUMN DEFINITIONS:\n    columnDefs : iColumn[];\n\n    //just for the fist launch of checkbox editing\n    initialized : boolean = false;\n\n    selectionSet : selectionObject[] = [];\n    drawerInputsLength = 0;\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        console.log(\"mediaIndex\", mediaIndex );\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({detailsOpen : !this.state.detailsOpen})\n    };\n\n    getMediaDetailsView(){\n        if(this.state.detailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n\n    getColumnLabel(colName : string) : string{\n        //utility method for getting column data obj from\n        let columnLabel = \"\";\n        for(let i = 0; i < this.columnDefs.length; i++){\n            if(this.columnDefs[i].columnName === colName){\n                columnLabel = this.columnDefs[i].columnLabel;\n            }\n        }\n        return columnLabel;\n    }\n\n    updateValues=(row : number, cell:number, value:string, colName : string)=>{\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n            console.log(\"cat details view selection set: \", this.selectionSet)\n        }\n        //console.log(\"inside drawer\", value, \" col name:\", colName);\n        //the minus 2 is the offset for the extra columns checkbox and edit\n        for(let i =0; i < this.selectionSet.length; i++){\n            if(this.selectionSet[i].columnName === colName){\n                let myRow = this.selectionSet[i].row-2;\n                let myCell = this.selectionSet[i].cell-2;\n\n                //this.workingDataSet[ myRow-2][myCell-2].value = value;\n                const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n                this.props.dataManager.setData(this.props.targetDataSet, updateSet);\n            }\n\n        }\n\n        this.setState({workingData : this.props.dataManager.getProductData()});\n        console.log( \"working data set:\", this.state.workingData );\n    };\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n\n    //DRAWER RELATED\n    maximizeEditDrawer(){\n        this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n    }\n\n    closeEditDrawer(){\n        this.setState({\n            editDrawerOpen : false,\n            editDrawerMaximized : false,\n            focusedInput : {row:0, cell:0, editDrawerOpen:false}\n        });\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n        this.drawerFirstOpen = false;\n    }\n\n    shiftFocus(shiftIndex: number){\n\n        console.log(\"shifted focus: \", shiftIndex);\n        let inputs: HTMLCollection = document.getElementsByClassName(\"InputBox\");\n        if(inputs[0] != undefined){\n            if(shiftIndex === inputs.length-1){\n                console.log(\"shifted focus on end\");\n                // @ts-ignore\n                inputs[0].focus();\n                // @ts-ignore\n                inputs[0].select();\n            }\n        }\n    };\n\n    inputFocusAction=(row : number, cell:number)=>{\n        //console.log(\"row: \", row, \" cell:\", cell);\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n        }\n    };\n\n    getEditDrawer():ReactElement{\n\n        if(this.state.editDrawerOpen === false){\n            return(<></>);\n        }\n\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n            // console.log(\"cat details view selection set: \", this.selectionSet)\n        }\n\n        let inputs : ReactElement[] = [];\n        let selectedItems : iDataGridItem[] = [];\n\n        //Create list of selection items that need inputs (i.e. one input per column)\n        i: for(let i=0; i < this.selectionSet.length; i++){\n            j: for(let j=0; j < selectedItems.length; j++){\n                if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n                    continue i;\n                }\n            }\n            let row = this.selectionSet[i].row;\n            let cell = this.selectionSet[i].cell;\n            //TODO this needs to be genericized\n            //let productDataItem = catmanData.productData[row-2][cell-2];\n            let productDataItem = this.props.gridData[row-2][cell-2];\n            selectedItems.push(productDataItem);\n        }\n\n        //Store number of inputs for later use\n        this.drawerInputsLength = selectedItems.length;\n\n        //CREATE INPUTS for DRAWER\n        for( let i=0; i < selectedItems.length; i++){\n            let input = (\n                <TextInput\n                    row={this.selectionSet[i].row}\n                    cell={this.selectionSet[i].cell}\n                    columnName={this.selectionSet[i].columnName}\n                    label={this.getColumnLabel( selectedItems[i].columnName )}\n                    currentValue={ selectedItems[i].value}\n                    onChangeAction={this.updateValues}\n                    onFocusAction={this.inputFocusAction}\n                    onBlurActions={[ ()=>this.shiftFocus(i) ]}\n                />\n            );\n            inputs.push(input)\n        }\n\n        let maximize = (valueCheck : boolean)=>{\n            if(valueCheck === true){\n                return \"maximized\"\n            }else{\n                return \"catman-edit-default restored\"\n            }\n        };\n\n        let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return toolTipContent.maximizeDrawer();\n            }else{\n                return toolTipContent.restoreDrawer();\n            }\n        };\n\n        let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return \"icon-maximize\"\n            }else{\n                return \"icon-restore-btn\"\n            }\n        };\n\n\n        let drawer = (<></>);\n        if(this.state.editDrawerOpen === true){\n            drawer = (\n                <>\n                    <StickyThing\n                        ref = {this.editDrawerRef}\n                        enterFromThisSide=\"bottom\"\n                        lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n                        animateIn={true}\n                        heightIncludeUnits=\"\"\n                        widthIncludeUnits={\"\"}\n                        stickyOpen={true}\n                        bgColor={\"#CECECE\"}\n                        doAnimation={true}\n                        toolBar=\"none\"\n                    >\n                        <div className={\"tool-bar\"}>\n                            <div></div>\n                            <div className=\"drawer-controls\">\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.maximizeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"tool-bar-btn icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n                                <AppButton\n                                    buttonType={\"secondary-action\"}\n                                    buttonLabel=\"\"\n                                    OnClick={()=>this.closeEditDrawer()}\n                                    tooltipType=\"custom\"\n                                    tooltip={toolTipContent.closeDrawer()}\n                                    toolTipTimeOutInMS={10000}\n                                    classes=\"icon-only-btn\"\n                                    iconLeft={\n                                        <CatmanIcon\n                                            iconName=\"icon-close\"\n                                            classes=\" \"\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                        />\n                                    }\n                                />\n\n                            </div>\n                        </div>\n\n                        <div className=\"drawer-edit-area\">\n                            {inputs}\n                        </div>\n                    </StickyThing>\n                </>\n            );\n        }\n        return drawer;\n    }\n\n    //MANAGE GRID\n    //GRID MANAGEMENT\n    manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )=>{\n        if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n            if(checkBoxSelections.length <= 1){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n            }else if(checkBoxSelections.length > 1 ){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n            }\n            this.initialized = true;\n        }else{\n            this.setState({footerOpen : false});\n        }\n\n    };\n    conditionClasses(){\n        if(this.state.editDrawerOpen === true){\n            return \"drawer-open\";\n        }\n    }\n    addAction(addType:string){\n        console.log(\"added item or items: \", addType );\n        switch (addType) {\n            case \"add-attribute\":\n\n                return(<></>);\n            case \"add-products\":\n\n                return(<></>);\n\n\n\n        }\n    }\n\n    getGridArea(){\n        return (\n            <DataGrid\n                ref={this.dataGridRef}\n                data={this.state.workingData}\n                manageParentViews={()=>this.openEditDrawer()}\n                selectionCallback={this.manageSelectionSet}\n                columnsData={this.state.columnsData}\n                classes={this.conditionClasses()}\n                addAction={this.addAction}\n                focusedItem={this.state.focusedInput}\n            />\n        )\n    }\n\n\n\n\n\n    render(){\n        return(\n            <>\n                {this.getEditDrawer()}\n                {this.getGridArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}