{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/wizards/create-product-group/add-variants-wizard.tsx\";\nimport * as React from \"react\";\nimport { Wizard } from \"../../../view-components/wizard/wizard\";\nimport { toolTipContent } from \"../../_common/tool-tip-content/content-tool-tips\";\nimport { CatmanIcon } from \"../../../svg/icons/icons\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport { dataManagerMain } from \"../../../index\";\nimport { StandardTextInput } from \"../../../view-components/text-input/standard-text-input\";\nexport class AddVariantsWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numberOfVariants = 0;\n\n    this.getInputValue = (row, cell, value) => {\n      console.log(\"input value\", row, \" \", cell, \" \", value);\n      this.numberOfVariants = parseInt(value);\n    };\n\n    this.state = {\n      wizardPanel: \"start\"\n    };\n  }\n\n  addVariants() {\n    console.log(this.props.selectedCheckBoxes);\n    let newItem = [];\n\n    if (this.props.selectedCheckBoxes !== undefined) {\n      if (this.props.selectedCheckBoxes.length === 1) {\n        newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[this.props.selectedCheckBoxes[0]]));\n        let newItems = [];\n\n        for (let i = 0; i < this.numberOfVariants; i++) {\n          newItems.push(JSON.parse(JSON.stringify(newItem)));\n        }\n\n        dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0, ...newItems);\n      } else {}\n    }\n\n    console.log(\"added variant\", dataManagerMain.productData);\n    this.props.manageModal();\n  }\n\n  wizardNavigation(panelName) {\n    this.setState({\n      wizardPanel: panelName\n    });\n  }\n\n  element() {\n    switch (this.state.wizardPanel) {\n      case \"closed\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"start\":\n        const startButtons = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Cancel\",\n          OnClick: () => {},\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCancel(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"cancel\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Continue\",\n          OnClick: () => this.wizardNavigation(\"staging-area\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }\n        }));\n        const startSentences = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"sentence-input\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }\n        }, \"Add\"), /*#__PURE__*/React.createElement(StandardTextInput, {\n          label: \"Number of variants\",\n          onChangeAction: this.getInputValue,\n          currentValue: \"1\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }\n        }, \"New blank product stubs as variants: \"), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Go\",\n          OnClick: () => this.addVariants(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.addBlankStubs(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add-invert\",\n            classes: \"reverse\",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }\n        }));\n        return /*#__PURE__*/React.createElement(Wizard, {\n          wizardButtons: startButtons,\n          sentenceInputs: startSentences,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }\n        });\n\n      case \"staging-area\":\n        const stagingButtons = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Back\",\n          OnClick: () => this.wizardNavigation(\"start\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCancel(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"cancel\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Confirm & Add to Catalog\",\n          OnClick: () => this.addVariants(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }\n        }));\n        const stagingSentences = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"sentence-input\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }\n        }, \"Add\"), /*#__PURE__*/React.createElement(StandardTextInput, {\n          label: \"Number of variants\",\n          onChangeAction: this.getInputValue,\n          currentValue: \"1\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }\n        }, \"New blank product stubs as variants: \"), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Go\",\n          OnClick: () => this.addVariants(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.addBlankStubs(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add-invert\",\n            classes: \"reverse\",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }\n        }));\n        return /*#__PURE__*/React.createElement(Wizard, {\n          wizardButtons: stagingButtons,\n          sentenceInputs: stagingSentences,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 24\n          }\n        });\n    }\n  }\n\n  render() {\n    return this.element();\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/wizards/create-product-group/add-variants-wizard.tsx"],"names":["React","Wizard","toolTipContent","CatmanIcon","AppButton","dataManagerMain","StandardTextInput","AddVariantsWizard","Component","constructor","props","numberOfVariants","getInputValue","row","cell","value","console","log","parseInt","state","wizardPanel","addVariants","selectedCheckBoxes","newItem","undefined","length","JSON","parse","stringify","productData","newItems","i","push","splice","manageModal","wizardNavigation","panelName","setState","element","startButtons","footerCancel","footerDelete","startSentences","addBlankStubs","stagingButtons","stagingSentences","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {iWizardStep, Wizard} from \"../../../view-components/wizard/wizard\";\nimport {ReactElement} from \"react\";\nimport {toolTipContent} from \"../../_common/tool-tip-content/content-tool-tips\";\nimport {CatmanIcon} from \"../../../svg/icons/icons\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport {DividerLine} from \"../../../view-components/divider-line/divider-line\";\nimport {TextInput} from \"../../../view-components/text-input/text-input\";\nimport {Illustration} from \"../../../svg/illustrations/illustrations\";\nimport {dataManagerMain} from \"../../../index\";\nimport {iDataGridItem} from \"../../../view-components/data-grid/data-types-for-data-grid\";\nimport {StandardTextInput} from \"../../../view-components/text-input/standard-text-input\";\n\ninterface iPROPS{\n    addAction : Function\n    selectedCheckBoxes? : number[];\n    groups : string[];\n    manageModal : Function;\n}\n\ntype addVariantWizardNav = \"closed\" | \"start\" | \"staging-area\" | \"upload-3\";\n\ninterface iSTATE{\n    wizardPanel : addVariantWizardNav;\n}\n\nexport class AddVariantsWizard extends React.Component<iPROPS, iSTATE>{\n\n    constructor(props:iPROPS) {\n        super(props);\n        this.state={\n            wizardPanel : \"start\"\n        }\n    }\n\n    numberOfVariants = 0;\n\n    addVariants(){\n        console.log(this.props.selectedCheckBoxes);\n        let newItem : iDataGridItem[] = [];\n        if(this.props.selectedCheckBoxes !== undefined){\n            if(this.props.selectedCheckBoxes.length === 1){\n                newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[ this.props.selectedCheckBoxes[0]]) );\n                let newItems = [];\n\n                for(let i=0; i < this.numberOfVariants; i++){\n                    newItems.push( JSON.parse(JSON.stringify(newItem)) );\n                }\n\n                dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0,...newItems);\n            }else{\n\n            }\n        }\n        console.log(\"added variant\",dataManagerMain.productData);\n        this.props.manageModal();\n    }\n\n    getInputValue = (row:number, cell:number, value:string )=>{\n        console.log(\"input value\", row, \" \", cell, \" \", value);\n        this.numberOfVariants = parseInt(value);\n    };\n\n    wizardNavigation(panelName : addVariantWizardNav){\n        this.setState({wizardPanel : panelName})\n    }\n\n    element(){\n        switch (this.state.wizardPanel) {\n            case \"closed\":\n                return(<></>);\n            case \"start\":\n                const startButtons = (\n                    <>\n                        <AppButton\n                            buttonType=\"secondary-action\"\n                            buttonLabel=\"Cancel\"\n                            OnClick={ ()=>{} }\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerCancel()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"cancel\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Continue\"\n                            OnClick={()=>this.wizardNavigation(\"staging-area\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerDelete()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-delete\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                    </>\n                );\n\n                const startSentences = (\n                    <div className=\"sentence-input\">\n                        <p>Add</p>\n                        <StandardTextInput\n                            label={\"Number of variants\"}\n                            onChangeAction={this.getInputValue}\n                            currentValue={\"1\"}\n                        />\n                        <p>New blank product stubs as variants: </p>\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Go\"\n                            OnClick={()=>this.addVariants()}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.addBlankStubs()}\n                            toolTipTimeOutInMS={10000}\n                            tooltipXOffset={0}\n                            tooltipYOffset={20}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-add-invert\"\n                                    classes=\"reverse\"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                    </div>\n                );\n                return(\n                    <Wizard\n                        wizardButtons={startButtons}\n                        sentenceInputs={startSentences}\n                    />\n                );\n            case \"staging-area\":\n                const stagingButtons = (\n                    <>\n                        <AppButton\n                            buttonType=\"secondary-action\"\n                            buttonLabel=\"Back\"\n                            OnClick={ ()=>this.wizardNavigation(\"start\") }\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerCancel()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"cancel\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Confirm & Add to Catalog\"\n                            OnClick={()=>this.addVariants()}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerDelete()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-delete\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                    </>\n                );\n\n                const stagingSentences = (\n                    <div className=\"sentence-input\">\n                        <p>Add</p>\n                        <StandardTextInput\n                            label={\"Number of variants\"}\n                            onChangeAction={this.getInputValue}\n                            currentValue={\"1\"}\n                        />\n                        <p>New blank product stubs as variants: </p>\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Go\"\n                            OnClick={()=>this.addVariants()}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.addBlankStubs()}\n                            toolTipTimeOutInMS={10000}\n                            tooltipXOffset={0}\n                            tooltipYOffset={20}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-add-invert\"\n                                    classes=\"reverse\"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                    </div>\n                );\n                return(<Wizard\n                    wizardButtons={stagingButtons}\n                    sentenceInputs={stagingSentences}\n                />)\n        }\n    }\n\n    render(){\n        return(this.element())\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}