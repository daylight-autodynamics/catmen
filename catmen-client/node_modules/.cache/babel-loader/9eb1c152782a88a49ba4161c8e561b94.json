{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport { ToolTipContent } from \"../heru-tool-tip/tool-tip-content\"; //data grid data should be an array of arrays\n//each product is an array of attributes\n\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectionSet = [];\n    this.numCols = void 0;\n    this.numRows = void 0;\n    this.startSelectionRow = void 0;\n    this.startSelectionCell = void 0;\n    this.cellRange = void 0;\n    this._checkedRows = [];\n\n    this.iconCheck = row => {\n      for (let i = 0; i < this.state.checkedRows.length; i++) {\n        if (row === this.state.checkedRows[i]) {\n          return \"checkbox-checked\";\n        }\n      }\n\n      return \"checkbox-unchecked\";\n    };\n\n    this.updateSelectionState = () => {\n      this.setState({\n        selectionSet: this.selectionSet\n      });\n    };\n\n    this.state = {\n      workingDataSet: this.props.data,\n      selectionSet: [],\n      checkedRows: [],\n      hoveredRow: \"\"\n    };\n    this.startSelectionRow = 0;\n    this.startSelectionCell = 0;\n    this.cellRange = {\n      startCell: 0,\n      endCell: 0,\n      startRow: 0,\n      endRow: 0\n    };\n    this.numCols = this.getNumColumns();\n    this.numRows = this.getNumRows();\n  }\n\n  manageSelection(row, cell, columnName, clearSelection) {\n    if (clearSelection) {\n      this.selectionSet = [];\n      this._checkedRows = [];\n    }\n\n    if (this.startSelectionRow > row) {\n      this.cellRange.startRow = row;\n      this.cellRange.endRow = this.startSelectionRow;\n    } else {\n      this.cellRange.startRow = this.startSelectionRow;\n      this.cellRange.endRow = row;\n    }\n\n    if (this.startSelectionCell > cell) {\n      this.cellRange.startCell = cell;\n      this.cellRange.endCell = this.startSelectionCell;\n    } else {\n      this.cellRange.startCell = this.startSelectionCell;\n      this.cellRange.endCell = cell;\n    }\n\n    if (row === this.startSelectionRow && cell === this.startSelectionCell) {\n      this.selectionSet.push({\n        row: row,\n        cell: cell,\n        selected: true,\n        columnName: this.props.columnsData[cell - 2].columnName //columnName : appColumns.getColumns[cell-2].columnName\n\n      });\n    }\n\n    for (let i = this.cellRange.startRow; i < this.cellRange.endRow + 1; i++) {\n      for (let j = this.cellRange.startCell; j < this.cellRange.endCell + 1; j++) {\n        this.selectionSet.push({\n          row: i,\n          cell: j,\n          selected: true,\n          columnName: this.props.columnsData[j - 2].columnName\n        });\n      }\n    } // handle single cell as start and end\n\n\n    console.log(\"@@@ this.selectionSet: \", this.selectionSet);\n    console.log(\"*** this.state.selectionSet: \", this.state.selectionSet);\n\n    if (this.selectionSet.length === 2) {\n      if (this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell) {\n        this.selectionSet.splice(1, 1);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet,\n      checkedRows: this._checkedRows\n    });\n\n    if (this.props.selectionCallback !== undefined && this.props.selectionCallback !== null) {\n      let selectedItems = [];\n      let lastRow = 0; // work through the selection set to organize things\n\n      i: for (let i = 0; i < this.selectionSet.length; i++) {\n        if (i === 0) {\n          //if it's the first one let's create a new entry\n          lastRow = this.selectionSet[0].row;\n          let newItem = {\n            row: lastRow,\n            cells: [],\n            productFields: []\n          };\n          selectedItems.push(newItem);\n        } //loop over the existing list of rows to create new ones\n\n\n        if (this.selectionSet[i].row === lastRow) {\n          //one more loop over the list to grab all the cells that belong to the row\n          if (selectedItems[selectedItems.length - 1].cells.length === 0) {\n            for (let j = 0; j < this.selectionSet.length; j++) {\n              if (this.selectionSet[j].row === lastRow) {\n                //if the row matches the last row, then push in the selected cell\n                selectedItems[selectedItems.length - 1].cells.push(this.selectionSet[j].cell);\n              }\n            }\n          }\n        } else {\n          lastRow = this.selectionSet[i].row;\n          let newItem = {\n            row: lastRow,\n            cells: [],\n            productFields: []\n          };\n          selectedItems.push(newItem);\n        }\n      }\n\n      for (let x = 0; x < selectedItems.length; x++) {\n        for (let y = 0; y < this.state.workingDataSet[selectedItems[x].row - 2].length; y++) {\n          selectedItems[x].productFields.push(this.state.workingDataSet[selectedItems[x].row - 2][y]);\n        }\n      }\n\n      this.props.selectionCallback(selectedItems, this._checkedRows, \"standard-launch\");\n    }\n  }\n\n  clearSelection() {\n    this.setState({\n      selectionSet: [],\n      checkedRows: []\n    });\n    this._checkedRows = [];\n    this.selectionSet = [];\n  }\n\n  checkSelected(row, cell) {\n    for (let i = 0; i < this.state.selectionSet.length; i++) {\n      if (this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell) {\n        return \"selected\";\n      }\n    } //if nothing is found, return false because it isn't selected\n\n\n    return \"\";\n  }\n\n  getNumColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return this.props.columnsData.length;\n  }\n\n  getNumRows() {\n    if (this.state.workingDataSet.length > 0) {\n      return this.state.workingDataSet.length;\n    } else {\n      return this.props.data.length;\n    }\n  }\n\n  getProductUniqueID(index) {\n    for (let j = 0; j < this.state.workingDataSet[index].length; j++) {\n      if (this.state.workingDataSet[index][j].columnName === \"uniqueID\") {\n        return this.state.workingDataSet[index][j].value;\n      }\n    }\n  }\n\n  mouseDownAction(row, cell) {\n    this.startSelectionCell = cell;\n    this.startSelectionRow = row;\n  }\n\n  mouseUpAction(row, cell, columnName) {\n    //console.log(\"@@@check\", row, \" \", cell, \" \", columnName);\n    this.manageSelection(row, cell, columnName, true);\n    console.log(\"selection set: \", this.selectionSet);\n  }\n\n  hoverRowAction(row) {\n    this.setState({\n      hoveredRow: row.toString()\n    });\n    console.log(\"hovered\");\n  }\n\n  manageCheckbox(row) {\n    //find if this number is in the list\n    let found = false;\n    console.log(\"@@ checked rows: \", row);\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      if (this._checkedRows[i] === row) {\n        //if it is in the list remove it which unchecks\n        this._checkedRows.splice(i, 1);\n\n        this.setState({\n          checkedRows: this._checkedRows\n        });\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      this._checkedRows.push(row);\n\n      this.setState({\n        checkedRows: this._checkedRows\n      });\n    } //handle selecting the checked\n    //First reset the cell selection\n\n\n    this.selectionSet = [];\n\n    for (let i = 0; i < this._checkedRows.length; i++) {\n      for (let j = 0; j < this.state.workingDataSet[this._checkedRows[i]].length; j++) {\n        let selectedCell = {\n          row: this._checkedRows[i] + 2,\n          cell: j,\n          selected: true,\n          columnName: this.props.columnsData[j].columnName\n        };\n        this.selectionSet.push(selectedCell);\n      }\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet\n    });\n\n    if (this.props.selectionCallback !== undefined) {\n      this.props.selectionCallback(this.state.selectionSet, this.state.checkedRows, \"checkbox-launched\");\n    } //once people use the tool, we can hide the tool tip\n\n\n    toolTipContent.showSelectRow = false;\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.state.workingDataSet.length; i++) {\n      for (let j = 0; j < this.state.workingDataSet[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            id: `row-${i + 2}-start`,\n            className: `cell checkbox-main `,\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 2,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            OnClick: () => this.manageCheckbox(i),\n            hoverActions: [() => this.hoverRowAction(i + 2)],\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.selectRow(),\n            classes: `${this.iconCheck(i)}`,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: `${this.iconCheck(i)}`,\n              width: \"100%\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(CatmanIcon, {\n            classes: \"shading-l-r\",\n            iconName: \"fader-left-to-right\",\n            width: \"0.5rem\",\n            height: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: `cell row-${i + 2}`,\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 2\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: this.props.columnsData[j].control,\n          tileLabel: this.state.workingDataSet[i][j].value,\n          mouseDownActions: [() => this.mouseDownAction(i + 2, j + 2)],\n          mouseUpActions: [() => this.props.manageParentViews(), () => this.mouseUpAction(i + 2, j + 2, this.props.columnsData[j].columnName)],\n          selectedClass: this.checkSelected(i + 2, j + 2),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 25\n          }\n        }));\n\n        if (this.props.columnsData[j].control != \"hidden\") {\n          cells.push(cell);\n        }\n\n        if (j === this.state.workingDataSet[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 2,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"nav-link\",\n            navPath: `/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`,\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.singleProduct(),\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(CatmanIcon, {\n            classes: \"shading\",\n            iconName: \"fader-right-to-left\",\n            width: \"0.5rem\",\n            height: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  getColumnHeaders() {\n    let columnsHeads = [];\n\n    for (let i = 0; i < this.props.columnsData.length; i++) {\n      if (i === 0) {\n        columnsHeads.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell checkbox-main grid-header\",\n          style: {\n            gridColumn: i + 1,\n            gridRow: 1,\n            zIndex: 120 + this.numCols\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          OnClick: () => this.manageCheckbox(i),\n          buttonType: \"transparent-bg\",\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.selectRow(),\n          classes: ` `,\n          iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: `${this.iconCheck(i)}`,\n            width: \"0.5rem\",\n            height: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 25\n          }\n        })));\n      }\n\n      const columnHeadTooltip = (tooltiptype, tooltip, header) => {\n        switch (tooltiptype) {\n          case \"basic\":\n            return /*#__PURE__*/React.createElement(ToolTipContent, {\n              header: header,\n              copy: tooltip,\n              tooltipType: \"deluxe\",\n              icon: /*#__PURE__*/React.createElement(CatmanIcon, {\n                iconName: \"icon-add-invert\",\n                classes: \"\",\n                height: \"1.5rem\",\n                width: \"1.5rem\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 31\n                }\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 30\n              }\n            });\n\n          case \"custom\":\n            return this.props.columnsData[i].toolTip;\n        }\n\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n      };\n\n      let columnHead = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cell grid-header\",\n        style: {\n          gridColumn: i + 2,\n          gridRow: 1,\n          zIndex: this.numRows + 100 + i\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Tile, {\n        tileType: \"column-header\",\n        tileLabel: this.props.columnsData[i].columnLabel,\n        toolTip: columnHeadTooltip(this.props.columnsData[i].tooltipType, this.props.columnsData[i].toolTip, this.props.columnsData[i].columnLabel),\n        mouseDownActions: [],\n        mouseUpActions: [() => this.props.manageParentViews()],\n        selectedClass: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 21\n        }\n      }));\n\n      if (this.props.columnsData[i].control != \"hidden\") {\n        columnsHeads.push(columnHead);\n      } //final column head action\n\n\n      if (i === this.props.columnsData.length - 1) {\n        columnsHeads.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell details grid-header\",\n          style: {\n            gridColumn: this.props.columnsData.length + 2,\n            gridRow: 1,\n            zIndex: 200 + this.numCols + 2\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"button-custom\",\n          classes: \"add-column\",\n          navPath: `/catalog/spreadsheet`,\n          OnClick: () => this.props.addAction(\"add-attribute\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.insertColumn(),\n          iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-plus\",\n            width: \"0.5rem\",\n            height: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(CatmanIcon, {\n          classes: \"shading-l-r\",\n          iconName: \"fader-right-to-left\",\n          width: \"0.5rem\",\n          height: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 25\n          }\n        })));\n      }\n    }\n\n    return columnsHeads;\n  }\n\n  gridStyles() {\n    let style = `\n            .row-${this.state.hoveredRow} {\n                background-color: yellow;\n            }\n            `;\n    return /*#__PURE__*/React.createElement(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: `${style}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 16\n      }\n    });\n  }\n\n  render() {\n    let columnHeaders = this.getColumnHeaders(); //having some trouble with layout of grid and checkboxes\n    // style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}\n\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: `data-grid ${this.props.classes}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 17\n      }\n    }, this.gridStyles(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","ToolTipContent","DataGrid","Component","constructor","props","selectionSet","numCols","numRows","startSelectionRow","startSelectionCell","cellRange","_checkedRows","iconCheck","row","i","state","checkedRows","length","updateSelectionState","setState","workingDataSet","data","hoveredRow","startCell","endCell","startRow","endRow","getNumColumns","getNumRows","manageSelection","cell","columnName","clearSelection","push","selected","columnsData","j","console","log","splice","selectionCallback","undefined","selectedItems","lastRow","newItem","cells","productFields","x","y","checkSelected","getProductUniqueID","index","value","mouseDownAction","mouseUpAction","hoverRowAction","toString","manageCheckbox","found","selectedCell","showSelectRow","getGridItems","gridColumn","gridRow","zIndex","selectRow","control","manageParentViews","singleProduct","getColumnHeaders","columnsHeads","columnHeadTooltip","tooltiptype","tooltip","header","toolTip","columnHead","columnLabel","tooltipType","addAction","insertColumn","gridStyles","style","__html","render","columnHeaders","constructedGrid","classes"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {selectedStateType, Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\nimport camelcase from \"camelcase\";\nimport {appColumns, iColumn} from \"../../_sample-data/columns\";\nimport {DataManager} from \"../../data-components/data-manager/data-manager\";\nimport classesIllustration from \"../../images/SVG/illustration-classes.svg\";\nimport {ToolTipContent} from \"../heru-tool-tip/tool-tip-content\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][];\n    manageParentViews : Function;\n    selectionCallback? : Function;\n    columnsData : iColumn[];\n    classes? : string;\n    addAction : Function;\n}\n\ninterface iSTATE {\n    selectionSet : selectionObject[];\n    checkedRows :number[];\n    workingDataSet : iDataGridItem[][];\n    hoveredRow : string;\n}\n\nexport type selectionObject = {\n    row : number;\n    cell : number;\n    selected : boolean;\n    columnName : string;\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.state = {\n            workingDataSet : this.props.data,\n            selectionSet : [],\n            checkedRows : [],\n            hoveredRow : \"\"\n        };\n        this.startSelectionRow = 0;\n        this.startSelectionCell = 0;\n\n        this.cellRange = {\n            startCell : 0,\n            endCell : 0,\n            startRow : 0,\n            endRow : 0,\n        };\n\n        this.numCols = this.getNumColumns();\n        this.numRows = this.getNumRows();\n    }\n    selectionSet : selectionObject[] = [];\n    numCols : number;\n    numRows: number;\n    startSelectionRow : number;\n    startSelectionCell : number;\n\n    cellRange : any;\n    _checkedRows : number[] = [];\n\n    manageSelection(row:number, cell:number, columnName : string,  clearSelection : boolean){\n\n        if(clearSelection){\n            this.selectionSet = [];\n            this._checkedRows = [];\n        }\n\n        if(this.startSelectionRow > row){\n            this.cellRange.startRow = row;\n            this.cellRange.endRow = this.startSelectionRow\n        }else{\n            this.cellRange.startRow = this.startSelectionRow;\n            this.cellRange.endRow = row;\n        }\n\n        if(this.startSelectionCell > cell){\n            this.cellRange.startCell = cell;\n            this.cellRange.endCell = this.startSelectionCell;\n        }else {\n            this.cellRange.startCell = this.startSelectionCell;\n            this.cellRange.endCell = cell;\n        }\n\n        if(row === this.startSelectionRow && cell === this.startSelectionCell){\n            this.selectionSet.push(\n                {\n                    row: row,\n                    cell: cell,\n                    selected : true,\n                    columnName : this.props.columnsData[cell-2].columnName\n                    //columnName : appColumns.getColumns[cell-2].columnName\n                }\n            );\n        }\n\n        for( let i = this.cellRange.startRow; i < this.cellRange.endRow+1; i++){\n            for(let j= this.cellRange.startCell; j < this.cellRange.endCell+1; j++){\n                this.selectionSet.push(\n                    {\n                        row: i,\n                        cell: j,\n                        selected : true,\n                        columnName : this.props.columnsData[j-2].columnName\n                    }\n                );\n            }\n        }\n\n        // handle single cell as start and end\n\n        console.log(\"@@@ this.selectionSet: \", this.selectionSet);\n        console.log(\"*** this.state.selectionSet: \", this.state.selectionSet);\n\n        if(this.selectionSet.length === 2){\n            if( this.selectionSet[0].row === this.selectionSet[1].row && this.selectionSet[0].cell === this.selectionSet[1].cell  ){\n                this.selectionSet.splice(1,1);\n            }\n        }\n\n        this.setState({\n            selectionSet : this.selectionSet,\n            checkedRows : this._checkedRows\n        });\n\n\n        if(this.props.selectionCallback !== undefined && this.props.selectionCallback !== null){\n           type iSelectedItems = { row : number, cells : number[], productFields : iDataGridItem[] };\n            let selectedItems : iSelectedItems[] = [  ];\n            let lastRow : number = 0;\n\n            // work through the selection set to organize things\n\n           i: for(let i=0; i < this.selectionSet.length; i++){\n                if(i===0){\n                    //if it's the first one let's create a new entry\n                    lastRow = this.selectionSet[0].row;\n                    let newItem : iSelectedItems = { row : lastRow, cells:[], productFields : []};\n                    selectedItems.push(newItem);\n                }\n\n                //loop over the existing list of rows to create new ones\n                    if(this.selectionSet[i].row === lastRow){\n                        //one more loop over the list to grab all the cells that belong to the row\n                        if(selectedItems[selectedItems.length-1].cells.length === 0){\n                            for(let j=0; j < this.selectionSet.length; j++){\n                                if(this.selectionSet[j].row === lastRow){\n                                    //if the row matches the last row, then push in the selected cell\n                                    selectedItems[selectedItems.length-1].cells.push( this.selectionSet[j].cell );\n                                }\n                            }\n                        }\n                    }else{\n                        lastRow = this.selectionSet[i].row;\n                        let newItem : iSelectedItems = { row : lastRow, cells:[], productFields : []};\n                        selectedItems.push(newItem);\n                    }\n            }\n\n\n           for(let x=0; x < selectedItems.length; x++){\n                for(let y=0; y < this.state.workingDataSet[selectedItems[x].row-2].length; y++){\n                    selectedItems[x].productFields.push(this.state.workingDataSet[selectedItems[x].row-2][y] )\n                }\n\n           }\n            this.props.selectionCallback(selectedItems, this._checkedRows, \"standard-launch\");\n         }\n    }\n\n    clearSelection(){\n        this.setState({selectionSet:[], checkedRows:[]});\n        this._checkedRows = [];\n        this.selectionSet = [];\n    }\n\n    checkSelected(row:number, cell:number):selectedStateType{\n        for(let i=0; i<this.state.selectionSet.length; i++){\n            if( this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell){\n                return \"selected\";\n            }\n        }\n        //if nothing is found, return false because it isn't selected\n        return \"\";\n    }\n\n    getNumColumns(){\n        //TODO swap this out to calculating total normalized columns\n\n        return this.props.columnsData.length;\n    }\n\n    getNumRows(){\n       if(this.state.workingDataSet.length > 0){\n           return this.state.workingDataSet.length;\n       }else{\n           return this.props.data.length;\n       }\n    }\n\n    getProductUniqueID(index : number){\n\n        for(let j=0; j < this.state.workingDataSet[index].length; j++){\n            if(this.state.workingDataSet[index][j].columnName === \"uniqueID\"){\n                return this.state.workingDataSet[index][j].value;\n            }\n        }\n    }\n\n    mouseDownAction(row : number, cell:number){\n        this.startSelectionCell = cell;\n        this.startSelectionRow = row;\n    }\n\n    mouseUpAction(row:number, cell:number, columnName : string){\n\n        //console.log(\"@@@check\", row, \" \", cell, \" \", columnName);\n        this.manageSelection(row, cell, columnName, true);\n        console.log(\"selection set: \", this.selectionSet);\n    }\n\n    hoverRowAction(row:number){\n        this.setState({hoveredRow : row.toString()})\n        console.log(\"hovered\")\n    }\n\n    manageCheckbox(row : number){\n\n        //find if this number is in the list\n        let found : boolean = false;\n\n        console.log(\"@@ checked rows: \",row);\n\n        for(let i=0; i < this._checkedRows.length; i++){\n\n\n            if(this._checkedRows[i] === row){\n                //if it is in the list remove it which unchecks\n                this._checkedRows.splice(i, 1);\n                this.setState({checkedRows : this._checkedRows});\n                found = true;\n\n            }\n        }\n        if(found === false){\n            this._checkedRows.push(row);\n            this.setState({checkedRows : this._checkedRows});\n\n        }\n\n\n        //handle selecting the checked\n        //First reset the cell selection\n        this.selectionSet = [];\n\n        for(let i=0; i < this._checkedRows.length; i++){\n            for(let j=0; j < this.state.workingDataSet[this._checkedRows[i]].length; j++ ){\n                let selectedCell : selectionObject = {\n                    row : this._checkedRows[i]+2,\n                    cell : j,\n                    selected : true,\n                    columnName : this.props.columnsData[j].columnName\n                };\n                this.selectionSet.push(selectedCell);\n            }\n        }\n\n\n        this.setState({selectionSet : this.selectionSet});\n        if(this.props.selectionCallback !== undefined){\n            this.props.selectionCallback(this.state.selectionSet, this.state.checkedRows, \"checkbox-launched\");\n        }\n        //once people use the tool, we can hide the tool tip\n        toolTipContent.showSelectRow = false;\n    }\n\n    iconCheck = (row : number):string=>{\n        for(let i=0; i < this.state.checkedRows.length; i++){\n            if(row === this.state.checkedRows[i]){\n                return \"checkbox-checked\"\n            }\n        }\n        return \"checkbox-unchecked\"\n    };\n\n    updateSelectionState = ()=>{\n        this.setState({selectionSet : this.selectionSet});\n\n    };\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.state.workingDataSet.length; i++){\n            for(let j=0; j < this.state.workingDataSet[i].length; j++){\n                if(j === 0){\n                    cells.push(\n                        <div id={`row-${i+2}-start`} className={`cell checkbox-main `} style={{gridColumn : j+1, gridRow : i+2, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                OnClick={()=>this.manageCheckbox(i)}\n                                hoverActions={[()=>this.hoverRowAction(i+2)]}\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.selectRow()}\n                                classes={`${this.iconCheck(i)}`}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName={`${this.iconCheck(i)}`}\n                                        width=\"100%\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                            <CatmanIcon\n                                classes={\"shading-l-r\"}\n                                iconName=\"fader-left-to-right\"\n                                width=\"0.5rem\"\n                                height=\"100%\"\n                            />\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className={`cell row-${i+2}`} style={{gridColumn : j+2, gridRow : i+2 }}>\n                        <Tile\n                            tileType={this.props.columnsData[j].control}\n                            tileLabel={this.state.workingDataSet[i][j].value}\n                            mouseDownActions={\n                                [() => this.mouseDownAction(i+2,j+2)]\n                            }\n                            mouseUpActions={\n                                [\n                                    () => this.props.manageParentViews(),\n                                    () => this.mouseUpAction(i+2,j+2, this.props.columnsData[j].columnName)\n                                ]\n                            }\n                            selectedClass={this.checkSelected(i+2, j+2)}\n\n                        />\n\n                    </div>\n                );\n\n\n                if( this.props.columnsData[j].control != \"hidden\"){\n                    cells.push(cell);\n                }\n\n                if(j === this.state.workingDataSet[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+2, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"nav-link\"\n                                navPath={`/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.singleProduct()}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                            <CatmanIcon\n                                classes={\"shading\"}\n                                iconName=\"fader-right-to-left\"\n                                width=\"0.5rem\"\n                                height=\"100%\"\n                            />\n\n                        </div>\n                    )\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    getColumnHeaders(){\n        let columnsHeads : ReactElement[] = [];\n\n        for(let i=0; i < this.props.columnsData.length; i++ ){\n            if(i === 0){\n                columnsHeads.push(\n                    <div className=\"cell checkbox-main grid-header\" style={{gridColumn : i+1, gridRow : 1, zIndex : 120 + (this.numCols) }}>\n                        <AppButton\n                            OnClick={()=>this.manageCheckbox(i)}\n                            buttonType=\"transparent-bg\"\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.selectRow()}\n                            classes={` `}\n                            iconCenter={(\n                                <CatmanIcon\n                                    iconName={`${this.iconCheck(i)}`}\n                                    width=\"0.5rem\"\n                                    height=\"100%\"\n                                />\n                            )}\n                        />\n                    </div>\n                )\n            }\n\n          const columnHeadTooltip = (tooltiptype : \"custom\" | \"basic\", tooltip:ReactElement | string, header:string)=>{\n\n              switch (tooltiptype) {\n                  case \"basic\":\n                      return(<ToolTipContent\n                          header={header}\n                          copy={ tooltip }\n                          tooltipType=\"deluxe\"\n                          icon={\n                              <CatmanIcon\n                                  iconName=\"icon-add-invert\"\n                                  classes=\"\"\n                                  height=\"1.5rem\"\n                                  width=\"1.5rem\"\n                              />\n                          }\n                      />);\n                  case \"custom\":\n                      return this.props.columnsData[i].toolTip;\n              }\n\n              return (<></>)\n          };\n\n            let columnHead = (\n                <div className=\"cell grid-header\" style={{gridColumn : i+2, gridRow : 1, zIndex: this.numRows+100+i  }}>\n                    <Tile\n                        tileType=\"column-header\"\n                        tileLabel={this.props.columnsData[i].columnLabel}\n                        toolTip={ columnHeadTooltip(\n                            this.props.columnsData[i].tooltipType,\n                            this.props.columnsData[i].toolTip,\n                            this.props.columnsData[i].columnLabel\n                        )}\n                        mouseDownActions={\n                            [ ]\n                        }\n                        mouseUpActions={\n                            [\n                                () => this.props.manageParentViews()\n                            ]\n                        }\n                        selectedClass={\"\"}\n                    />\n                </div>\n            );\n\n            if(this.props.columnsData[i].control != \"hidden\"){\n                columnsHeads.push(columnHead);\n            }\n\n\n            //final column head action\n            if(i === this.props.columnsData.length-1){\n                columnsHeads.push(\n                    <div className=\"cell details grid-header\"\n                         style={{gridColumn : this.props.columnsData.length+2, gridRow : 1, zIndex : (200 + this.numCols+2) }}\n                        >\n                        <AppButton\n                            buttonType=\"button-custom\"\n                            classes=\"add-column\"\n                            navPath={`/catalog/spreadsheet`}\n                            OnClick={()=>this.props.addAction(\"add-attribute\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.insertColumn()}\n                            iconCenter={(\n                                <CatmanIcon\n                                    iconName=\"icon-plus\"\n                                    width=\"0.5rem\"\n                                    height=\"100%\"\n                                />\n                            )}\n                        />\n                        <CatmanIcon\n                            classes={\"shading-l-r\"}\n                            iconName=\"fader-right-to-left\"\n                            width=\"0.5rem\"\n                            height=\"100%\"\n                        />\n                    </div>\n                )\n            }\n        }\n\n        return( columnsHeads );\n    }\n\n    gridStyles(){\n\n            let style = `\n            .row-${this.state.hoveredRow} {\n                background-color: yellow;\n            }\n            `;\n\n\n\n        return <style dangerouslySetInnerHTML={{ __html: `${style}` }} />\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let columnHeaders : ReactElement[] = this.getColumnHeaders();\n\n\n        //having some trouble with layout of grid and checkboxes\n        // style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}\n        let constructedGrid : ReactElement = (\n            <>\n                <div className={`data-grid ${this.props.classes}`}>\n                    {this.gridStyles()}\n                    <div className=\"viewport\">\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}