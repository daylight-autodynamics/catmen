{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\"; //data grid data should be an array of arrays\n//each product is an array of attributes\n\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectionSet = [];\n    this.numCols = void 0;\n    this.numRows = void 0;\n    this.numCols = this.getNumColumns();\n    this.numRows = this.getNumRows();\n    this.state = {\n      selectionSet: []\n    };\n  }\n\n  manageSelection(row, cell) {\n    let found = false;\n\n    for (let i = 0; i < this.selectionSet.length; i++) {\n      if (this.selectionSet[i].cell === cell && this.selectionSet[i].row === row) {\n        this.selectionSet.splice(i, 1);\n        found = true;\n      }\n    }\n\n    if (found === false) {\n      this.selectionSet.push({\n        row: row,\n        cell: cell,\n        selected: true\n      });\n    }\n\n    this.setState({\n      selectionSet: this.selectionSet\n    });\n  }\n\n  checkSelected(row, cell) {\n    for (let i = 0; i < this.state.selectionSet.length; i++) {\n      if (this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell) {\n        return \"selected\";\n      }\n    } //if nothing is found, return false becasue it isn't selected\n\n\n    return \"\";\n  }\n\n  getNumColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return this.props.data[0].length;\n  }\n\n  getNumRows() {\n    return this.props.data.length;\n  }\n\n  getProductUniqueID(index) {\n    for (let j = 0; j < this.props.data[index].length; j++) {\n      if (this.props.data[index][j].column === \"uniqueID\") {\n        return this.props.data[index][j].value;\n      }\n    }\n  }\n\n  mouseDownAction(row, cell) {\n    this.manageSelection(row, cell);\n    console.log(this.selectionSet);\n    console.log(\"mouse down: \", row, \" \", cell);\n  }\n\n  mouseUpAction(row, cell) {\n    console.log(\"mouse up:\");\n    console.log(\"row: \", row, \"cell: \", cell);\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.props.data.length; i++) {\n      for (let j = 0; j < this.props.data[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell checkbox-main\",\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"checkbox-unchecked\",\n              width: \"0.5rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }\n          })));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell\",\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: \"edit-cell\",\n          tileLabel: this.props.data[i][j].value,\n          mouseDownAction: () => this.mouseDownAction(i + 1, j + 2),\n          mouseUpAction: () => this.mouseUpAction(i + 1, j + 2),\n          selectedClass: this.checkSelected(i + 1, j + 2),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }\n        }));\n        cells.push(cell);\n\n        if (j === this.props.data[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 1,\n              zIndex: 100 + (this.numRows - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"nav-link\",\n            navPath: `/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`,\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  render() {\n    let gridItems = [];\n    let columnHeaders = [];\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      style: {\n        gridTemplateColumns: `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","DataGrid","Component","constructor","props","selectionSet","numCols","numRows","getNumColumns","getNumRows","state","manageSelection","row","cell","found","i","length","splice","push","selected","setState","checkSelected","data","getProductUniqueID","index","j","column","value","mouseDownAction","console","log","mouseUpAction","getGridItems","cells","gridColumn","gridRow","zIndex","mainNav","render","gridItems","columnHeaders","constructedGrid","gridTemplateColumns","toString"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {selectedStateType, Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][]\n}\n\ninterface iSTATE {\n    selectionSet : selectionObject[];\n}\n\nexport type selectionObject = {\n    row : number;\n    cell : number;\n    selected : boolean;\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.numCols = this.getNumColumns();\n        this.numRows = this.getNumRows();\n        this.state = {\n            selectionSet : []\n        }\n    }\n    selectionSet : selectionObject[] = [];\n    numCols : number;\n    numRows: number;\n\n\n    manageSelection(row:number, cell:number){\n        let found : boolean = false;\n        for(let i=0; i < this.selectionSet.length; i++){\n            if( this.selectionSet[i].cell === cell && this.selectionSet[i].row === row ){\n                this.selectionSet.splice(i, 1);\n                found = true;\n            }\n        }\n\n        if(found === false){\n            this.selectionSet.push(\n                {\n                    row: row,\n                    cell: cell,\n                    selected : true\n                }\n            );\n        }\n\n        this.setState({selectionSet : this.selectionSet})\n    }\n    checkSelected(row:number, cell:number):selectedStateType{\n        for(let i=0; i<this.state.selectionSet.length; i++){\n            if( this.state.selectionSet[i].row === row && this.state.selectionSet[i].cell === cell){\n                return \"selected\";\n            }\n        }\n        //if nothing is found, return false becasue it isn't selected\n        return \"\";\n    }\n\n    getNumColumns(){\n        //TODO swap this out to calculating total normalized columns\n        return this.props.data[0].length;\n    }\n\n    getNumRows(){\n        return this.props.data.length;\n    }\n\n    getProductUniqueID(index : number){\n        for(let j=0; j < this.props.data[index].length; j++){\n            if(this.props.data[index][j].column === \"uniqueID\"){\n                return this.props.data[index][j].value;\n            }\n        }\n    }\n\n    mouseDownAction(row : number, cell:number){\n        this.manageSelection(row, cell);\n        console.log(this.selectionSet);\n        console.log(\"mouse down: \", row, \" \",cell);\n    }\n\n    mouseUpAction(row:number, cell:number){\n        console.log(\"mouse up:\");\n        console.log(\"row: \",  row, \"cell: \", cell);\n    }\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.props.data.length; i++){\n            for(let j=0; j < this.props.data[i].length; j++){\n                if(j === 0){\n                    cells.push(\n                        <div className=\"cell checkbox-main\" style={{gridColumn : j+1, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"checkbox-unchecked\"\n                                        width=\"0.5rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className=\"cell\" style={{gridColumn : j+2, gridRow : i+1 }}>\n                        <Tile\n                            tileType=\"edit-cell\"\n                            tileLabel={this.props.data[i][j].value}\n                            mouseDownAction={() => this.mouseDownAction(i+1,j+2)}\n                            mouseUpAction={() => this.mouseUpAction(i+1,j+2)}\n                            selectedClass={this.checkSelected(i+1, j+2)}\n                        />\n                    </div>\n                );\n\n                cells.push(cell);\n\n                if(j === this.props.data[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+1, zIndex : 100 + (this.numRows - i) }}>\n                            <AppButton\n                                buttonType=\"nav-link\"\n                                navPath={`/catalog/spreadsheet?product=${this.getProductUniqueID(i)}`}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n            }\n        }\n\n\n\n        return cells;\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let gridItems : ReactElement[] = [];\n        let columnHeaders : ReactElement[]=[];\n\n        let constructedGrid : ReactElement = (\n            <>\n                <div className=\"data-grid\">\n                    <div className=\"viewport\" style={{gridTemplateColumns : `1.5rem repeat(${this.getNumColumns().toString()}, max-content) 1rem`}}>\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}