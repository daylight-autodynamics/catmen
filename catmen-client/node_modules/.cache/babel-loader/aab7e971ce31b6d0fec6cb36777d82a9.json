{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nimport { CatmanIcon } from \"../../svg/icons/icons\";\nimport { Tile } from \"../tiles/tile-component\";\nimport { toolTipContent } from \"../../views/_common/tool-tip-content/content-tool-tips\"; //data grid data should be an array of arrays\n//each product is an array of attributes\n\nexport class DataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  numColumns() {\n    //TODO swap this out to calculating total normalized columns\n    return this.props.data[0].length;\n  }\n\n  getGridItems() {\n    let cells = [];\n\n    for (let i = 0; i < this.props.data.length; i++) {\n      for (let j = 0; j < this.props.data[i].length; j++) {\n        if (j === 0) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell checkbox\",\n            style: {\n              gridColumn: j + 1,\n              gridRow: i + 1\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"button\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }\n          }, \"checkbox\")));\n        }\n\n        let cell = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cell\",\n          style: {\n            gridColumn: j + 2,\n            gridRow: i + 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Tile, {\n          tileType: \"edit-cell\",\n          tileLabel: this.props.data[i][j].value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }\n        }));\n        cells.push(cell);\n\n        if (j === this.props.data[i].length - 1) {\n          cells.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"cell details\",\n            style: {\n              gridColumn: j + 3,\n              gridRow: i + 1,\n              zIndex: 1000 + (this.props.data.length - i)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AppButton, {\n            buttonType: \"transparent-bg\",\n            tooltipType: \"custom\",\n            tooltip: toolTipContent.mainNav,\n            iconCenter: /*#__PURE__*/React.createElement(CatmanIcon, {\n              iconName: \"go-arrow\",\n              width: \"1rem\",\n              height: \"100%\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 37\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }\n          })));\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  render() {\n    let gridItems = [];\n    let columnHeaders = [];\n    let constructedGrid = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewport\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, columnHeaders, this.getGridItems())));\n    return constructedGrid;\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/data-grid/data-grid.tsx"],"names":["React","AppButton","CatmanIcon","Tile","toolTipContent","DataGrid","Component","constructor","props","numColumns","data","length","getGridItems","cells","i","j","push","gridColumn","gridRow","cell","value","zIndex","mainNav","render","gridItems","columnHeaders","constructedGrid"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,SAAQC,IAAR,QAAmB,yBAAnB;AACA,SAAQC,cAAR,QAA6B,wDAA7B,C,CAEA;AACA;;AASA,OAAO,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAsD;AACzDC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;AACH;;AAEDC,EAAAA,UAAU,GAAE;AACR;AACA,WAAO,KAAKD,KAAL,CAAWE,IAAX,CAAgB,CAAhB,EAAmBC,MAA1B;AACH;;AAEDC,EAAAA,YAAY,GAAE;AACV,QAAIC,KAAsB,GAAG,EAA7B;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,KAAKN,KAAL,CAAWE,IAAX,CAAgBC,MAAjC,EAAyCG,CAAC,EAA1C,EAA6C;AACzC,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,KAAKP,KAAL,CAAWE,IAAX,CAAgBI,CAAhB,EAAmBH,MAApC,EAA4CI,CAAC,EAA7C,EAAgD;AAC5C,YAAGA,CAAC,KAAK,CAAT,EAAW;AACPF,UAAAA,KAAK,CAACG,IAAN,eACI;AAAK,YAAA,SAAS,EAAC,eAAf;AAA+B,YAAA,KAAK,EAAE;AAACC,cAAAA,UAAU,EAAGF,CAAC,GAAC,CAAhB;AAAmBG,cAAAA,OAAO,EAAGJ,CAAC,GAAC;AAA/B,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CADJ;AAKH;;AAED,YAAIK,IAAI,gBACJ;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,KAAK,EAAE;AAACF,YAAAA,UAAU,EAAGF,CAAC,GAAC,CAAhB;AAAmBG,YAAAA,OAAO,EAAGJ,CAAC,GAAC;AAA/B,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,IAAD;AAAM,UAAA,QAAQ,EAAC,WAAf;AAA2B,UAAA,SAAS,EAAE,KAAKN,KAAL,CAAWE,IAAX,CAAgBI,CAAhB,EAAmBC,CAAnB,EAAsBK,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAMAP,QAAAA,KAAK,CAACG,IAAN,CAAWG,IAAX;;AAEA,YAAGJ,CAAC,KAAK,KAAKP,KAAL,CAAWE,IAAX,CAAgBI,CAAhB,EAAmBH,MAAnB,GAA0B,CAAnC,EAAqC;AACjCE,UAAAA,KAAK,CAACG,IAAN,eACI;AAAK,YAAA,SAAS,EAAC,cAAf;AAA8B,YAAA,KAAK,EAAE;AAACC,cAAAA,UAAU,EAAGF,CAAC,GAAC,CAAhB;AAAmBG,cAAAA,OAAO,EAAGJ,CAAC,GAAC,CAA/B;AAAkCO,cAAAA,MAAM,EAAG,QAAQ,KAAKb,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,GAAyBG,CAAjC;AAA3C,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,SAAD;AACI,YAAA,UAAU,EAAC,gBADf;AAEI,YAAA,WAAW,EAAC,QAFhB;AAGI,YAAA,OAAO,EAAEV,cAAc,CAACkB,OAH5B;AAII,YAAA,UAAU,eACN,oBAAC,UAAD;AACI,cAAA,QAAQ,EAAC,UADb;AAEI,cAAA,KAAK,EAAC,MAFV;AAGI,cAAA,MAAM,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;AAgBH;AACJ;AACJ;;AAID,WAAOT,KAAP;AACH;;AAEDU,EAAAA,MAAM,GAAsK;AAExK,QAAIC,SAA0B,GAAG,EAAjC;AACA,QAAIC,aAA8B,GAAC,EAAnC;AAEA,QAAIC,eAA8B,gBAC9B,uDACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,aADL,EAEK,KAAKb,YAAL,EAFL,CADJ,CADJ,CADJ;AAWA,WAAOc,eAAP;AACH;;AAzEwD","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"./data-types-for-data-grid\";\nimport AppButton from \"../button/app-button\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport {Tile} from \"../tiles/tile-component\";\nimport {toolTipContent} from \"../../views/_common/tool-tip-content/content-tool-tips\";\n\n//data grid data should be an array of arrays\n//each product is an array of attributes\ninterface iPROPS {\n    data : iDataGridItem[][]\n}\n\ninterface iSTATE {\n\n}\n\nexport class DataGrid extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n    }\n\n    numColumns(){\n        //TODO swap this out to calculating total normalized columns\n        return this.props.data[0].length;\n    }\n\n    getGridItems(){\n        let cells : ReactElement[] = [];\n        for(let i=0; i < this.props.data.length; i++){\n            for(let j=0; j < this.props.data[i].length; j++){\n                if(j === 0){\n                    cells.push(\n                        <div className=\"cell checkbox\" style={{gridColumn : j+1, gridRow : i+1 }}>\n                            <button>checkbox</button>\n                        </div>\n                    )\n                }\n\n                let cell = (\n                    <div className=\"cell\" style={{gridColumn : j+2, gridRow : i+1 }}>\n                        <Tile tileType=\"edit-cell\" tileLabel={this.props.data[i][j].value}/>\n                    </div>\n                );\n\n                cells.push(cell);\n\n                if(j === this.props.data[i].length-1){\n                    cells.push(\n                        <div className=\"cell details\" style={{gridColumn : j+3, gridRow : i+1, zIndex : 1000 + (this.props.data.length - i) }}>\n                            <AppButton\n                                buttonType=\"transparent-bg\"\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.mainNav}\n                                iconCenter={(\n                                    <CatmanIcon\n                                        iconName=\"go-arrow\"\n                                        width=\"1rem\"\n                                        height=\"100%\"\n                                    />\n                                )}\n                            />\n                        </div>\n                    )\n                }\n            }\n        }\n\n\n\n        return cells;\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n\n        let gridItems : ReactElement[] = [];\n        let columnHeaders : ReactElement[]=[];\n\n        let constructedGrid : ReactElement = (\n            <>\n                <div className=\"data-grid\">\n                    <div className=\"viewport\">\n                        {columnHeaders}\n                        {this.getGridItems()}\n                    </div>\n                </div>\n            </>\n        );\n\n        return constructedGrid;\n    }\n}"]},"metadata":{},"sourceType":"module"}