{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/_catman-configuration/wizards/create-product-group/create-product-group-wizard.tsx\";\nimport * as React from \"react\";\nimport { toolTipContent } from \"../../../_common/tool-tip-content/content-tool-tips\";\nimport { CatmanIcon } from \"../../../../svg/icons/icons\";\nimport AppButton from \"../../../../view-components/button/app-button\";\nimport { dataManagerMain } from \"../../../../index\";\nimport { StandardTextInput } from \"../../../../view-components/text-input/standard-text-input\";\nexport class CreateProductGroupWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.groupNameValue = \"\";\n    this.groupNameRef = React.createRef();\n\n    this.getInputValue = (row, cell, value) => {\n      console.log(\"input value\", row, \" \", cell, \" \", value);\n      this.groupNameValue = value;\n    };\n\n    this.state = {\n      wizardPanel: \"start\"\n    };\n  }\n\n  createVariantGroup() {\n    if (this.props.selectedCheckBoxes != null) {\n      for (let i = 0; i < this.props.selectedCheckBoxes.length; i++) {\n        let currentCheckIndex = this.props.selectedCheckBoxes[i];\n\n        for (let j = 0; j < dataManagerMain.productData[currentCheckIndex].length; j++) {\n          if (dataManagerMain.productData[currentCheckIndex][j].columnName === \"ProductGroup\") {\n            dataManagerMain.productData[currentCheckIndex][j].value = this.groupNameValue;\n          }\n        }\n      }\n    }\n\n    console.log(dataManagerMain.productData);\n    this.props.manageModal();\n  }\n\n  wizardNavigation(panelName) {\n    this.setState({\n      wizardPanel: panelName\n    });\n  }\n\n  element() {\n    switch (this.state.wizardPanel) {\n      case \"closed\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"start\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }\n        }, \"Create Product Group from Selection\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"add-blank-stubs-area\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }\n        }, \"Add\"), /*#__PURE__*/React.createElement(StandardTextInput, {\n          label: \"Variant Group Name\",\n          currentValue: \"\",\n          onChangeAction: this.getInputValue,\n          row: 0,\n          cell: 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }\n        }, \"Name Product Group: \")));\n\n      case \"staging-area\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }\n        }, \"Create Product Group from Selection\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"add-blank-stubs-area\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }\n        }, \"Add\"), /*#__PURE__*/React.createElement(StandardTextInput, {\n          label: \"Variant Group Name\",\n          currentValue: \"\",\n          onChangeAction: this.getInputValue,\n          row: 0,\n          cell: 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }\n        }, \"Name Product Group: \"), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Go\",\n          OnClick: () => this.createVariantGroup(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.addBlankStubs(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add-invert\",\n            classes: \"reverse\",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }\n        }))));\n    }\n  }\n\n  render() {\n    return this.element();\n  }\n\n} // export let uploadWizard : iWizardStep[] = [\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard  wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     }\n// ];","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/_catman-configuration/wizards/create-product-group/create-product-group-wizard.tsx"],"names":["React","toolTipContent","CatmanIcon","AppButton","dataManagerMain","StandardTextInput","CreateProductGroupWizard","Component","constructor","props","groupNameValue","groupNameRef","createRef","getInputValue","row","cell","value","console","log","state","wizardPanel","createVariantGroup","selectedCheckBoxes","i","length","currentCheckIndex","j","productData","columnName","manageModal","wizardNavigation","panelName","setState","element","addBlankStubs","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {iWizardStep} from \"../../../../view-components/wizard/wizard\";\nimport {ReactElement} from \"react\";\nimport {toolTipContent} from \"../../../_common/tool-tip-content/content-tool-tips\";\nimport {CatmanIcon} from \"../../../../svg/icons/icons\";\nimport AppButton from \"../../../../view-components/button/app-button\";\nimport {DividerLine} from \"../../../../view-components/divider-line/divider-line\";\nimport {TextInput} from \"../../../../view-components/text-input/text-input\";\nimport {Illustration} from \"../../../../svg/illustrations/illustrations\";\nimport {dataManagerMain} from \"../../../../index\";\nimport {iDataGridItem} from \"../../../../view-components/data-grid/data-types-for-data-grid\";\nimport {RefObject} from \"react\";\nimport {StandardTextInput} from \"../../../../view-components/text-input/standard-text-input\";\n\ninterface iPROPS{\n    addAction : Function\n    selectedCheckBoxes? : number[];\n    groups : string[];\n    manageModal : Function;\n}\n\ntype productGroupNavDT = \"closed\" | \"start\" | \"staging-area\" | \"upload-3\";\n\ninterface iSTATE{\n    wizardPanel : productGroupNavDT\n}\n\nexport class CreateProductGroupWizard extends React.Component<iPROPS, iSTATE>{\n\n    constructor(props:iPROPS) {\n        super(props);\n        this.state={\n            wizardPanel : \"start\"\n        }\n    }\n\n    groupNameValue : string = \"\";\n\n    groupNameRef:RefObject<StandardTextInput> = React.createRef<StandardTextInput>();\n\n    createVariantGroup(){\n\n        if(this.props.selectedCheckBoxes != null){\n            for(let i=0; i < this.props.selectedCheckBoxes.length; i++){\n                let currentCheckIndex : number = this.props.selectedCheckBoxes[i];\n                for(let j=0; j < dataManagerMain.productData[currentCheckIndex].length; j++){\n                    if(dataManagerMain.productData[currentCheckIndex][j].columnName === \"ProductGroup\" ){\n                        dataManagerMain.productData[currentCheckIndex][j].value = this.groupNameValue;\n                    }\n                }\n            }\n        }\n        console.log(dataManagerMain.productData);\n\n        this.props.manageModal();\n    }\n\n    getInputValue = (row:number, cell:number, value:string )=>{\n         console.log(\"input value\", row, \" \", cell, \" \", value);\n        this.groupNameValue = value;\n    };\n\n    wizardNavigation(panelName : productGroupNavDT){\n        this.setState({wizardPanel : panelName})\n    }\n\n    element(){\n        switch (this.state.wizardPanel) {\n            case \"closed\":\n                return(<></>);\n            case \"start\":\n                return(\n                    <div>\n                        <h3>Create Product Group from Selection</h3>\n                        <div className={\"add-blank-stubs-area\"}>\n                            <p>Add</p>\n                            <StandardTextInput\n                                label={\"Variant Group Name\"}\n                                currentValue={\"\"}\n                                onChangeAction={this.getInputValue}\n                                row={0}\n                                cell={0}\n                            />\n                            <p>Name Product Group: </p>\n\n                        </div>\n                    </div>\n                );\n            case \"staging-area\":\n                return(<>\n                    <div>\n                        <h3>Create Product Group from Selection</h3>\n                        <div className={\"add-blank-stubs-area\"}>\n                            <p>Add</p>\n                            <StandardTextInput\n                                label={\"Variant Group Name\"}\n                                currentValue={\"\"}\n                                onChangeAction={this.getInputValue}\n                                row={0}\n                                cell={0}\n                            />\n                            <p>Name Product Group: </p>\n                            <AppButton\n                                buttonType={\"secondary-action\"}\n                                buttonLabel=\"Go\"\n                                OnClick={()=>this.createVariantGroup()}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.addBlankStubs()}\n                                toolTipTimeOutInMS={10000}\n                                tooltipXOffset={0}\n                                tooltipYOffset={20}\n                                iconLeft={\n                                    <CatmanIcon\n                                        iconName=\"icon-add-invert\"\n                                        classes=\"reverse\"\n                                        height=\"100%\"\n                                        width=\"100%\"\n                                    />\n                                }\n                            />\n                        </div>\n                    </div>\n\n                </>)\n        }\n    }\n\n    render(){\n        return(this.element())\n    }\n}\n\n// export let uploadWizard : iWizardStep[] = [\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard  wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     }\n// ];"]},"metadata":{},"sourceType":"module"}