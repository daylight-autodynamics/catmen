{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/intra-app-navigation/intra-app-navigation.tsx\";\nimport * as React from \"react\";\nimport AppButton from \"../button/app-button\";\nexport class Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.infoPanelIndex = 1;\n    this.hoverActions = [];\n  }\n\n  sortNavItems() {\n    let groupedItems = [];\n    groupedItems.push([this.props.navElements[0]]); //loop over each element and compare its group name to  , if not we'll create a new group\n\n    i: for (let i = 1; i < this.props.navElements.length; i++) {\n      //we'll start at one since we already pushed the first at zero\n      h: for (let h = 0; h < groupedItems.length; h++) {\n        if (groupedItems[h][0].presentationGroup === this.props.navElements[i].presentationGroup) {\n          groupedItems[h].push(this.props.navElements[i]);\n        } else {\n          //if we are at the end of both arrays then let's create a new group\n          if (h === groupedItems.length - 1) {\n            groupedItems.push([this.props.navElements[i]]);\n            continue i;\n          }\n        }\n      }\n    }\n\n    return groupedItems;\n  }\n\n  generateMenuBasedOnType() {\n    switch (this.props.menuHelpStyle) {\n      case \"panel\":\n        break;\n\n      case \"searchable\":\n        break;\n\n      case \"no-help\":\n        break;\n\n      default:\n    }\n  }\n\n  hoverInfoPanel(index) {\n    this.infoPanelIndex = index;\n    console.log(this.infoPanelIndex);\n  }\n\n  createElements() {\n    let itemGroups = this.sortNavItems();\n    console.log(\"grouped items: \", itemGroups);\n    let constructedMenuItems = []; //let's keep track of all of the\n\n    let counter = 0; //if the hovered index matches the current on-render index we'll store the info panel here\n\n    let infoPanel;\n\n    for (let i = 0; i < itemGroups.length; i++) {\n      //these are the actual buttons\n      let subMenuItems = []; //create an array of buttons that are part of that menu group\n\n      for (let j = 0; j < itemGroups[i].length; j++) {\n        counter++;\n        let count = counter;\n        console.log(\"index comparison\", this.infoPanelIndex, count);\n\n        if (count === this.infoPanelIndex) {\n          if (itemGroups[i][j].infoPanel !== undefined) {\n            infoPanel = itemGroups[i][j].infoPanel;\n          }\n        }\n\n        let newButton = /*#__PURE__*/React.createElement(AppButton, {\n          hoverActions: [() => this.hoverInfoPanel(count)],\n          key: `${i + j}${i}${j}`,\n          navPath: itemGroups[i][j].navPath,\n          buttonType: \"menu-link\",\n          buttonLabel: itemGroups[i][j].label,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 49\n          }\n        });\n        subMenuItems.push(newButton);\n      } //insert the created buttons into a group container\n\n\n      let subMenuGroup = /*#__PURE__*/React.createElement(\"div\", {\n        key: `${i}${i}`,\n        className: \"menu-sub-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 48\n        }\n      }, subMenuItems);\n      constructedMenuItems.push(subMenuGroup);\n    } //assemble those groups and put them in another main menu container\n\n\n    let finalMenu = /*#__PURE__*/React.createElement(\"div\", {\n      key: 0,\n      className: \"menu-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"menu-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 16\n      }\n    }, constructedMenuItems), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 16\n      }\n    }, infoPanel));\n    return finalMenu;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.createElements());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/intra-app-navigation/intra-app-navigation.tsx"],"names":["React","AppButton","Navigation","Component","constructor","props","infoPanelIndex","hoverActions","sortNavItems","groupedItems","push","navElements","i","length","h","presentationGroup","generateMenuBasedOnType","menuHelpStyle","hoverInfoPanel","index","console","log","createElements","itemGroups","constructedMenuItems","counter","infoPanel","subMenuItems","j","count","undefined","newButton","navPath","label","subMenuGroup","finalMenu","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {ReactElement} from \"react\";\nimport App from \"../../App\";\nimport AppButton from \"../button/app-button\";\n\n\nexport type menuFormatDataType = \"fly-out\" | \"slide-in\" | \"drop-down\";\nexport type menuHelpStyleDataType = \"panel\" | \"searchable\" | \"no-help\";\n\n//TODO come back and fix these any types\nexport interface iNavItem{\n    label : string;\n    navPath : string;\n    presentationGroup : string;\n    buttonType : any;\n    infoPanel? : React.ReactElement;\n    tooltipHoverAction? : any;\n}\n\ninterface iPROPS {\n    navElements : iNavItem[];\n    menuHelpStyle : any;\n}\n\ninterface iSTATE{\n    \n}\n\nexport class Navigation extends React.Component<iPROPS, iSTATE> {\n    constructor(props:iPROPS) {\n        super(props);\n    }\n\n    infoPanelIndex : number = 1;\n    hoverActions :any[] = [];\n    sortNavItems() : iNavItem[][]{\n        let groupedItems : iNavItem[][] = [];\n        groupedItems.push([this.props.navElements[0]]);\n\n        //loop over each element and compare its group name to  , if not we'll create a new group\n        i: for(let i=1; i < this.props.navElements.length; i++){\n            //we'll start at one since we already pushed the first at zero\n           h: for(let h=0; h < groupedItems.length; h++ ){\n                if( groupedItems[h][0].presentationGroup === this.props.navElements[i].presentationGroup ){\n                    groupedItems[h].push(this.props.navElements[i]);\n                }else{\n                    //if we are at the end of both arrays then let's create a new group\n                    if(h === groupedItems.length-1){\n                        groupedItems.push([this.props.navElements[i]]);\n                        continue i;\n                    }\n                }\n            }\n        }\n\n        return groupedItems;\n    }\n\n    generateMenuBasedOnType(){\n        switch (this.props.menuHelpStyle) {\n            case \"panel\":\n\n                break;\n            case \"searchable\":\n\n                break;\n            case \"no-help\":\n\n                break;\n\n            default:\n\n        }\n    }\n\n    hoverInfoPanel(index:number){\n\n        this.infoPanelIndex = index;\n        console.log(this.infoPanelIndex);\n    }\n\n    createElements(){\n        let itemGroups = this.sortNavItems();\n        console.log(\"grouped items: \", itemGroups);\n        let constructedMenuItems : ReactElement[] = [];\n        //let's keep track of all of the\n        let counter : number =0;\n\n        //if the hovered index matches the current on-render index we'll store the info panel here\n        let infoPanel : any;\n\n        for(let i=0; i < itemGroups.length; i++ ){\n            //these are the actual buttons\n            let subMenuItems : ReactElement[] = [];\n\n            //create an array of buttons that are part of that menu group\n            for(let j=0; j < itemGroups[i].length; j++){\n                counter++;\n                let count = counter;\n                console.log(\"index comparison\",this.infoPanelIndex, count);\n                if(count === this.infoPanelIndex){\n                    if(itemGroups[i][j].infoPanel !== undefined){\n                        infoPanel = itemGroups[i][j].infoPanel;\n                    }\n                }\n\n                let newButton : ReactElement = (<AppButton hoverActions={[()=>this.hoverInfoPanel(count)]} key={`${i+j}${i}${j}`} navPath={itemGroups[i][j].navPath} buttonType=\"menu-link\" buttonLabel={itemGroups[i][j].label} /> );\n                subMenuItems.push(newButton);\n            }\n\n            //insert the created buttons into a group container\n            let subMenuGroup : ReactElement = (<div key={`${i}${i}`} className=\"menu-sub-group\">{subMenuItems}</div>);\n            constructedMenuItems.push(subMenuGroup);\n        }\n\n        //assemble those groups and put them in another main menu container\n        let finalMenu : ReactElement = (\n            <div key={0} className=\"menu-container\">\n               <div className=\"menu-main\">{constructedMenuItems}</div>\n               <div className=\"info-panel\">{infoPanel}</div>\n            </div>);\n        return finalMenu;\n    }\n\n\n\n    render(){\n        return (<>\n            {this.createElements()}\n        </>);\n    }\n}"]},"metadata":{},"sourceType":"module"}