{"ast":null,"code":"import _classCallCheck from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{MainHeaderArea}from\"../_common/main-header-area/main-header-area\";import{Navigation}from\"../../view-components/list-menu/intra-app-navigation\";import{mainNavConfig}from\"../_catman-configuration/common-app-configuration\";import{toolTipContent}from\"../tool-tip-content/content-tool-tips\";import{TitleArea}from\"../../view-components/title-area/title-area\";import{CardArea}from\"../../view-components/cards-area/card-area\";import{Card}from\"../../view-components/card/card\";import{dataManagerMain}from\"../../index\";import StickyThing from\"../../view-components/sticky-panel/sticky-panel\";import{SingleMediaDetailsView}from\"./media-details-view\";import{CatmanIcon}from\"../../svg/icons/icons\";import AppButton from\"../../view-components/button/app-button\";import{DataGridWithEditDrawer}from\"../../view-components/data-grid/data-grid-with-edit-drawer\";import{ToggleMenu}from\"../../view-components/toggle-menu/toggle-component\";export var MediaLibraryView=/*#__PURE__*/function(_React$Component){_inherits(MediaLibraryView,_React$Component);var _super=_createSuper(MediaLibraryView);function MediaLibraryView(props){var _this;_classCallCheck(this,MediaLibraryView);_this=_super.call(this,props);_this.selectedMediaIndex=0;_this.dataGridRef=React.createRef();_this.editDrawerRef=React.createRef();_this.drawerFirstOpen=false;_this.columnDefs=void 0;_this.initialized=false;_this.selectionSet=[];_this.drawerInputsLength=0;_this.manageMediaDetailsPage=function(mediaIndex){console.log(\"mediaIndex\",mediaIndex);_this.selectedMediaIndex=mediaIndex;_this.setState({mediaDetailsOpen:!_this.state.mediaDetailsOpen});};_this.updateValues=function(row,cell,value,colName){if(_this.dataGridRef.current!=null&&_this.dataGridRef.current!=undefined){_this.selectionSet=_this.dataGridRef.current.selectionSet;console.log(\"cat details view selection set: \",_this.selectionSet);}console.log(\"inside drawer\",value,\" col name:\",colName);//the minus 2 is the offset for the extra columns checkbox and edit\nfor(var i=0;i<_this.selectionSet.length;i++){if(_this.selectionSet[i].columnName===colName){var myRow=_this.selectionSet[i].row-2;var myCell=_this.selectionSet[i].cell-2;//this.workingDataSet[ myRow-2][myCell-2].value = value;\nvar updateSet={row:myRow,cell:myCell,newData:value};_this.props.dataManager.setData(\"media-data\",updateSet);}}_this.setState({workingData:_this.props.dataManager.getProductData()});console.log(\"working data set:\",_this.state.workingData);};_this.inputFocusAction=function(row,cell){//console.log(\"row: \", row, \" cell:\", cell);\nif(_this.state.editDrawerOpen===true){_this.setState({focusedInput:{row:row,cell:cell,editDrawerOpen:_this.state.editDrawerOpen}});}};_this.columnDefs=_this.props.columnsData;_this.state={mediaDetailsOpen:false,viewMode:\"grid-view\",editDrawerOpen:false,//TODO need to adjust data manager\ncolumnsData:_this.props.columnsData,workingData:_this.props.gridData,focusedInput:{row:0,cell:0,editDrawerOpen:false},footerOpen:false,footerMode:\"default\",editDrawerMaximized:false};return _this;}_createClass(MediaLibraryView,[{key:\"manageViewModes\",value:function manageViewModes(desiredState){this.setState({viewMode:desiredState});}},{key:\"getMediaDetailsView\",value:function getMediaDetailsView(){var _this2=this;if(this.state.mediaDetailsOpen===true){return/*#__PURE__*/React.createElement(StickyThing,{enterFromThisSide:\"right\",lastResortClasses:\"product-view\",animateIn:true,heightIncludeUnits:\"100vh\",widthIncludeUnits:\"100vw\",stickyOpen:true,bgColor:\"#CECECE\",doAnimation:true},/*#__PURE__*/React.createElement(SingleMediaDetailsView,{mediaData:dataManagerMain.getMediaObjectData()[this.selectedMediaIndex],closeSingleMediaView:function closeSingleMediaView(){return _this2.manageMediaDetailsPage(0);}}));}}},{key:\"getCardArea\",value:function getCardArea(){if(this.state.mediaDetailsOpen===false){return/*#__PURE__*/React.createElement(CardArea,{containerClasses:\"catman-media-cards\",cards:/*#__PURE__*/React.createElement(Card,{cardType:\"media\",mediaData:dataManagerMain.getMediaObjectData(),getDetailsFunctions:this.manageMediaDetailsPage,actionToolTip:toolTipContent.mediaRelatedTooltips(\"media-details\")})});}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}},{key:\"getColumnLabel\",value:function getColumnLabel(colName){//utility method for getting column data obj from\nvar columnLabel=\"\";for(var i=0;i<this.columnDefs.length;i++){if(this.columnDefs[i].columnName===colName){columnLabel=this.columnDefs[i].columnLabel;}}return columnLabel;}},{key:\"openEditDrawer\",value:function openEditDrawer(){this.drawerFirstOpen=true;this.setState({editDrawerOpen:true});}//DRAWER RELATED\n},{key:\"maximizeEditDrawer\",value:function maximizeEditDrawer(){this.setState({editDrawerMaximized:!this.state.editDrawerMaximized});}},{key:\"closeEditDrawer\",value:function closeEditDrawer(){this.setState({editDrawerOpen:false,editDrawerMaximized:false,focusedInput:{row:0,cell:0,editDrawerOpen:false}});if(this.dataGridRef.current!=null&&this.dataGridRef.current!=undefined){this.dataGridRef.current.clearSelection();}this.drawerFirstOpen=false;}},{key:\"conditionClasses\",//MANAGE GRID\n//GRID MANAGEMENT\nvalue:function conditionClasses(){if(this.state.editDrawerOpen===true){return\"drawer-open\";}}},{key:\"getGridArea\",value:function getGridArea(){return/*#__PURE__*/React.createElement(DataGridWithEditDrawer,{gridData:dataManagerMain.getMediaDataForGrid(),columnsData:dataManagerMain.getMediaColumnsForGrid(),dataManager:dataManagerMain,targetDataSet:\"media-data\",gridHasDetailsButton:true});}},{key:\"getContentArea\",value:function getContentArea(){switch(this.state.viewMode){case\"grid-view\":return this.getGridArea();case\"cards-view\":return this.getCardArea();}}},{key:\"getToggleBar\",value:function getToggleBar(){var _this3=this;//determine class\nvar selectedClass=function selectedClass(stateName){if(stateName==_this3.state.viewMode){return\"active\";}else{return\"\";}};var bla=/*#__PURE__*/React.createElement(\"div\",{className:\"button-bar\"},/*#__PURE__*/React.createElement(AppButton,{OnClick:function OnClick(){return _this3.manageViewModes(\"grid-view\");},buttonType:\"transparent-bg\",tooltipType:\"custom\",tooltip:/*#__PURE__*/React.createElement(\"div\",null,\"Tooltip\"),classes:\"\".concat(selectedClass(\"grid-view\")),iconCenter:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"icon-list-view\",width:\"1rem\",height:\"100%\"})}),/*#__PURE__*/React.createElement(AppButton,{OnClick:function OnClick(){return _this3.manageViewModes(\"cards-view\");},buttonType:\"transparent-bg\",tooltipType:\"custom\",tooltip:toolTipContent.goBackWizard(),classes:\"\".concat(selectedClass(\"cards-view\"),\" \"),iconCenter:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"icon-card-view\",width:\"1rem\",height:\"100%\"})}),/*#__PURE__*/React.createElement(AppButton,{OnClick:function OnClick(){return _this3.manageViewModes(\"mosaic-view\");},buttonType:\"transparent-bg\",tooltipType:\"custom\",tooltip:toolTipContent.goBackWizard(),classes:\"\".concat(selectedClass(\"mosaic-view\"),\" \"),iconCenter:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"icon-mosaic-view\",width:\"1rem\",height:\"100%\"})}));var buttonBarConfig=[{element:/*#__PURE__*/React.createElement(React.Fragment,null),label:\"\",toggleItemType:\"nav\",function:function _function(){return _this3.manageViewModes(\"grid-view\");},icon:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"icon-list-view\",width:\"1rem\",height:\"100%\"}),toolTip:toolTipContent.mediaGridView(),classes:\"\"},{element:/*#__PURE__*/React.createElement(React.Fragment,null),label:\"\",toggleItemType:\"nav\",function:function _function(){return _this3.manageViewModes(\"cards-view\");},toolTip:toolTipContent.mediaCardView(),icon:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"icon-card-view\",width:\"1rem\",height:\"100%\"}),classes:\"\"},{element:/*#__PURE__*/React.createElement(React.Fragment,null),label:\"\",toggleItemType:\"nav\",function:function _function(){return _this3.manageViewModes(\"mosaic-view\");},toolTip:toolTipContent.goBackWizard(),icon:/*#__PURE__*/React.createElement(CatmanIcon,{iconName:\"icon-mosaic-view\",width:\"1rem\",height:\"100%\"}),classes:\"\"}];var buttonBar=/*#__PURE__*/React.createElement(ToggleMenu,{buttons:buttonBarConfig,containerClasses:\"view-switcher\"});return buttonBar;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(MainHeaderArea,{addItemAction:function addItemAction(){},sectionTitle:\"Media Library\",mainButtonLabel:\"Add Media\",navigationElement:/*#__PURE__*/React.createElement(Navigation,{menuHelpStyle:\"panel\",navElements:mainNavConfig})}),/*#__PURE__*/React.createElement(\"div\",{className:\"base-grid-8 menu-area\"},/*#__PURE__*/React.createElement(TitleArea,{mainTitle:\"Media Library\",subTitle:\"Manage media to describe your products\",titleType:\"subtitle-above\"}),this.getToggleBar()),this.getContentArea(),this.getMediaDetailsView());}}]);return MediaLibraryView;}(React.Component);","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/media-library/media-library.tsx"],"names":["React","MainHeaderArea","Navigation","mainNavConfig","toolTipContent","TitleArea","CardArea","Card","dataManagerMain","StickyThing","SingleMediaDetailsView","CatmanIcon","AppButton","DataGridWithEditDrawer","ToggleMenu","MediaLibraryView","props","selectedMediaIndex","dataGridRef","createRef","editDrawerRef","drawerFirstOpen","columnDefs","initialized","selectionSet","drawerInputsLength","manageMediaDetailsPage","mediaIndex","console","log","setState","mediaDetailsOpen","state","updateValues","row","cell","value","colName","current","undefined","i","length","columnName","myRow","myCell","updateSet","newData","dataManager","setData","workingData","getProductData","inputFocusAction","editDrawerOpen","focusedInput","columnsData","viewMode","gridData","footerOpen","footerMode","editDrawerMaximized","desiredState","getMediaObjectData","mediaRelatedTooltips","columnLabel","clearSelection","getMediaDataForGrid","getMediaColumnsForGrid","getGridArea","getCardArea","selectedClass","stateName","bla","manageViewModes","goBackWizard","buttonBarConfig","element","label","toggleItemType","function","icon","toolTip","mediaGridView","classes","mediaCardView","buttonBar","getToggleBar","getContentArea","getMediaDetailsView","Component"],"mappings":"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","sourcesContent":["import React, {ReactElement} from \"react\";\nimport {MainHeaderArea} from \"../_common/main-header-area/main-header-area\";\nimport {Navigation} from \"../../view-components/list-menu/intra-app-navigation\";\nimport {mainNavConfig} from \"../_catman-configuration/common-app-configuration\";\nimport {toolTipContent} from \"../tool-tip-content/content-tool-tips\";\nimport {TitleArea} from \"../../view-components/title-area/title-area\";\nimport {CardArea} from \"../../view-components/cards-area/card-area\";\nimport {Card} from \"../../view-components/card/card\";\nimport {dataManagerMain} from \"../../index\";\nimport StickyThing from \"../../view-components/sticky-panel/sticky-panel\";\nimport {SingleMediaDetailsView} from \"./media-details-view\";\nimport {CatmanIcon} from \"../../svg/icons/icons\";\nimport AppButton from \"../../view-components/button/app-button\";\nimport {DataGrid, selectionObject} from \"../../view-components/data-grid/data-grid\";\nimport {iDataGridItem} from \"../../_catman-data-types\";\nimport {DataManager, iUpdateSet} from \"../../data-components/data-manager/data-manager\";\nimport {iColumn} from \"../../_catman-data-types\";\nimport {focusInputType} from \"../catalog-views/catalog-details/catalog-details-view\";\nimport {TextInput} from \"../../view-components/text-input/text-input\";\nimport {dataSetType} from \"../../data-components/data-manager/data-manager\";\nimport {dataAttributeColumns} from \"../../_sample-data/attributes-data-and-columns\";\nimport {DataGridWithEditDrawer} from \"../../view-components/data-grid/data-grid-with-edit-drawer\";\nimport {iToggleMenuItem, ToggleMenu} from \"../../view-components/toggle-menu/toggle-component\";\n\n\ntype viewState = \"cards-view\" | \"grid-view\" | \"mosaic-view\";\n\n\ninterface iPROPS {\n    message?: string;\n    gridData : iDataGridItem[][];\n    columnsData : iColumn[];\n    dataManager : DataManager;\n    targetDataSet : dataSetType;\n}\n\ninterface iSTATE{\n    mediaDetailsOpen : boolean;\n    viewMode : viewState;\n    editDrawerOpen : boolean;\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n    focusedInput : focusInputType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    editDrawerMaximized : boolean;\n}\n\nexport class MediaLibraryView extends React.Component<iPROPS, iSTATE>{\n    constructor(props:iPROPS) {\n        super(props);\n        this.columnDefs = this.props.columnsData;\n        this.state={\n            mediaDetailsOpen : false,\n            viewMode : \"grid-view\",\n            editDrawerOpen : false,\n            //TODO need to adjust data manager\n            columnsData : this.props.columnsData,\n            workingData : this.props.gridData,\n            focusedInput : { row:0, cell:0, editDrawerOpen : false},\n            footerOpen : false,\n            footerMode : \"default\",\n            editDrawerMaximized : false\n        }\n    }\n    selectedMediaIndex : number = 0;\n    dataGridRef = React.createRef<DataGrid>();\n    editDrawerRef = React.createRef<StickyThing>();\n    drawerFirstOpen : boolean = false;\n    //COLUMN DEFINITIONS:\n    columnDefs : iColumn[];\n\n    //just for the fist launch of checkbox editing\n    initialized : boolean = false;\n\n    selectionSet : selectionObject[] = [];\n    drawerInputsLength = 0;\n\n    manageMediaDetailsPage=(mediaIndex : number)=>{\n        console.log(\"mediaIndex\", mediaIndex );\n        this.selectedMediaIndex = mediaIndex;\n        this.setState({mediaDetailsOpen : !this.state.mediaDetailsOpen})\n    };\n\n    manageViewModes(desiredState : viewState){\n        this.setState({viewMode : desiredState});\n    }\n\n    getMediaDetailsView(){\n        if(this.state.mediaDetailsOpen === true){\n            return(\n                <StickyThing\n                    enterFromThisSide=\"right\"\n                    lastResortClasses={\"product-view\"}\n                    animateIn={true}\n                    heightIncludeUnits=\"100vh\"\n                    widthIncludeUnits={\"100vw\"}\n                    stickyOpen={true}\n                    bgColor={\"#CECECE\"}\n                    doAnimation={true}\n                >\n                    <SingleMediaDetailsView\n                        mediaData={dataManagerMain.getMediaObjectData()[this.selectedMediaIndex]}\n                        closeSingleMediaView={()=>this.manageMediaDetailsPage(0)}\n                    />\n                </StickyThing>\n            )\n        }\n    }\n\n    getCardArea() {\n        if (this.state.mediaDetailsOpen === false) {\n            return (<CardArea\n                containerClasses=\"catman-media-cards\"\n                cards={\n                    <Card\n                        cardType=\"media\"\n                        mediaData={dataManagerMain.getMediaObjectData()}\n                        getDetailsFunctions={this.manageMediaDetailsPage}\n                        actionToolTip={toolTipContent.mediaRelatedTooltips(\"media-details\")}\n                    />\n                }\n            />)\n        } else {\n            return (<></>)\n        }\n    }\n\n    getColumnLabel(colName : string) : string{\n        //utility method for getting column data obj from\n        let columnLabel = \"\";\n        for(let i = 0; i < this.columnDefs.length; i++){\n            if(this.columnDefs[i].columnName === colName){\n                columnLabel = this.columnDefs[i].columnLabel;\n            }\n        }\n        return columnLabel;\n    }\n\n    updateValues=(row : number, cell:number, value:string, colName : string)=>{\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n            this.selectionSet = this.dataGridRef.current.selectionSet;\n            console.log(\"cat details view selection set: \", this.selectionSet)\n        }\n        console.log(\"inside drawer\", value, \" col name:\", colName);\n        //the minus 2 is the offset for the extra columns checkbox and edit\n        for(let i =0; i < this.selectionSet.length; i++){\n            if(this.selectionSet[i].columnName === colName){\n                let myRow = this.selectionSet[i].row-2;\n                let myCell = this.selectionSet[i].cell-2;\n\n                //this.workingDataSet[ myRow-2][myCell-2].value = value;\n                const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value };\n                this.props.dataManager.setData(\"media-data\", updateSet);\n            }\n        }\n\n        this.setState({workingData : this.props.dataManager.getProductData()});\n        console.log( \"working data set:\", this.state.workingData );\n    };\n\n    openEditDrawer( ){\n        this.drawerFirstOpen = true;\n        this.setState({editDrawerOpen : true});\n    }\n\n    //DRAWER RELATED\n    maximizeEditDrawer(){\n        this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n    }\n\n    closeEditDrawer(){\n        this.setState({\n            editDrawerOpen : false,\n            editDrawerMaximized : false,\n            focusedInput : {row:0, cell:0, editDrawerOpen:false}\n        });\n        if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n            this.dataGridRef.current.clearSelection();\n        }\n        this.drawerFirstOpen = false;\n    }\n\n    inputFocusAction=(row : number, cell:number)=>{\n        //console.log(\"row: \", row, \" cell:\", cell);\n        if(this.state.editDrawerOpen === true){\n            this.setState({focusedInput : { row : row, cell : cell, editDrawerOpen: this.state.editDrawerOpen}})\n        }\n    };\n\n    //MANAGE GRID\n    //GRID MANAGEMENT\n\n    conditionClasses(){\n        if(this.state.editDrawerOpen === true){\n            return \"drawer-open\";\n        }\n    }\n\n\n    getGridArea(){\n        return(\n            <DataGridWithEditDrawer\n                gridData={dataManagerMain.getMediaDataForGrid()}\n                columnsData={dataManagerMain.getMediaColumnsForGrid()}\n                dataManager={dataManagerMain}\n                targetDataSet={\"media-data\"}\n                gridHasDetailsButton={true}\n            />\n\n        );\n    }\n\n    getContentArea(){\n        switch (this.state.viewMode) {\n            case \"grid-view\":\n                return this.getGridArea();\n            case \"cards-view\":\n                return this.getCardArea();\n        }\n    }\n\n    getToggleBar(){\n\n        //determine class\n        const selectedClass = (stateName : viewState)=>{\n          if(stateName == this.state.viewMode)\n          {\n              return \"active\";\n          }\n          else\n          {\n              return \"\";\n          }\n        };\n\n        let bla = (\n            <div className=\"button-bar\">\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"grid-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={<div>Tooltip</div>}\n                    classes={`${selectedClass(\"grid-view\")}`}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-list-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"cards-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"cards-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-card-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n                <AppButton\n                    OnClick={()=>this.manageViewModes(\"mosaic-view\")}\n                    buttonType=\"transparent-bg\"\n                    tooltipType=\"custom\"\n                    tooltip={ toolTipContent.goBackWizard()}\n                    classes={`${selectedClass(\"mosaic-view\")} `}\n                    iconCenter={(\n                        <CatmanIcon\n                            iconName={`icon-mosaic-view`}\n                            width=\"1rem\"\n                            height=\"100%\"\n                        />\n                    )}\n                />\n            </div>\n        );\n\n        let buttonBarConfig : iToggleMenuItem[] = [\n            {\n                element : <></>,\n                label : \"\",\n                toggleItemType : \"nav\",\n                function : ()=>this.manageViewModes(\"grid-view\"),\n                icon : (\n                    <CatmanIcon\n                        iconName={`icon-list-view`}\n                        width=\"1rem\"\n                        height=\"100%\"\n                    />\n                ),\n                toolTip : toolTipContent.mediaGridView(),\n                classes : \"\"\n            },\n            {\n                element : <></>,\n                label : \"\",\n                toggleItemType : \"nav\",\n                function : ()=>this.manageViewModes(\"cards-view\"),\n                toolTip : toolTipContent.mediaCardView(),\n                icon : (\n                    <CatmanIcon\n                        iconName={`icon-card-view`}\n                        width=\"1rem\"\n                        height=\"100%\"\n                    />\n                ),\n                classes : \"\"\n            },\n            {\n                element : <></>,\n                label : \"\",\n                toggleItemType : \"nav\",\n                function : ()=>this.manageViewModes(\"mosaic-view\"),\n                toolTip : toolTipContent.goBackWizard(),\n                icon : (\n                    <CatmanIcon\n                        iconName={`icon-mosaic-view`}\n                        width=\"1rem\"\n                        height=\"100%\"\n                    />\n                ),\n                classes : \"\"\n            }\n        ];\n\n        let buttonBar  = (\n            <ToggleMenu\n                buttons={buttonBarConfig}\n                containerClasses=\"view-switcher\"\n            />\n        );\n\n        return buttonBar;\n\n    }\n\n    render(){\n        return(\n            <>\n                <MainHeaderArea\n                    addItemAction={()=>{}}\n                    sectionTitle=\"Media Library\"\n                    mainButtonLabel=\"Add Media\"\n                    navigationElement={<Navigation menuHelpStyle=\"panel\" navElements={mainNavConfig} />}\n                />\n                <div className=\"base-grid-8 menu-area\">\n                    <TitleArea\n                        mainTitle=\"Media Library\"\n                        subTitle=\"Manage media to describe your products\"\n                        titleType=\"subtitle-above\"\n                    />\n                     {this.getToggleBar()}\n                </div>\n\n                {this.getContentArea()}\n                {this.getMediaDetailsView()}\n            </>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}