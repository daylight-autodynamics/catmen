{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/_catman-configuration/wizards/create-product-group/add-variants-wizard.tsx\";\nimport * as React from \"react\";\nimport { toolTipContent } from \"../../../_common/tool-tip-content/content-tool-tips\";\nimport { CatmanIcon } from \"../../../../svg/icons/icons\";\nimport AppButton from \"../../../../view-components/button/app-button\";\nimport { TextInput } from \"../../../../view-components/text-input/text-input\";\nimport { dataManagerMain } from \"../../../../index\";\nexport class AddVariantsWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wizardPanel: \"start\"\n    };\n  }\n\n  addVariants() {\n    console.log(this.props.selectedCheckBoxes);\n    let newItem = [];\n\n    if (this.props.selectedCheckBoxes !== undefined) {\n      if (this.props.selectedCheckBoxes.length === 1) {\n        newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[this.props.selectedCheckBoxes[0]]));\n        dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0, newItem);\n      } else {}\n    }\n\n    console.log(\"added variant\", dataManagerMain.productData);\n    this.props.manageModal();\n  }\n\n  element() {\n    switch (this.state.wizardPanel) {\n      case \"closed\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"start\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }\n        }, \"Add Products Variants\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"add-blank-stubs-area\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }\n        }, \"Add\"), /*#__PURE__*/React.createElement(TextInput, {\n          label: \"Number of variants\",\n          currentValue: \"1\",\n          onChangeAction: () => {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }\n        }, \"New blank product stubs as variants: \"), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Go\",\n          OnClick: () => this.addVariants(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.addBlankStubs(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add-invert\",\n            classes: \"reverse\",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }\n        })));\n\n      case \"upload-2\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  render() {\n    return this.element();\n  }\n\n} // export let uploadWizard : iWizardStep[] = [\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard  wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     }\n// ];","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/_catman-configuration/wizards/create-product-group/add-variants-wizard.tsx"],"names":["React","toolTipContent","CatmanIcon","AppButton","TextInput","dataManagerMain","AddVariantsWizard","Component","constructor","props","state","wizardPanel","addVariants","console","log","selectedCheckBoxes","newItem","undefined","length","JSON","parse","stringify","productData","splice","manageModal","element","addBlankStubs","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {iWizardStep} from \"../../../../view-components/wizard/wizard\";\nimport {ReactElement} from \"react\";\nimport {toolTipContent} from \"../../../_common/tool-tip-content/content-tool-tips\";\nimport {CatmanIcon} from \"../../../../svg/icons/icons\";\nimport AppButton from \"../../../../view-components/button/app-button\";\nimport {DividerLine} from \"../../../../view-components/divider-line/divider-line\";\nimport {TextInput} from \"../../../../view-components/text-input/text-input\";\nimport {Illustration} from \"../../../../svg/illustrations/illustrations\";\nimport {dataManagerMain} from \"../../../../index\";\nimport {iDataGridItem} from \"../../../../view-components/data-grid/data-types-for-data-grid\";\n\ninterface iPROPS{\n    addAction : Function\n    selectedCheckBoxes? : number[];\n    groups : string[];\n    manageModal : Function;\n}\n\ninterface iSTATE{\n    wizardPanel : \"closed\" | \"start\" | \"upload-2\" | \"upload-3\";\n}\n\nexport class AddVariantsWizard extends React.Component<iPROPS, iSTATE>{\n\n    constructor(props:iPROPS) {\n        super(props);\n        this.state={\n            wizardPanel : \"start\"\n        }\n    }\n\n    addVariants(){\n        console.log(this.props.selectedCheckBoxes);\n        let newItem : iDataGridItem[] = [];\n        if(this.props.selectedCheckBoxes !== undefined){\n            if(this.props.selectedCheckBoxes.length === 1){\n                newItem = JSON.parse(JSON.stringify(dataManagerMain.productData[ this.props.selectedCheckBoxes[0]]) ) ;\n                dataManagerMain.productData.splice(this.props.selectedCheckBoxes[0], 0,newItem);\n            }else{\n\n            }\n        }\n        console.log(\"added variant\",dataManagerMain.productData);\n        this.props.manageModal();\n    }\n\n\n\n    element(){\n        switch (this.state.wizardPanel) {\n            case \"closed\":\n                return(<></>);\n            case \"start\":\n                return(\n                    <div>\n                        <h3>Add Products Variants</h3>\n                        <div className={\"add-blank-stubs-area\"}>\n                            <p>Add</p>\n                            <TextInput\n                                label={\"Number of variants\"}\n                                currentValue={\"1\"}\n                                onChangeAction={()=>{}}\n                            />\n                            <p>New blank product stubs as variants: </p>\n                            <AppButton\n                                buttonType={\"secondary-action\"}\n                                buttonLabel=\"Go\"\n                                OnClick={()=>this.addVariants()}\n                                tooltipType=\"custom\"\n                                tooltip={toolTipContent.addBlankStubs()}\n                                toolTipTimeOutInMS={10000}\n                                tooltipXOffset={0}\n                                tooltipYOffset={20}\n                                iconLeft={\n                                    <CatmanIcon\n                                        iconName=\"icon-add-invert\"\n                                        classes=\"reverse\"\n                                        height=\"100%\"\n                                        width=\"100%\"\n                                    />\n                                }\n                            />\n                        </div>\n                    </div>\n                );\n            case \"upload-2\":\n                return(<></>)\n        }\n    }\n\n    render(){\n        return(this.element())\n    }\n}\n\n// export let uploadWizard : iWizardStep[] = [\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     },\n//     {\n//         titleHeader : \"string;\",\n//         instructionText : \"string;\",\n//         panel : (<UploadWizard  wizardActions={[]}/>),\n//         winCondition : (1 > 0)\n//     }\n// ];"]},"metadata":{},"sourceType":"module"}