{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/card/card.tsx\";\nimport * as React from \"react\";\nexport class Card extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getCard(cardTitle) {\n    switch (this.props.cardType) {\n      case \"media\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"card media-card\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"header\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 29\n          }\n        }, cardTitle)));\n\n      case \"product\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  getMediaCards() {\n    let cardsCollections = [];\n\n    if (this.props.mediaData !== undefined) {\n      for (let i = 0; i < this.props.mediaData.length; i++) {\n        cardsCollections.push(this.getCard(this.props.mediaData[i].mediaName));\n      }\n    }\n\n    return cardsCollections;\n  }\n\n  render() {\n    switch (this.props.cardType) {\n      case \"media\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null, this.getMediaCards());\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/view-components/card/card.tsx"],"names":["React","Card","Component","constructor","props","getCard","cardTitle","cardType","getMediaCards","cardsCollections","mediaData","undefined","i","length","push","mediaName","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAcA,OAAO,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAAkD;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAiB;AACxB,UAAMA,KAAN;AACH;;AAEDC,EAAAA,OAAO,CAACC,SAAD,EAAmC;AACtC,YAAO,KAAKF,KAAL,CAAWG,QAAlB;AACI,WAAK,OAAL;AACI,4BACI;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMD,SAAN,CADJ,CADJ,CADJ;;AAOJ,WAAK,SAAL;AACI,4BAAO,yCAAP;AAVR;AAYH;;AAEDE,EAAAA,aAAa,GAAE;AACX,QAAIC,gBAAiC,GAAG,EAAxC;;AACA,QAAG,KAAKL,KAAL,CAAWM,SAAX,KAAyBC,SAA5B,EAAsC;AAClC,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,KAAKR,KAAL,CAAWM,SAAX,CAAqBG,MAAtC,EAA8CD,CAAC,EAA/C,EAAkD;AAC9CH,QAAAA,gBAAgB,CAACK,IAAjB,CAAsB,KAAKT,OAAL,CAAa,KAAKD,KAAL,CAAWM,SAAX,CAAqBE,CAArB,EAAwBG,SAArC,CAAtB;AACH;AACJ;;AACD,WAAON,gBAAP;AACH;;AAGDO,EAAAA,MAAM,GAAE;AAEJ,YAAQ,KAAKZ,KAAL,CAAWG,QAAnB;AACI,WAAK,OAAL;AACI,4BAAQ,0CAAG,KAAKC,aAAL,EAAH,CAAR;AAFR;;AAIA,wBAAQ,yCAAR;AACH;;AAtCoD","sourcesContent":["import * as React from \"react\";\nimport {mediaObject} from \"../../_sample-data/media-library\";\nimport {ReactElement} from \"react\";\n\n\ninterface iPROPS{\n    cardType : \"media\" | \"product\";\n    mediaData? : mediaObject[]\n}\n\ninterface iSTATE{\n\n}\n\nexport class Card extends React.Component<iPROPS, iSTATE>{\n    constructor(props : iPROPS) {\n        super(props);\n    }\n\n    getCard(cardTitle : string, ):ReactElement{\n        switch(this.props.cardType){\n            case \"media\":\n                return(\n                    <div className=\"card media-card\">\n                        <header>\n                            <div>{cardTitle}</div>\n                        </header>\n                    </div>\n                );\n            case \"product\":\n                return(<></>);\n        }\n    }\n\n    getMediaCards(){\n        let cardsCollections : ReactElement[] = [];\n        if(this.props.mediaData !== undefined){\n            for(let i=0; i < this.props.mediaData.length; i++){\n                cardsCollections.push(this.getCard(this.props.mediaData[i].mediaName));\n            }\n        }\n        return cardsCollections;\n    }\n\n\n    render(){\n\n        switch (this.props.cardType) {\n            case \"media\":\n                return (<>{this.getMediaCards()}</>)\n        }\n        return (<></>)\n    }\n}"]},"metadata":{},"sourceType":"module"}