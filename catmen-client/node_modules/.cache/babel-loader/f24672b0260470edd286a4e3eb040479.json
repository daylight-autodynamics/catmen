{"ast":null,"code":"var _jsxFileName = \"/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/catalog-views/catalog-details/catalog-details-view.tsx\";\nimport * as React from \"react\";\nimport { CatmanIcon } from \"../../../svg/icons/icons\";\nimport { DataGrid } from \"../../../view-components/data-grid/data-grid\";\nimport { catmanData } from \"../../../_sample-data/products-data\";\nimport { TitleArea } from \"../../../view-components/title-area/title-area\";\nimport StickyThing from \"../../../view-components/sticky-panel/sticky-panel\";\nimport { toolTipContent } from \"../../tool-tip-content/content-tool-tips\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport { CatalogSingleProduct } from \"./single-product-view\";\nimport { TextInput } from \"../../../view-components/text-input/text-input\";\nimport { ModalView } from \"../../../view-components/modal/modal\";\nimport { AddVariantsWizard } from \"../../wizards/create-product-group/add-variants-wizard\";\nimport { dataManagerMain } from \"../../../index\";\nimport { CreateProductGroupWizard } from \"../../wizards/create-product-group/create-product-group-wizard\";\nexport class CatalogDetailsView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.workingDataSet = void 0;\n    this.initialized = false;\n    this.dataGridRef = React.createRef();\n    this.editDrawerRef = React.createRef();\n    this.editDrawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n    this.selectionSet = [];\n    this.columns = void 0;\n    this.drawerFirstOpen = false;\n\n    this.closeSingleProductEdit = () => {\n      window.history.back();\n    };\n\n    this.updateValues = (row, cell, value, colName) => {\n      if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n        this.selectionSet = this.dataGridRef.current.selectionSet;\n        console.log(\"cat details view selection set: \", this.selectionSet);\n      }\n\n      console.log(\"inside drawer\", value, \" col name:\", colName); //the minus 2 is the offset for the extra columns checkbox and edit\n\n      for (let i = 0; i < this.selectionSet.length; i++) {\n        if (this.selectionSet[i].columnName === colName) {\n          let myRow = this.selectionSet[i].row - 2;\n          let myCell = this.selectionSet[i].cell - 2; //this.workingDataSet[ myRow-2][myCell-2].value = value;\n\n          const updateSet = {\n            row: myRow,\n            cell: myCell,\n            newData: value\n          };\n          this.props.gridData.setProductData = updateSet;\n        }\n      }\n\n      this.setState({\n        workingData: this.props.gridData.getData\n      });\n      console.log(\"working data set:\", this.state.workingData);\n    };\n\n    this.inputFocusAction = (row, cell) => {\n      console.log(\"row: \", row, \" cell:\", cell);\n    };\n\n    this.manageSelectionSet = (selectionSet, checkBoxSelections, message) => {\n      if (checkBoxSelections.length > 0 || this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") {\n        if (checkBoxSelections.length <= 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"default\"\n          });\n        } else if (checkBoxSelections.length > 1) {\n          this.setState({\n            editDrawerOpen: false,\n            footerOpen: true,\n            footerMode: \"multiple-selected\"\n          });\n        }\n\n        this.initialized = true;\n      } else {\n        this.setState({\n          footerOpen: false\n        });\n      }\n    };\n\n    this.columns = this.props.columnsData.getColumns;\n    this.state = {\n      workingData: this.props.gridData.getData,\n      columnsData: this.props.columnsData.getColumns,\n      productViewOpen: false,\n      editDrawerOpen: false,\n      editDrawerMaximized: false,\n      footerOpen: false,\n      footerMode: \"default\",\n      selectionSet: [],\n      modalState: \"closed\"\n    };\n    this.workingDataSet = this.props.gridData.getData;\n  }\n\n  getCheckBoxesSelection() {\n    if (this.dataGridRef.current !== null && this.dataGridRef.current !== undefined) {\n      return this.dataGridRef.current._checkedRows;\n    }\n  }\n\n  getProductViewDrawer() {\n    if (this.props.query != \"none\" && this.props.query != null && this.props.query != undefined) {\n      return /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"right\",\n        lastResortClasses: \"product-view\",\n        animateIn: true,\n        heightIncludeUnits: \"100vh\",\n        widthIncludeUnits: \"100vw\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(CatalogSingleProduct, {\n        uniqueID: this.props.query,\n        productData: this.state.workingData,\n        closeSingleProduct: this.closeSingleProductEdit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  getColumnLabel(colName) {\n    let columnLabel = \"\";\n\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].columnName === colName) {\n        columnLabel = this.columns[i].columnLabel;\n      }\n    }\n\n    return columnLabel;\n  }\n\n  getEditDrawer() {\n    if (this.state.editDrawerOpen === false) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.selectionSet = this.dataGridRef.current.selectionSet;\n      console.log(\"cat details view selection set: \", this.selectionSet);\n    }\n\n    let inputs = [];\n    let selectedItems = []; //Create list of selection items that need inputs (i.e. one input per column)\n\n    i: for (let i = 0; i < this.selectionSet.length; i++) {\n      j: for (let j = 0; j < selectedItems.length; j++) {\n        if (this.selectionSet[i].columnName === selectedItems[j].columnName) {\n          continue i;\n        }\n      }\n\n      let row = this.selectionSet[i].row;\n      let cell = this.selectionSet[i].cell;\n      let productDataItem = catmanData.productData[row - 2][cell - 2];\n      selectedItems.push(productDataItem);\n    }\n\n    for (let i = 0; i < selectedItems.length; i++) {\n      let input = /*#__PURE__*/React.createElement(TextInput, {\n        row: this.selectionSet[i].row,\n        cell: this.selectionSet[i].cell,\n        columnName: this.selectionSet[i].columnName,\n        label: this.getColumnLabel(selectedItems[i].columnName),\n        currentValue: selectedItems[i].value,\n        onChangeAction: this.updateValues,\n        onFocusAction: this.inputFocusAction,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 18\n        }\n      });\n      inputs.push(input);\n    }\n\n    let maximize = valueCheck => {\n      if (valueCheck === true) {\n        return \"maximized\";\n      } else {\n        return \"catman-edit-default restored\";\n      }\n    };\n\n    let restoreAndMaximizeTooltip = valueCheck => {\n      if (valueCheck === false) {\n        return toolTipContent.maximizeDrawer();\n      } else {\n        return toolTipContent.restoreDrawer();\n      }\n    };\n\n    let restoreAndMaximizeBtnIcon = valueCheck => {\n      if (valueCheck === false) {\n        return \"icon-maximize\";\n      } else {\n        return \"icon-restore-btn\";\n      }\n    };\n\n    let drawer = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    if (this.state.editDrawerOpen === true) {\n      drawer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        ref: this.editDrawerRef,\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: `catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`,\n        animateIn: true,\n        heightIncludeUnits: \"\",\n        widthIncludeUnits: \"\",\n        stickyOpen: true,\n        bgColor: \"#CECECE\",\n        doAnimation: true,\n        toolBar: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tool-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 30\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 34\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 34\n        }\n      }, /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.maximizeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: restoreAndMaximizeTooltip(this.state.editDrawerMaximized),\n        toolTipTimeOutInMS: 10000,\n        classes: \"tool-bar-btn icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: `${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`,\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 46\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 39\n        }\n      }), /*#__PURE__*/React.createElement(AppButton, {\n        buttonType: \"secondary-action\",\n        buttonLabel: \"\",\n        OnClick: () => this.closeEditDrawer(),\n        tooltipType: \"custom\",\n        tooltip: toolTipContent.closeDrawer(),\n        toolTipTimeOutInMS: 10000,\n        classes: \"icon-only-btn\",\n        iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n          iconName: \"icon-close\",\n          classes: \" \",\n          height: \"100%\",\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 46\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 38\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer-edit-area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 30\n        }\n      }, inputs)));\n    }\n\n    return drawer;\n  }\n\n  maximizeEditDrawer() {\n    this.setState({\n      editDrawerMaximized: !this.state.editDrawerMaximized\n    });\n  }\n\n  closeEditDrawer() {\n    this.setState({\n      editDrawerOpen: false,\n      editDrawerMaximized: false\n    });\n\n    if (this.dataGridRef.current != null && this.dataGridRef.current != undefined) {\n      this.dataGridRef.current.clearSelection();\n    }\n\n    this.drawerFirstOpen = false;\n  }\n\n  openEditDrawer() {\n    this.drawerFirstOpen = true;\n    this.setState({\n      editDrawerOpen: true\n    });\n  } //FOOTER RELATED\n\n\n  getFooterMenu() {\n    let footer = /*#__PURE__*/React.createElement(React.Fragment, null);\n    let buttons = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n    switch (this.state.footerMode) {\n      case \"default\":\n        buttons = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footer-btn-bar catman-footer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          classes: \"separate-left\",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Edit Selected\",\n          OnClick: () => this.switchToEditMode(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerEditSelection(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-edit\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          classes: \" \",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Add Variant\",\n          OnClick: () => this.manageModals(\"add-to-product-group\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerAddVariant(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Clear Selection\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.clearSelection(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"clear\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Delete Selected\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }\n        }));\n        break;\n\n      case \"multiple-selected\":\n        buttons = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footer-btn-bar catman-footer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(AppButton, {\n          classes: \"\",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Edit Selected\",\n          OnClick: () => this.switchToEditMode(),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerEditSelection(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-edit\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          classes: \" \",\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Make Into a Variant Group\",\n          OnClick: () => this.manageModals(\"create-product-group\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerCreateVariant(),\n          toolTipTimeOutInMS: 10000,\n          tooltipXOffset: 0,\n          tooltipYOffset: 20,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-add\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Clear Selection\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.clearSelection(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"clear\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"Delete Selected\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.footerDelete(),\n          toolTipTimeOutInMS: 10000,\n          iconLeft: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"icon-delete\",\n            classes: \" \",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 25\n          }\n        }));\n        break;\n\n      case \"has-group\":\n        buttons = /*#__PURE__*/React.createElement(AppButton, {\n          buttonType: \"secondary-action\",\n          buttonLabel: \"catalog manager\",\n          OnClick: () => this.footerActions(\"cancel\"),\n          tooltipType: \"custom\",\n          tooltip: toolTipContent.mainNav(),\n          toolTipTimeOutInMS: 10000,\n          iconRight: /*#__PURE__*/React.createElement(CatmanIcon, {\n            iconName: \"down-arrow\",\n            classes: \"ui-icon\",\n            height: \"100%\",\n            width: \"100%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 25\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 28\n          }\n        });\n    }\n\n    if (this.state.footerOpen === true) {\n      let buttonBar = /*#__PURE__*/React.createElement(React.Fragment, null);\n      footer = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StickyThing, {\n        enterFromThisSide: \"bottom\",\n        lastResortClasses: \"catman-footer-container\",\n        animateIn: true,\n        heightIncludeUnits: \"3.75rem\",\n        widthIncludeUnits: \"100%\",\n        stickyOpen: true,\n        bgColor: \"rgba(0,0,0,0)\",\n        doAnimation: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 21\n        }\n      }, buttons));\n    }\n\n    return footer;\n  }\n\n  footerActions(action) {\n    switch (action) {\n      case \"cancel\":\n        this.setState({\n          footerOpen: false\n        });\n        this.initialized = false;\n\n        if (this.dataGridRef.current !== null && this.dataGridRef.current !== undefined) {\n          this.dataGridRef.current.clearSelection();\n        }\n\n        break;\n\n      case \"add-group\":\n        break;\n\n      case \"edit\":\n        this.setState({\n          footerOpen: false\n        });\n        this.initialized = false;\n        break;\n    }\n  }\n\n  addAction(addType) {\n    console.log(\"added item or items: \", addType);\n\n    switch (addType) {\n      case \"add-attribute\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n\n      case \"add-products\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  } //FOOTER ACTIONS\n\n\n  switchToEditMode() {\n    if (this.dataGridRef.current !== null && this.dataGridRef.current !== undefined) {\n      this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n      this.openEditDrawer();\n      this.initialized = false;\n      this.setState({\n        footerOpen: false\n      });\n    } //manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )\n    //this.footerActions(\"cancel\");\n\n  } //GRID MANAGEMENT\n\n\n  conditionClasses() {\n    if (this.state.editDrawerOpen === true) {\n      return \"drawer-open\";\n    }\n  } //MODALS modalStateType = \"closed\" | \"add-to-product-group\" | \"create-product-group\" | \"delete-confirmation\";\n\n\n  manageModals(modalState) {\n    console.log(\"close the dang modal!!!!\", modalState);\n    this.setState({\n      modalState: modalState\n    });\n  }\n\n  getModals() {\n    switch (this.state.modalState) {\n      case \"add-to-product-group\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalView, {\n          closeModalFunc: () => this.manageModals(\"closed\"),\n          modalTitle: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(AddVariantsWizard, {\n          addAction: dataManagerMain.addToProductGroup,\n          groups: dataManagerMain.getGroups(),\n          selectedCheckBoxes: this.getCheckBoxesSelection(),\n          manageModal: () => this.manageModals(\"closed\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 25\n          }\n        })));\n\n      case \"create-product-group\":\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalView, {\n          closeModalFunc: () => this.manageModals(\"closed\"),\n          modalTitle: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(CreateProductGroupWizard, {\n          addAction: dataManagerMain.addToProductGroup,\n          groups: dataManagerMain.getGroups(),\n          selectedCheckBoxes: this.getCheckBoxesSelection(),\n          manageModal: () => this.manageModals(\"closed\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 30\n          }\n        })));\n    }\n  } //RENDERING AND PORTALS\n\n\n  componentDidUpdate() {\n    let inputs = document.getElementsByClassName(\"InputBox\");\n    console.log(this.drawerFirstOpen);\n\n    if (this.drawerFirstOpen === true) {\n      if (inputs[0] != undefined) {\n        inputs[0].focus();\n        inputs[0].select();\n        this.drawerFirstOpen = false;\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TitleArea, {\n      mainTitle: \"Spreadsheet View\",\n      subTitle: \"My Catalog\",\n      titleType: \"subtitle-above\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(DataGrid, {\n      ref: this.dataGridRef,\n      data: this.state.workingData,\n      manageParentViews: () => this.openEditDrawer(),\n      selectionCallback: this.manageSelectionSet,\n      columnsData: this.state.columnsData,\n      classes: this.conditionClasses(),\n      addAction: this.addAction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 18\n      }\n    }), this.getEditDrawer(), this.getFooterMenu(), this.getProductViewDrawer(), this.getModals());\n  }\n\n}","map":{"version":3,"sources":["/Users/hr145a/Documents/WayfairCodeBases/CatMan/catmen-client/src/views/catalog-views/catalog-details/catalog-details-view.tsx"],"names":["React","CatmanIcon","DataGrid","catmanData","TitleArea","StickyThing","toolTipContent","AppButton","CatalogSingleProduct","TextInput","ModalView","AddVariantsWizard","dataManagerMain","CreateProductGroupWizard","CatalogDetailsView","Component","constructor","props","workingDataSet","initialized","dataGridRef","createRef","editDrawerRef","editDrawer","selectionSet","columns","drawerFirstOpen","closeSingleProductEdit","window","history","back","updateValues","row","cell","value","colName","current","undefined","console","log","i","length","columnName","myRow","myCell","updateSet","newData","gridData","setProductData","setState","workingData","getData","state","inputFocusAction","manageSelectionSet","checkBoxSelections","message","editDrawerOpen","footerOpen","footerMode","columnsData","getColumns","productViewOpen","editDrawerMaximized","modalState","getCheckBoxesSelection","_checkedRows","getProductViewDrawer","query","getColumnLabel","columnLabel","getEditDrawer","inputs","selectedItems","j","productDataItem","productData","push","input","maximize","valueCheck","restoreAndMaximizeTooltip","maximizeDrawer","restoreDrawer","restoreAndMaximizeBtnIcon","drawer","maximizeEditDrawer","closeEditDrawer","closeDrawer","clearSelection","openEditDrawer","getFooterMenu","footer","buttons","switchToEditMode","footerEditSelection","manageModals","footerAddVariant","footerActions","footerDelete","footerCreateVariant","mainNav","buttonBar","action","addAction","addType","switchToEditModeFromCheckBoxMode","conditionClasses","getModals","addToProductGroup","getGroups","componentDidUpdate","document","getElementsByClassName","focus","select","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {Navigation} from \"../../../view-components/list-menu/intra-app-navigation\";\nimport {MainHeaderArea} from \"../../_common/main-header-area/main-header-area\";\n\n//Configuration data:\nimport {mainNavConfig} from \"../../_catman-configuration/common-app-configuration\";\nimport {CatmanIcon} from \"../../../svg/icons/icons\";\nimport {ToolTipContent} from \"../../../view-components/heru-tool-tip/tool-tip-content\";\nimport {DataGrid, selectionObject} from \"../../../view-components/data-grid/data-grid\";\nimport {catmanData} from \"../../../_sample-data/products-data\";\nimport {TitleArea} from \"../../../view-components/title-area/title-area\";\nimport {Route, RouteComponentProps, Switch, useRouteMatch} from \"react-router-dom\";\nimport StickyThing from \"../../../view-components/sticky-panel/sticky-panel\";\nimport {ReactElement} from \"react\";\nimport {iDataGridItem} from \"../../../view-components/data-grid/data-types-for-data-grid\";\nimport {toolTipContent} from \"../../tool-tip-content/content-tool-tips\";\nimport AppButton from \"../../../view-components/button/app-button\";\nimport {appColumns, iColumn} from \"../../../_sample-data/columns\";\nimport {CatalogSingleProduct} from \"./single-product-view\";\nimport {TextInput} from \"../../../view-components/text-input/text-input\";\n\nimport {DataManager, iUpdateSet} from \"../../../data-components/data-manager/data-manager\";\nimport {ModalView} from \"../../../view-components/modal/modal\";\nimport {AddVariantsWizard} from \"../../wizards/create-product-group/add-variants-wizard\";\nimport {dataManagerMain} from \"../../../index\";\n\nimport {CreateProductGroupWizard} from \"../../wizards/create-product-group/create-product-group-wizard\";\n\n\ninterface iPROPS   {\n    message: string;\n    query:string | null;\n    gridData : DataManager;\n    columnsData : DataManager;\n}\n\nexport type modalStateType = \"closed\" | \"add-to-product-group\" | \"create-product-group\" | \"delete-confirmation\";\n\ninterface iSTATE{\n    productViewOpen : boolean;\n    editDrawerOpen : boolean;\n    editDrawerMaximized : boolean;\n    modalState : modalStateType;\n    footerOpen : boolean;\n    footerMode : \"default\" | \"has-group\" | \"no-group\" | \"multiple-selected\" ;\n    selectionSet : selectionObject[];\n    workingData : iDataGridItem[][];\n    columnsData : iColumn[];\n}\n\nexport class CatalogDetailsView extends React.Component<iPROPS, iSTATE>{\n     constructor(props:iPROPS) {\n         super(props);\n         this.columns = this.props.columnsData.getColumns;\n         this.state = {\n             workingData : this.props.gridData.getData,\n             columnsData : this.props.columnsData.getColumns,\n             productViewOpen : false,\n             editDrawerOpen : false,\n             editDrawerMaximized : false,\n             footerOpen : false,\n             footerMode : \"default\",\n             selectionSet : [],\n             modalState : \"closed\"\n         };\n\n         this.workingDataSet = this.props.gridData.getData;\n     }\n     workingDataSet : iDataGridItem[][];\n     //just for the fist launch of checkbox editing\n     initialized:boolean = false;\n     dataGridRef = React.createRef<DataGrid>();\n     editDrawerRef = React.createRef<StickyThing>();\n     editDrawer : ReactElement = (<></>);\n     selectionSet : selectionObject[] = [];\n     columns : iColumn[];\n     //manage selection in the drawer\n     drawerFirstOpen = false;\n\n\n\n    getCheckBoxesSelection(){\n        if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n            return this.dataGridRef.current._checkedRows;\n        }\n    }\n\n     closeSingleProductEdit = ()=>{\n        window.history.back();\n    };\n\n     getProductViewDrawer( ){\n         if(this.props.query != \"none\" && this.props.query != null && this.props.query != undefined ){\n\n             return(\n                 <StickyThing\n                     enterFromThisSide=\"right\"\n                     lastResortClasses={\"product-view\"}\n                     animateIn={true}\n                     heightIncludeUnits=\"100vh\"\n                     widthIncludeUnits={\"100vw\"}\n                     stickyOpen={true}\n                     bgColor={\"#CECECE\"}\n                     doAnimation={true}\n                 >\n                    <CatalogSingleProduct\n                        uniqueID={this.props.query}\n                        productData={this.state.workingData}\n                        closeSingleProduct={this.closeSingleProductEdit}\n                    />\n\n                 </StickyThing>\n             )\n         }\n     }\n\n     getColumnLabel(colName : string) : string{\n\n         let columnLabel = \"\";\n         for(let i = 0; i < this.columns.length; i++){\n             if(this.columns[i].columnName === colName){\n                 columnLabel = this.columns[i].columnLabel;\n             }\n         }\n\n         return columnLabel;\n     }\n\n     updateValues=(row : number, cell:number, value:string, colName : string)=>{\n         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n             this.selectionSet = this.dataGridRef.current.selectionSet;\n             console.log(\"cat details view selection set: \", this.selectionSet)\n         }\n         console.log(\"inside drawer\", value, \" col name:\", colName);\n         //the minus 2 is the offset for the extra columns checkbox and edit\n         for(let i =0; i < this.selectionSet.length; i++){\n             if(this.selectionSet[i].columnName === colName){\n                 let myRow = this.selectionSet[i].row-2;\n                 let myCell = this.selectionSet[i].cell-2;\n\n                 //this.workingDataSet[ myRow-2][myCell-2].value = value;\n                 const updateSet : iUpdateSet = { row:myRow ,cell:myCell, newData:value }\n                 this.props.gridData.setProductData = updateSet\n             }\n\n         }\n\n         this.setState({workingData : this.props.gridData.getData});\n         console.log( \"working data set:\", this.state.workingData );\n     };\n\n     inputFocusAction=(row : number, cell:number)=>{\n         console.log(\"row: \", row, \" cell:\", cell)\n     };\n\n     getEditDrawer():ReactElement{\n\n         if(this.state.editDrawerOpen === false){\n             return(<></>);\n         }\n\n         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined ){\n             this.selectionSet = this.dataGridRef.current.selectionSet;\n             console.log(\"cat details view selection set: \", this.selectionSet)\n         }\n\n         let inputs : ReactElement[] = [];\n         let selectedItems : iDataGridItem[] = [];\n\n         //Create list of selection items that need inputs (i.e. one input per column)\n        i: for(let i=0; i < this.selectionSet.length; i++){\n           j: for(let j=0; j < selectedItems.length; j++){\n                if(this.selectionSet[i].columnName === selectedItems[j].columnName){\n                    continue i;\n                }\n            }\n                 let row = this.selectionSet[i].row;\n                 let cell = this.selectionSet[i].cell;\n                 let productDataItem = catmanData.productData[row-2][cell-2];\n                 selectedItems.push(productDataItem);\n        }\n\n         for( let i=0; i < selectedItems.length; i++){\n             let input = (\n                 <TextInput\n                     row={this.selectionSet[i].row}\n                     cell={this.selectionSet[i].cell}\n                     columnName={this.selectionSet[i].columnName}\n                     label={this.getColumnLabel( selectedItems[i].columnName )}\n                     currentValue={ selectedItems[i].value}\n                     onChangeAction={this.updateValues}\n                     onFocusAction={this.inputFocusAction}\n                 />\n             );\n             inputs.push(input)\n         }\n\n        let maximize = (valueCheck : boolean)=>{\n             if(valueCheck === true){\n                 return \"maximized\"\n             }else{\n                 return \"catman-edit-default restored\"\n             }\n        };\n\n         let restoreAndMaximizeTooltip = (valueCheck : boolean)=>{\n            if(valueCheck === false){\n                return toolTipContent.maximizeDrawer();\n            }else{\n                return toolTipContent.restoreDrawer();\n            }\n         };\n\n         let restoreAndMaximizeBtnIcon = (valueCheck : boolean)=>{\n             if(valueCheck === false){\n                 return \"icon-maximize\"\n             }else{\n                 return \"icon-restore-btn\"\n             }\n         }\n\n\n         let drawer = (<></>);\n             if(this.state.editDrawerOpen === true){\n                 drawer = (\n                     <>\n                         <StickyThing\n                             ref = {this.editDrawerRef}\n                             enterFromThisSide=\"bottom\"\n                             lastResortClasses={`catman-edit-drawer ${maximize(this.state.editDrawerMaximized)}`}\n                             animateIn={true}\n                             heightIncludeUnits=\"\"\n                             widthIncludeUnits={\"\"}\n                             stickyOpen={true}\n                             bgColor={\"#CECECE\"}\n                             doAnimation={true}\n                             toolBar=\"none\"\n                         >\n                             <div className={\"tool-bar\"}>\n                                 <div></div>\n                                 <div className=\"drawer-controls\">\n                                      <AppButton\n                                         buttonType={\"secondary-action\"}\n                                         buttonLabel=\"\"\n                                         OnClick={()=>this.maximizeEditDrawer()}\n                                         tooltipType=\"custom\"\n                                         tooltip={restoreAndMaximizeTooltip(this.state.editDrawerMaximized)}\n                                         toolTipTimeOutInMS={10000}\n                                         classes=\"tool-bar-btn icon-only-btn\"\n                                         iconLeft={\n                                             <CatmanIcon\n                                                 iconName={`${restoreAndMaximizeBtnIcon(this.state.editDrawerMaximized)}`}\n                                                 classes=\" \"\n                                                 height=\"100%\"\n                                                 width=\"100%\"\n                                             />\n                                         }\n                                     />\n                                     <AppButton\n                                         buttonType={\"secondary-action\"}\n                                         buttonLabel=\"\"\n                                         OnClick={()=>this.closeEditDrawer()}\n                                         tooltipType=\"custom\"\n                                         tooltip={toolTipContent.closeDrawer()}\n                                         toolTipTimeOutInMS={10000}\n                                         classes=\"icon-only-btn\"\n                                         iconLeft={\n                                             <CatmanIcon\n                                                 iconName=\"icon-close\"\n                                                 classes=\" \"\n                                                 height=\"100%\"\n                                                 width=\"100%\"\n                                             />\n                                         }\n                                     />\n\n                                 </div>\n                             </div>\n\n                             <div className=\"drawer-edit-area\">\n                                 {inputs}\n                             </div>\n                         </StickyThing>\n                     </>\n                 );\n             }\n         return drawer;\n     }\n\n     maximizeEditDrawer(){\n         this.setState({editDrawerMaximized : !this.state.editDrawerMaximized})\n     }\n\n     closeEditDrawer(){\n         this.setState({\n             editDrawerOpen : false,\n             editDrawerMaximized : false\n         });\n         if(this.dataGridRef.current != null && this.dataGridRef.current != undefined){\n             this.dataGridRef.current.clearSelection();\n         }\n         this.drawerFirstOpen = false;\n     }\n\n     openEditDrawer( ){\n         this.drawerFirstOpen = true;\n         this.setState({editDrawerOpen : true});\n     }\n\n     //FOOTER RELATED\n     getFooterMenu(){\n        let footer = (<></>);\n        let buttons = (<></>);\n\n        switch(this.state.footerMode){\n            case \"default\":\n                buttons = (\n                    <div className=\"footer-btn-bar catman-footer\">\n                        <AppButton\n                            classes={\"separate-left\"}\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Edit Selected\"\n                            OnClick={()=>this.switchToEditMode()}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerEditSelection()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-edit\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            classes={\" \"}\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Add Variant\"\n                            OnClick={()=>this.manageModals(\"add-to-product-group\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerAddVariant()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-add\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Clear Selection\"\n                            OnClick={()=>this.footerActions(\"cancel\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.clearSelection()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"clear\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Delete Selected\"\n                            OnClick={()=>this.footerActions(\"cancel\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerDelete()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-delete\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n\n\n                    </div>\n                );\n                break;\n\n            case \"multiple-selected\":\n                buttons = (\n                    <div className=\"footer-btn-bar catman-footer\">\n                        <AppButton\n                            classes={\"\"}\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Edit Selected\"\n                            OnClick={()=>this.switchToEditMode()}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerEditSelection()}\n                            toolTipTimeOutInMS={10000}\n                            tooltipXOffset={0}\n                            tooltipYOffset={20}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-edit\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            classes={\" \"}\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Make Into a Variant Group\"\n                            OnClick={()=>this.manageModals(\"create-product-group\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerCreateVariant()}\n                            toolTipTimeOutInMS={10000}\n                            tooltipXOffset={0}\n                            tooltipYOffset={20}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-add\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Clear Selection\"\n                            OnClick={()=>this.footerActions(\"cancel\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.clearSelection()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"clear\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                        <AppButton\n                            buttonType={\"secondary-action\"}\n                            buttonLabel=\"Delete Selected\"\n                            OnClick={()=>this.footerActions(\"cancel\")}\n                            tooltipType=\"custom\"\n                            tooltip={toolTipContent.footerDelete()}\n                            toolTipTimeOutInMS={10000}\n                            iconLeft={\n                                <CatmanIcon\n                                    iconName=\"icon-delete\"\n                                    classes=\" \"\n                                    height=\"100%\"\n                                    width=\"100%\"\n                                />\n                            }\n                        />\n                    </div>\n                );\n                break;\n\n            case \"has-group\":\n                buttons = (<AppButton\n                    buttonType={\"secondary-action\"}\n                    buttonLabel=\"catalog manager\"\n                    OnClick={()=>this.footerActions(\"cancel\")}\n                    tooltipType=\"custom\"\n                    tooltip={toolTipContent.mainNav()}\n                    toolTipTimeOutInMS={10000}\n                    iconRight={\n                        <CatmanIcon\n                            iconName=\"down-arrow\"\n                            classes=\"ui-icon\"\n                            height=\"100%\"\n                            width=\"100%\"\n                        />\n                    }\n                />)\n        }\n\n        if(this.state.footerOpen === true){\n\n            let buttonBar : ReactElement = (<>\n            </>);\n\n            footer = (\n                <>\n                    <StickyThing\n                        enterFromThisSide=\"bottom\"\n                        lastResortClasses={\"catman-footer-container\"}\n                        animateIn={true}\n                        heightIncludeUnits=\"3.75rem\"\n                        widthIncludeUnits={\"100%\"}\n                        stickyOpen={true}\n                        bgColor={\"rgba(0,0,0,0)\"}\n                        doAnimation={true}\n                    >\n                        {buttons}\n                    </StickyThing>\n                </>\n            );\n        }\n        return footer;\n    }\n\n     footerActions(action : \"cancel\" | \"add-group\" | \"edit\"){\n         switch (action) {\n\n             case \"cancel\":\n                 this.setState({footerOpen : false});\n                 this.initialized = false;\n                 if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n                     this.dataGridRef.current.clearSelection();\n                 }\n                 break;\n             case \"add-group\":\n\n                 break;\n             case \"edit\":\n                 this.setState({footerOpen : false});\n                 this.initialized = false;\n\n                 break;\n         }\n     }\n\n     addAction(addType:string){\n         console.log(\"added item or items: \", addType );\n         switch (addType) {\n             case \"add-attribute\":\n\n                 return(<></>);\n             case \"add-products\":\n\n                 return(<></>);\n\n\n\n         }\n     }\n\n        //FOOTER ACTIONS\n     switchToEditMode(){\n         if(this.dataGridRef.current !== null && this.dataGridRef.current !== undefined){\n             this.dataGridRef.current.switchToEditModeFromCheckBoxMode();\n             this.openEditDrawer();\n             this.initialized = false;\n             this.setState({footerOpen : false})\n         }\n\n\n         //manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )\n\n         //this.footerActions(\"cancel\");\n\n     }\n\n    //GRID MANAGEMENT\n     manageSelectionSet = (selectionSet : iDataGridItem[], checkBoxSelections : number[], message : string )=>{\n        if(checkBoxSelections.length > 0 || (this.initialized === false && checkBoxSelections.length === 0 && message === \"checkbox-launched\") ){\n            if(checkBoxSelections.length <= 1){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"default\"});\n            }else if(checkBoxSelections.length > 1 ){\n                this.setState({editDrawerOpen : false, footerOpen : true, footerMode: \"multiple-selected\"});\n            }\n            this.initialized = true;\n        }else{\n            this.setState({footerOpen : false});\n        }\n\n     };\n\n     conditionClasses(){\n         if(this.state.editDrawerOpen === true){\n             return \"drawer-open\";\n         }\n     }\n\n     //MODALS modalStateType = \"closed\" | \"add-to-product-group\" | \"create-product-group\" | \"delete-confirmation\";\n    manageModals(modalState : modalStateType){\n         console.log(\"close the dang modal!!!!\", modalState);\n          this.setState({modalState : modalState});\n    }\n\n     getModals(){\n\n         switch(this.state.modalState){\n             case \"add-to-product-group\":\n                 return(\n                 <>\n                     <ModalView\n                         closeModalFunc={()=>this.manageModals(\"closed\")}\n                         modalTitle=\"\"\n                     >\n                        <AddVariantsWizard\n                            addAction={dataManagerMain.addToProductGroup}\n                            groups={dataManagerMain.getGroups()}\n                            selectedCheckBoxes={this.getCheckBoxesSelection()}\n                            manageModal = {()=>this.manageModals(\"closed\")}\n                        />\n\n                     </ModalView>\n                 </>\n\n                     );\n             case \"create-product-group\":\n                 return(\n                     <>\n                         <ModalView\n                             closeModalFunc={()=>this.manageModals(\"closed\")}\n                             modalTitle=\"\"\n                         >\n                             <CreateProductGroupWizard\n                                 addAction={dataManagerMain.addToProductGroup}\n                                 groups={dataManagerMain.getGroups()}\n                                 selectedCheckBoxes={this.getCheckBoxesSelection()}\n                                 manageModal = {()=>this.manageModals(\"closed\")}\n                             />\n\n                         </ModalView>\n                     </>\n\n                  )\n         }\n     }\n\n     //RENDERING AND PORTALS\n    componentDidUpdate(): void {\n         let inputs : any = document.getElementsByClassName(\"InputBox\");\n\n        console.log(this.drawerFirstOpen)\n        if(this.drawerFirstOpen === true ){\n           if(inputs[0] != undefined){\n               inputs[0].focus();\n               inputs[0].select();\n               this.drawerFirstOpen = false;\n           }\n        }\n     }\n\n    render(){\n         return (\n             <>\n                 <TitleArea\n                     mainTitle=\"Spreadsheet View\"\n                     subTitle=\"My Catalog\"\n                     titleType=\"subtitle-above\"\n                 />\n                 <DataGrid\n                     ref={this.dataGridRef}\n                     data={this.state.workingData}\n                     manageParentViews={()=>this.openEditDrawer()}\n                     selectionCallback={this.manageSelectionSet}\n                     columnsData={this.state.columnsData}\n                     classes={this.conditionClasses()}\n                     addAction={this.addAction}\n                 />\n                 {this.getEditDrawer() }\n                 {this.getFooterMenu() }\n                 {this.getProductViewDrawer()}\n                 {this.getModals()}\n             </>\n         )\n     }\n}\n"]},"metadata":{},"sourceType":"module"}